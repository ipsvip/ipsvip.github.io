<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ITGOYO技术站</title>
  
  <subtitle>一个专注发布技术相关与优秀文章的技术网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/itgoyo/"/>
  <updated>2017-12-09T14:26:07.000Z</updated>
  <id>https://github.com/itgoyo/</id>
  
  <author>
    <name>itgoyo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>很认真的聊一聊程序员的自我修养</title>
    <link href="https://github.com/itgoyo/2017/12/09/%E5%BE%88%E8%AE%A4%E7%9C%9F%E7%9A%84%E8%81%8A%E4%B8%80%E8%81%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB.html"/>
    <id>https://github.com/itgoyo/2017/12/09/很认真的聊一聊程序员的自我修养.html</id>
    <published>2017-12-09T14:18:35.000Z</published>
    <updated>2017-12-09T14:26:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址:<a href="https://www.cnblogs.com/printhelloworld/p/5698984.html#commentform" target="_blank" rel="external">https://www.cnblogs.com/printhelloworld/p/5698984.html#commentform</a></p><h3 id="何为程序员的自我修养？"><a href="#何为程序员的自我修养？" class="headerlink" title="何为程序员的自我修养？"></a>何为程序员的自我修养？</h3><p>正面论述很难说清楚，反向描述可能更通俗易懂一些，自我修养的对立面是“没有修养”，先说一说在这么多年的工作、学习、生活中，遇到的一些我认为“没有修养”的程序员形态：</p><p>1、程序员小张遇到了一个开发问题，很着急，想到了有几个群，于是到群里发了他的问题，坐等回答，发现没有人回答，就直接对话群主的QQ，群主也不回答，于是小张就搜索，突然搜到博客园有个帖子讲解了相关话题，他看完就给博主留言，我的邮箱是：XXXXX@qq.com，麻烦博主把源码发给我一下，谢谢。</p><p>2、程序员小张进公司3个月了，老板布置了很多任务，他觉得老板很没人性，工资给的不高，加班也不给钱，于是在写代码的时候能省就省，客户反馈有问题也不主动解决，敷衍为主，又过了一个月，跳槽了。</p><p>3、程序员小张正在写一个功能模块，需要进行某种加密，到百度搜到了一个编码模块，看不明白具体写了什么，但是放到程序里刚好适用，于是就这么原封不动放进去了。</p><p>4、程序员小张要对某个功能进行研发，项目经理对他说，这个功能应该能搜索到，你去搜搜看，小张就在百度搜啊搜，一天过去了啥都没找到，项目经理来到小张身边坐下，换了个关键词，1分钟就搜到了解决方案。</p><p>5、程序员小张学.NET已经工作3年了，工资还是10000，和公司提涨工资也没答应，想跳槽又犹豫，这时某个前辈对他说，你去看书吧，多看一些书，例如 《Visual C# 从入门到精通》，《CLR via C#》《Javascript权威指南》等等，于是小张买回来了， 随手翻了翻发现有些东西是他已经会的，有些看不懂的好像又用不到，而且书这么厚，要不要浪费时间去看呢？小张就这样反复纠结了半年，依然每天上班工作，下班LOL，偶尔还抱怨一下工资低。</p><p>6、程序员小张到了一家新公司，在做一个项目实现某个功能时，想起来以前做过这样的功能，可是竟想不起怎么实现了，于是就到自己电脑上找文档，找了好久也没找到，只好放弃，最后又折腾了2天，终于还是把这个功能给实现了。</p><p>7、程序员小张某天非常不高兴，因为他的项目经理和项目组的产品人员又变更需求了，新的需求又要对整个结构进行大的调整，小张很郁闷，到一个QQ里发泄情绪，说了这个事，于是立马，QQ群里面炸开锅了，程序员小李说，对，产品就是狗日的！程序员小王说，对，他妈的项目经理整天高枕无忧，就知道压榨开发人员！程序员小孙说，是的是的，我上一家公司也是这样，压榨程序员，幸好我走了。就这样，在一片骂声中，几个程序员心情舒畅了，小张开心的去玩王者荣耀去了。</p><p>我想，有些人可能已经明白我要说什么，有些人可能还不明白，具体的话我也说不出来，只能用一句话来概括就是：</p><p>在编写代码的过程中，善于学习、掌握方法、勤加思考、勤奋努力、持之以恒，长此以往，在编程中，你会发现不一样的自己。</p><h3 id="提升自我修养的具体方法有哪些？"><a href="#提升自我修养的具体方法有哪些？" class="headerlink" title="提升自我修养的具体方法有哪些？"></a>提升自我修养的具体方法有哪些？</h3><p>程序员具体如何达成“较高的修养”，每个人各有自己的办法，我无法说到很细，就和如何提高做人修养一样，一句两句话是说不清楚的，但是有些说法也通俗易懂，比如一个小孩，有教育良好的父母，父母彬彬有礼，小孩从小开始接受正规教育，小学、初中、高中、大学，然后文化课程和社会实践良好，那么这个小孩最终的做人修养，一定比没有经历过这个过程的小孩更好一些。</p><p>同样的，写程序也是如是，下面我就讲一些最基本的、最浅显易懂的学习方法和道理，我把它叫做：</p><p><strong>程序员基础的基础</strong></p><p>一个好的开发人员，应该能够全面、高效、严谨的去处理任何软件程序和业务问题，成为一个好的开发，是一个很有意思的话题，不过无论这个话题如何开展，基础两个字必不可少，虽然代码量是衡量开发能力的重要指标，但仅能够熟练的进行代码编写是不够的，更要能深刻的理解技术原理和业务逻辑，扎实的个人基础和技术基础往往会促进代码的编写，更游刃有余的解决问题。</p><p>下面说的一些基础，可能绝大部分开发人员都不会在意甚至忽略，但恰恰这些才是开发大厦的基石。</p><h4 id="1、科学基础"><a href="#1、科学基础" class="headerlink" title="1、科学基础"></a>1、科学基础</h4><p>成为开发人员的过程不尽相同，有的是科班出身，有的是兴趣爱好，还有的是专业机构的培训，在这个过程中，可能全面或者零散甚至没有学习过计算机基础学科，但无论是哪一种，想要成为更高层次的开发人员，写出更高质量的代码，计算机基础学科的学习，是非常非常非常（重要的事情说三遍）重要的。具体的来说，基础学科在实践应用中，有如下几门是一定需要的，按照学习顺序排列如下</p><p>1）数据结构</p><p>数据结构课程通俗的说就是告诉你如何用最基本的语言类型、变量，关键词语句等，去处理各式各样的逻辑问题，我们称之为算法，而日常编程中的各种问题，例如排序、文件夹遍历操作、数据库查询等，都可以在数据结构课程中，找到对应的数学原型。数据结构课程的理解能力，也是一个人数学能力的体现，数据结构学习的好坏，是程序员水平差异的一个重要分水岭，对于这一块内容的学习，有如下建议：使用VB、C、C++、Pascal等语言，买一本相关语言数据结构与算法的书，或者在网上下载相关的PDF电子书，完整的学习一边，并将书本中的所有案例亲自编写运行调试一遍，当能够领悟到某些日常编程中常见手法源于某些数据结构和算法时，就基本达到了学习效果。</p><p>2）操作系统</p><p>所有编程语言的开发以及应用的运行，都基于操作系统，桌面编程中的大部分场景包括内存、进程、文件系统、网络通讯、用户界面等，都源于操作系统的定义和概念，完整的了解操作系统的起源和组成以及运行逻辑，对多线程、复杂界面、文件管理以及一些难以正常理解编程思路等开发中遇到的场景，有非常大的帮助，不仅帮助理解，也能掌握更多有效的程序写法。具体可以买一本操作系统的书或者下载相关PDF电子书，完整的浏览一遍，做到能够结合实际编程场景来看待操作系统原理，就基本达到了学习效果。</p><p>3）数据库</p><p>传统的关系型数据库，入门简单，深入却难，往往开发人员能够较快的掌握增删改查、视图、索引、存储过程等基本数据库操作，却在编写复杂查询、设计主外键、优化字段、去除冗余等时，出现只会依葫芦画瓢却不能自主思考扩展的状况。究其原因还是没能了解关系数据库的根本原理，而数据库这一门课程，系统的阐述了关系型数据库的来龙去脉，了解其中的数学原理或逻辑基础所在，对提升数据库编程水平有质的影响。建议也是买一本数据库的相关书籍或者下载PDF电子书，能够把熟练的把第一范式、第二范式等数据库课程的基本知识点与数据库编程场景建立起关联，也基本达到了学习效果。</p><p>4）编译原理</p><p>编译原理是编程语言以及各类语言编译器的科学基础，可以说编译原理创造了世界上的几乎所有的IT应用，学习编译原理的基础是数据结构和算法，因此编译原理的学习要花费更多的时间和精力，由于现代高级编程语言的编译器，在代码优化、资源优化方面已经做的足够智能，因此，编译原理的学习对实战的影响越来越小，但是正所谓本盛末荣，如果认为自己对数据结构和算法的学习达到了一个较高的水平和状态，可以在编译原理学习上进一步深入，最终把自己和普通程序员拉开更大的差距。</p><h4 id="2、英语能力"><a href="#2、英语能力" class="headerlink" title="2、英语能力"></a>2、英语能力</h4><p>英语的天然特性和字母长度还有学科发展的历史因素，决定了编程语言一定是基于英语的，在编程过程中，从语言的关键词到文档的内容又或是搜索引擎的搜索结果，都不可避免的会遇到英文。大部分编程人员，都具备英语四级左右的英文基础，却由于非专业以及工作环境原因，逐渐疏远甚至完全淡忘了英语。而实际操作中，大部分编程语言资料都是英文，在线编程问答内容也是英文，因此，很有必要把英语能力重新恢复到一个不用太高但行之有效的水平，达到如下效果：</p><p>1）对自己所使用语言，每一个关键词都知道具体的英文翻译、逻辑含义以及读音。</p><p>2）对于自己使用语言所涉及到的相关方法、类库、框架、工具等，能知道其中每一个方法、过程以及参数关键词等的英文翻译、逻辑含义以及读音。</p><p>3）对常见的编程逻辑和核心关键词，能够用英文组织问题的描述，最简答的也行，只要能被搜索引擎读懂就可以。比如如何在C#中把整形转换为字符串类型这个问题，最简易的英文描述就是 C# Integer Covert To String。</p><p>4）在自己技术知识范围内的任何的英文的技术手册、文档、文章或是问题描述，能够读懂8成的内容含义，能够读懂完整的技术含义。</p><h4 id="3、搜索方法"><a href="#3、搜索方法" class="headerlink" title="3、搜索方法"></a>3、搜索方法</h4><p>任何一个开发人员，都应当具备搜索能力，甚至是一定要具备搜索能力，搜索引擎的宝藏，是无穷无尽的，同样具备搜索意识的不同程序员，却因为搜索技巧的差异最终在程序开发质量、项目实施效率、甚至是工程产品质量上出现数倍的差异，因此，掌握高效、先进、灵活的搜索方法和技巧，是非常非常非常（重要的事情说三遍）有用的。其中主要的方法介绍如下：</p><p>1）搜索源选择</p><p>虽然英文的编程资料更为准确高效，但中文的编程资料数量上却占优，因此遇到问题第一搜索选择还是百度<br>谷歌对于专业中文词汇的处理能力有时候甚至比百度还要强，而且谷歌能搜出大量的英文资源，因此谷歌也是首选之一，但是由于谷歌被封锁，因此需要进行VPN、SSH等FQ操作，或者在百度搜索“谷歌镜像”关键词，通过谷歌的镜像网站进行访问。<br>除了搜索引擎，专业的技术网站、论坛、社区也是非常直接有效的搜索源，比如国外的StackOverFlow网站，国内的Cnblogs博客园、OSChina开源中国等，都具备搜索功能，将问题关键词输入其中，也许也会很快的得到相关答案。<br>对于QQ群，建议不要使用，除非QQ群主或者成员是非常闲或者非常非常热心的人，否则在QQ群询问技术问题，是非常低效率的搜索方式。<br>2）关键词构造</p><p>搜索关键词的构造，直接影响搜索效率和正确结果的过滤，没有什么特别的技巧，关键在于搜索积累，但是总体遵循的原则是，准确和简洁，比如当出现一个描述，如何用C#对XML进行序列化和反序列化，非常愚蠢的关键词构造就是“如何用C#对XML进行序列化和反序列化”，而正确高效的关键词则是“C# XML 序列化 反序列化”,或者在谷歌里面搜索则是“C# XML Serialization”。在平时的编程中，一定要注意相关方法和经验的积累</p><p>3）联想搜索</p><p>联想搜索，不属于搜索引擎的范畴，却是在搜索中很有用的高级技巧，举一个通俗的例子，比如想使用C#，利用某个.NET类处理一种HTTP通讯，但是一直搜索不到完美的结果，不过换个思路，考虑到VB.NET也是.NET体系，和C#完全相通，那么也可以试着用VB.NET关键词进行搜索，搜索到完美代码后再临摹成C#代码。这样的联想搜索，不仅能够帮助搜索正确结果，也是对大脑思维的训练，值得多多尝试。</p><p>4）资源搜索</p><p>开源的框架、产品、工具、控件等开发辅助类东西越来越多，稳健性和迭代性越来越强，去寻找一款成熟的工具或者插件，也成为了大量开发者的必备方法和技能，而如何高效的搜索出想要的资源，也成为了一门学问，其核心方法就在于知晓资源网站的地址，常见的例如有开源中国、Github、CSDN下载、pudn等。资源类网站需要平时多积累，到用到的时候会非常关键。</p><h4 id="4、思维模式"><a href="#4、思维模式" class="headerlink" title="4、思维模式"></a>4、思维模式</h4><p>开发人员，一定要养成业务思维的模式，所谓的业务思维，就是在做任何一个项目的时候，写任何代码前，需要对项目本身的业务概念和业务逻辑甚至业务流程都要有一个全面的学习和理解，这虽然不是一个项目的强制要求，却是一个很好的开发习惯，无论自己的觉得是开发者还是测试员又或是技术总监，掌握了业务原理，才能够更好的设计或阅读项目的数据结构和流程结构。程序员的思维往往和用户或者客户是不一致的，摆脱技术思维模式，习惯于用业务思维解决问题的程序员，不一定最优秀，但一定是一个很容易沟通的程序员</p><h4 id="5、工作与编程习惯"><a href="#5、工作与编程习惯" class="headerlink" title="5、工作与编程习惯"></a>5、工作与编程习惯</h4><p>有的人说爱干净浪费时间，所以不修边幅，但归根结底这还是习惯问题，当养成清洁卫生的习惯并使之成为生活惯性时，往往就不会耗费更多的时间，反而显得干净干练。写程序同样如是，有一些编程习惯，看似不足为道，看似浪费时间，可是如果坚持下去，最终都能收到意想不到的奇效。下面列举一些特别重要的习惯。</p><p>1）快捷键的使用</p><p>无论是使用Windows、Linux操作系统，还是在IDE中，快捷键都是系统本身的标配，事实上，Ctrl+C、V这样的操作，大部分人都能尝到在节省时间上的甜头，把这个概念进一步扩散，如果在IDE中编写代码，除了代码本身，将其余所有的鼠标操作、键盘定位操作，都用快捷键来代替的话，在时间上将会有数量级的节省，然而看上去这么好的事情，真正坚持去执行并形成习惯的人屈指可数，因此，在初期的改变习惯，记住快捷键，会是一个长期的过程，需要不断的坚持。</p><p>2）代码注释</p><p>一个开发人员随着年龄和经验的增长，所参与的项目，再也不是靠一个人或者几个人就能完成的。系统的重构、代码的重构、工作的交接、对新进人员的培训等等类似的事情，会越来越多的遇到，这些事情无一例外都会把已经写过的代码重新或者重复阅读，如果在初始编写代码时，就做到完整、清晰明了的代码注释，对后续工作会有巨大的帮助。不仅提高工作效率，还能增强合作好感。事实上，就算只是自己看自己的代码，如果有注释，也能加深印象，缩短代码查找时间。因此，任何开发人员，都应该养成良好的代码注释习惯。</p><p>优秀的代码注释应该能做到：</p><p>每一个函数、每一个属性甚至是变量的划分，都可以找到对应的解释。多使用越来越被IDE支持的XML注释方式，不仅有注释文字，更有详细的参数描述。<br>对程序结构、模块、组成部分划分等也加以注释<br>3）命名规则</p><p>具备一定规模的软件公司，在代码编写上都有一套自己的命名规则，涵盖项目、模块、函数、变量等等，标准化命名的好处不言而喻，然而被动、被迫去遵守命名规则和主动习惯于使用命名规则是完全不一样的。一个优秀的开发人员，应当发自内心的希望各种代码命名都是有规则的，易读的，而不是纠结于命名规则会增加码字长度。</p><p>4）不将就的编程逻辑</p><p>所谓不将就的编程逻辑，其对立面就是不讲究的编程逻辑，不讲究的编程，不仅是一种很坏的编程习惯，也体现了低下的生活品质，很多开发人员，因为个人习惯、赶工期、客户要求不高等多种原因，在编程时特别随意，体现在比如为了实现某个功能，百度出一段代码，直接套用，10行的代码只理解8行，有两行看不懂也放到程序里去使用，很多这样的小细节，就好比在项目中埋下了无数的定时炸弹，不仅有很大概率形成返工，更是为项目埋下了风险。编程人员，应当有担当有态度，养成不将就的编程逻辑，不勉强自己，也不轻视程序。</p><p>5）数据备份</p><p>误删、误操作、电脑断电、文件遗失等等状况是每一个开发按人员都可能遇到的问题，如果不希望辛勤的劳作被浪费，不希望偶然的意外影响工作，那做好备份是必不可少的，在较大规模的公司，会有完整的源代码管理以及信息安全防护，而无论是在大公司工作，还是身处较小公司或者在实现个人代码价值时，都要做好代码和文档的数据备份，备份方式的选择灵活多样，有使用在线的CVS、SVN、TFS、Git源代码管理，也可以手工拷贝文件至云空间或者本地硬盘，甚至可以在个人电脑上组成RAID磁盘阵列等等，养成周期性、规律性的备份习惯。</p><p>6）邮件工作方式</p><p>沟通是进步的源泉，如果说开发小组的热烈讨论是性格和激情的体现，那邮件的工作方式也是另一种稳重和高效。无论是公司层面的工作沟通，还是开发小组的问题交流，邮件的作用包括问题正规化描述、工作留档留痕、工作流程流转、责任分工明确等等，习惯于将重大问题、重要事项通过邮件的方式与同事、主管等进行沟通，将会非常有助于团队协作。</p><p>以上这些方法，是我这么多年来的感受和体会，也给了我很大的帮助，希望也能够帮助到大家，不能说一定可以“提升修养“，但也是”提升修养”的有效方式。</p><p>最后还想再说一说坚持的力量</p><p>分享一个真实的小故事，公司有两个开发人员，1个做.NET好多年了，但是很油滑，做事能省就省，抓到可以偷懒的机会就偷懒，让他学点新知识新方法总是自以为是觉得自己都会；还有1个毫无.NET基础，一直做低级语言开发，从15年才开始学习.NET和Web前端，但是做事很积极，几乎每天都自己抽空学习，遇到不懂的都琢磨清楚，遇到不会的场景就上网或者找人寻求帮助，项目结束后还反复思考有什么地方可以改进。从15年到现在，短短1年，这两个人的发展已经是天壤之别，工资差距也越来越大，后者已经能够独自操盘中小型软件外包项目，而前者还在混着日子，以后他们各自的发展也完全可以预见。</p><p>我想说的是，本篇里面分享的一些道理和方法，都是通俗易懂的，就和常听到的例如101%和99%的365次方的故事、1万小时的道理等等一样，但真正去认真思考并实践的屈指可数，也许，坚持才是程序员最大的修养，和各位共勉</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址:&lt;a href=&quot;https://www.cnblogs.com/printhelloworld/p/5698984.html#commentform&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cnblogs.com/
      
    
    </summary>
    
      <category term="生活随笔" scheme="https://github.com/itgoyo/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活随笔" scheme="https://github.com/itgoyo/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>异步和多线程的区别</title>
    <link href="https://github.com/itgoyo/2017/12/09/%E5%BC%82%E6%AD%A5%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
    <id>https://github.com/itgoyo/2017/12/09/异步和多线程的区别.html</id>
    <published>2017-12-09T13:13:38.000Z</published>
    <updated>2017-12-09T13:15:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址:<a href="https://www.cnblogs.com/dream844/archive/2012/06/12/2546083.html" target="_blank" rel="external">https://www.cnblogs.com/dream844/archive/2012/06/12/2546083.html</a></p><h3 id="多线程和异步操作的异同"><a href="#多线程和异步操作的异同" class="headerlink" title="多线程和异步操作的异同"></a>多线程和异步操作的异同</h3><p>多线程和异步操作两者都可以达到避免调用线程阻塞的目的，从而提高软件的可响应性。甚至有些时候我们就认为多线程和异步操作是等同的概念。但是，多线程和异步操作还是有一些区别的。而这些区别造成了使用多线程和异步操作的时机的区别。</p><h3 id="异步操作的本质"><a href="#异步操作的本质" class="headerlink" title="异步操作的本质"></a>异步操作的本质</h3><p>所有的程序最终都会由计算机硬件来执行，所以为了更好的理解异步操作的本质，我们有必要了解一下它的硬件基础。 熟悉电脑硬件的朋友肯定对DMA这个词不陌生，硬盘、光驱的技术规格中都有明确DMA的模式指标，其实网卡、声卡、显卡也是有DMA功能的。DMA就是直 接内存访问的意思，也就是说，拥有DMA功能的硬件在和内存进行数据交换的时候可以不消耗CPU资源。只要CPU在发起数据传输时发送一个指令，硬件就开 始自己和内存交换数据，在传输完成之后硬件会触发一个中断来通知操作完成。这些无须消耗CPU时间的I/O操作正是异步操作的硬件基础。所以即使在DOS 这样的单进程（而且无线程概念）系统中也同样可以发起异步的DMA操作。</p><h3 id="线程的本质"><a href="#线程的本质" class="headerlink" title="线程的本质"></a>线程的本质</h3><p>线程不是一个计算机硬件的功能，而是操作系统提供的一种逻辑功能，线程本质上是进程中一段并发运行的代码，所以线程需要操作系统投入CPU资源来运行和调度。</p><h3 id="异步操作的优缺点"><a href="#异步操作的优缺点" class="headerlink" title="异步操作的优缺点"></a>异步操作的优缺点</h3><p>因为异步操作无须额外的线程负担，并且使用回调的方式进行处理，在设计良好的情况下，处理函数可以不必使用共享变量（即使无法完全不用，最起码可以减少 共享变量的数量），减少了死锁的可能。当然异步操作也并非完美无暇。编写异步操作的复杂程度较高，程序主要使用回调方式进行处理，与普通人的思维方式有些 初入，而且难以调试。</p><h3 id="多线程的优缺点"><a href="#多线程的优缺点" class="headerlink" title="多线程的优缺点"></a>多线程的优缺点</h3><p>多线程的优点很明显，线程中的处理程序依然是顺序执行，符合普通人的思维习惯，所以编程简单。但是多线程的缺点也同样明显，线程的使用（滥用）会给系统带来上下文切换的额外负担。并且线程间的共享变量可能造成死锁的出现。</p><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><p>在了解了线程与异步操作各自的优缺点之后，我们可以来探讨一下线程和异步的合理用途。我认为：当需要执行I/O操作时，使用异步操作比使用线程+同步 I/O操作更合适。I/O操作不仅包括了直接的文件、网络的读写，还包括数据库操作、Web Service、HttpRequest以及.net Remoting等跨进程的调用。</p><p>而线程的适用范围则是那种需要长时间CPU运算的场合，例如耗时较长的图形处理和算法执行。但是往 往由于使用线程编程的简单和符合习惯，所以很多朋友往往会使用线程来执行耗时较长的I/O操作。这样在只有少数几个并发操作的时候还无伤大雅，如果需要处 理大量的并发操作时就不合适了。</p><h3 id="异步调用与多线程"><a href="#异步调用与多线程" class="headerlink" title="异步调用与多线程"></a>异步调用与多线程</h3><p>异步调用并不是要减少线程的开销, 它的主要目的是让调用方法的主线程不需要同步等待在这个函数调用上, 从而可以让主线程继续执行它下面的代码.与此同时, 系统会通过从ThreadPool中取一个线程来执行,帮助我们将我们要写/读的数据发送到网卡.由于不需要我们等待, 我们等于同时做了两件事情. 这个效果跟自己另外启动一个线程来执行等待方式的写操作是一样的.但是, 异步线程可以利用操作系统/.Net的线程池, 系统可以根据吞吐量动态的管理线程池的大小.</p><blockquote><p>异步与多线程,从辩证关系上来看,异步和多线程并不时一个同等关系,异步是目的,多线程只是我们实现异步的一个手段.什么是异步:异步是当一个调用请求发送给被调用者,而调用者不用等待其结果的返回.实现异步可以采用多线程技术或则交给另外的进程来处理</p></blockquote><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址:&lt;a href=&quot;https://www.cnblogs.com/dream844/archive/2012/06/12/2546083.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cnblogs.com/dr
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>60天引爆你的学习力</title>
    <link href="https://github.com/itgoyo/2017/12/06/60%E5%A4%A9%E5%BC%95%E7%88%86%E4%BD%A0%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%8A%9B.html"/>
    <id>https://github.com/itgoyo/2017/12/06/60天引爆你的学习力.html</id>
    <published>2017-12-05T16:21:26.000Z</published>
    <updated>2017-12-07T15:28:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="60天引爆你的学习力"><a href="#60天引爆你的学习力" class="headerlink" title="60天引爆你的学习力"></a>60天引爆你的学习力</h1><p> 视频地址 链接: <a href="https://pan.baidu.com/s/1slNsZmt" target="_blank" rel="external">https://pan.baidu.com/s/1slNsZmt</a> 密码: xcwm</p><p>1.看得懂,不会做</p><p>2.总比别人学得慢</p><p>3.总比别人学得差</p><p>什么是学习力?</p><ul><li><p>学习知识的能力</p></li><li><p>管理知识的能力</p></li><li><p>长久坚持的能力</p></li></ul><p>提升学习力的重要性?</p><ul><li>重要性<ul><li>性价比高</li><li>效果出众</li></ul></li></ul><p>三种典型错误</p><ul><li><p>顺序式学习</p><ul><li>缺乏整体概念</li><li>容易中途放弃</li></ul></li><li><p>案例式学习</p><ul><li>优点<ul><li>目的性强</li><li>见效很快</li><li>成就感强</li></ul></li><li>优点<ul><li>不成体系</li><li>容易遗忘</li><li>范围狭小</li></ul></li></ul></li><li>冲刺式学习<ul><li>缺点<ul><li>容易遗忘</li><li>很难学透</li><li>效率较低</li></ul></li></ul></li></ul><h3 id="学习框架"><a href="#学习框架" class="headerlink" title="学习框架"></a>学习框架</h3><ul><li>生理<ul><li>锻炼</li><li>作息</li><li>规律</li></ul></li><li>心理<ul><li>道德许可</li><li>正向激励</li></ul></li><li>方法论<ul><li>刻意练习</li><li>三步快速学习法</li><li>知识体系的构建和管理</li><li>学习资料的搜索\判断\和筛选</li></ul></li></ul><h3 id="学习的8个步骤"><a href="#学习的8个步骤" class="headerlink" title="学习的8个步骤"></a>学习的8个步骤</h3><ul><li>方向</li><li>资料</li><li>筛选</li><li>认知</li><li>消化</li><li>固化</li><li>模式</li><li>拓展</li></ul><p>非工作记忆</p><ul><li>容易遗忘</li><li>浅层应用</li><li>效率较低</li></ul><p>工作记忆</p><ul><li>不易遗忘</li><li>灵活应用</li><li>效率很高</li></ul><h3 id="三步式快速学习法"><a href="#三步式快速学习法" class="headerlink" title="三步式快速学习法"></a>三步式快速学习法</h3><ul><li>第一步:快速建立领域整体认知</li><li>第二步:解决问题为导向,感性了解知识点,初步构建网络</li><li>第三步:刻意练习,补充隐知识<h4 id="整体的重要性"><a href="#整体的重要性" class="headerlink" title="整体的重要性"></a>整体的重要性</h4></li></ul><p>盲人摸象,告诉我们,了解整体对我们知识网络很有帮助,了解整体对我们了解细节也是很有帮助的</p><p><strong>具体要怎么做呢?</strong></p><h5 id="建立整体认知"><a href="#建立整体认知" class="headerlink" title="建立整体认知"></a>建立整体认知</h5><ul><li>找到规范的教材 ( 基础\应用类)</li><li>阅读目录,绘图 (制作思维导图)</li><li>速读</li><li>再次阅读目录及图</li><li>默认绘图  (根据回忆再画一次思维导图)</li><li>修改优化</li></ul><p>这些做法有什么作用</p><ul><li>了解全貌</li><li>了解结构</li><li>感性认识</li></ul><hr><ul><li>目录是精华</li><li>目录有结构</li><li>速读做关联</li><li>再读做对比</li><li>再画避遗忘</li></ul><hr><p><strong>还解决了</strong></p><ul><li>枯燥难懂</li><li>不解迷茫</li><li>正向激励</li></ul><h5 id="解决问题为向导"><a href="#解决问题为向导" class="headerlink" title="解决问题为向导"></a>解决问题为向导</h5><ul><li>搜集整理案例</li><li>尝试解决问题 (完全没思路,看教程的方法/自己有思路,然后找方法,知道最终解决问题,最终写下解决问题的知识点)</li><li>复习模糊知识点</li><li>最终解决问题</li><li>写下解决问题的所有知识点</li></ul><p><strong>有哪些收获</strong></p><ul><li>抽象变感性</li><li>构建小型网络</li><li>得到正向激励</li><li>掌握程度加深</li><li>帮助实际工作</li></ul><h5 id="刻意练习-补充隐知识"><a href="#刻意练习-补充隐知识" class="headerlink" title="刻意练习+补充隐知识"></a>刻意练习+补充隐知识</h5><ul><li>回归原本</li><li>刻意练习</li><li>补充学习</li></ul><hr><blockquote><p>实际案例 新手学习 PPT</p></blockquote><h4 id="刻意练习"><a href="#刻意练习" class="headerlink" title="刻意练习"></a>刻意练习</h4><ul><li><strong>是什么</strong></li></ul><p>打乒乓球\打网球\下象棋</p><p>重复的学习方式很低效</p><p>学习时间长不代表你很牛逼</p><p>&lt;刻意练习-从新手到大师&gt;</p><ul><li><strong>原理</strong></li></ul><p>稳态原理:人类超强的适应能力</p><ul><li>手上的茧子</li><li>壮大的肱二头肌</li><li>变瘦的长跑运动员</li></ul><p>人体总倾向于待在稳态外部变化,自己跟着变</p><h5 id="大脑的适应能力"><a href="#大脑的适应能力" class="headerlink" title="大脑的适应能力"></a>大脑的适应能力</h5><ul><li>伦敦的出租车司机</li><li>厉害的音乐大师</li></ul><p>心理表征</p><p>心理表征的质量和数量是牛人和普通人的最大区别</p><p>外行看热闹,内行看门道</p><ul><li><strong>怎么做</strong></li></ul><h5 id="刻意练习的两大要求"><a href="#刻意练习的两大要求" class="headerlink" title="刻意练习的两大要求"></a>刻意练习的两大要求</h5><ul><li>不断打破稳态</li><li>构建和改进心理表征</li></ul><h5 id="刻意练习六步法"><a href="#刻意练习六步法" class="headerlink" title="刻意练习六步法"></a>刻意练习六步法</h5><ul><li>找套科学有效的训练方法</li><li>突破舒适区,不断适度挑战自己</li><li>不断拆分任务,化难为易</li><li>良好的目标感</li><li>包括反馈</li><li>产生和改进心理表征(大量练习)</li></ul><hr><p>如何设计自己的刻意训练体系</p><p>以写作为例</p><ul><li>拆分大任务<ul><li>词汇</li><li>句子</li><li>逻辑</li><li>技巧整合</li><li>类型文写作</li></ul></li><li>设计训练方法<ul><li>背诵词典法</li><li>高频词总结法</li><li>词语造句</li></ul></li><li>句子写作<ul><li>扩写训练法</li><li>长句拆解法</li><li>画面塑造法</li></ul></li><li>逻辑训练<ul><li>文章结构分析</li><li>思维导图训练</li></ul></li><li>突破舒适区,循序渐进</li><li>大量的重复性基础训练</li><li>包含反馈<ul><li>自我评价</li><li>网友评价</li><li>作业点评</li></ul></li><li>创建和改进心理表征</li></ul><h5 id="实施要点"><a href="#实施要点" class="headerlink" title="实施要点"></a>实施要点</h5><ul><li>客服错误的认识<ul><li>基因决定论</li><li>时间积累论</li><li>努力至上论</li></ul></li><li>务必走出舒适区<ul><li>适当超出能力</li><li>步子不要迈太大</li></ul></li><li>尽量找到好的导师<ul><li>好的指导老师</li><li>好的指导教材</li><li>好的指导课程</li></ul></li><li>次数和质量并重<ul><li>时间短</li><li>次数多</li><li>有质量</li><li>能改进</li></ul></li><li>一定要有反馈机制<ul><li>找不足</li><li>查原因</li><li>想办法</li><li>必改正</li></ul></li></ul><h3 id="学习资料的搜索-筛选-管理"><a href="#学习资料的搜索-筛选-管理" class="headerlink" title="学习资料的搜索,筛选,管理"></a>学习资料的搜索,筛选,管理</h3><ul><li>物理载体<ul><li>音频</li><li>视频</li><li>图文</li><li>书籍</li></ul></li><li>获取方式<ul><li>搜索</li><li>推介</li><li>广告</li></ul></li><li>形式分类<ul><li>基础类教材</li><li>应用类教材</li><li>查阅类教材</li></ul></li><li>普通人的需求<ul><li>大量文章书籍音视频</li><li>如何判断教材质量</li><li>如何管理好大量的学习资料</li></ul></li><li>必要的搜索技巧<ul><li>搜索指令<ul><li>按网站搜索<ul><li>悬疑电影推荐 site:douban.com</li></ul></li><li>按格式搜索<ul><li>征服 filetype:PDF</li></ul></li><li>排除式搜索<ul><li>国产悬疑电影推荐 -国产</li></ul></li><li>精准式搜索<ul><li>“悬疑电影推荐”</li><li>intitle: “悬疑电影推荐”</li></ul></li></ul></li><li>关键词提炼<ul><li>自己想要的资料</li><li>资料可能有的关键词</li></ul></li><li>资源点到资源的搜索思维<ul><li>先找 PPT 模板网站</li><li>再在里面找 PPT 模板</li></ul></li></ul></li></ul><h4 id="我们需要什么"><a href="#我们需要什么" class="headerlink" title="我们需要什么"></a>我们需要什么</h4><ul><li>基础类教材 1.2本</li><li>应用类覆盖面越全面越好</li><li>百科全书类 1本就差不多了<h5 id="如何找到好的资料"><a href="#如何找到好的资料" class="headerlink" title="如何找到好的资料"></a>如何找到好的资料</h5></li><li>老鸟推荐</li><li>KOL 推荐</li><li>高质量书单</li><li>问答网站 (知乎)</li><li>定向搜索<h5 id="如何判断教材质量"><a href="#如何判断教材质量" class="headerlink" title="如何判断教材质量"></a>如何判断教材质量</h5></li><li>公开评价</li><li>看出版社</li><li>看作者口碑</li><li>看是编还是著</li><li>看再版次数和印刷数量</li><li>问老鸟大咖<h5 id="阅读的两种形式"><a href="#阅读的两种形式" class="headerlink" title="阅读的两种形式"></a>阅读的两种形式</h5></li><li>随机性阅读</li><li>目的性阅读</li><li>(为知笔记,有道云,印象)<h5 id="学习资料管理三件事"><a href="#学习资料管理三件事" class="headerlink" title="学习资料管理三件事"></a>学习资料管理三件事</h5></li><li>实体资料电子化</li><li>电子资料分类标签化</li><li>打造自己的知识管理体系<h5 id="电子化的好处"><a href="#电子化的好处" class="headerlink" title="电子化的好处"></a>电子化的好处</h5></li><li>方便携带</li><li>方便搜索<h3 id="知识的领域和结构"><a href="#知识的领域和结构" class="headerlink" title="知识的领域和结构"></a>知识的领域和结构</h3><h4 id="三个案例"><a href="#三个案例" class="headerlink" title="三个案例"></a>三个案例</h4><h5 id="幼儿的语言学习"><a href="#幼儿的语言学习" class="headerlink" title="幼儿的语言学习"></a>幼儿的语言学习</h5></li><li>听音学语言</li><li>听看学语言(学习的很好)<h5 id="PPT-训练营"><a href="#PPT-训练营" class="headerlink" title="PPT 训练营"></a>PPT 训练营</h5></li><li>操作技巧很熟练</li><li>整体水平很差劲<h5 id="记忆数字"><a href="#记忆数字" class="headerlink" title="记忆数字"></a>记忆数字</h5></li></ul><p>20177639387</p><p>24936527309</p><p><strong>学习的关联过程</strong></p><ul><li>概念和物体,行为的关联</li><li>概念和概念之间的关联</li></ul><p><strong>可以理解的输入才是有效的输入</strong></p><h4 id="领域和结构"><a href="#领域和结构" class="headerlink" title="领域和结构"></a>领域和结构</h4><h5 id="做好-PPT-的三个领域知识"><a href="#做好-PPT-的三个领域知识" class="headerlink" title="做好 PPT 的三个领域知识"></a>做好 PPT 的三个领域知识</h5><ul><li>PPT 操作技巧<ul><li>插入元素</li><li>模板</li><li>快捷键</li><li>动画</li></ul></li><li>足够的审美知识<ul><li>空间结构</li><li>颜色搭配</li><li>元素设计</li></ul></li><li>足够的逻辑能力<ul><li>结构大纲</li><li>先后顺序</li><li>语言提炼</li></ul></li></ul><h5 id="知识的领域"><a href="#知识的领域" class="headerlink" title="知识的领域"></a>知识的领域</h5><ul><li>领域内部知识强链接</li><li>领域之间知识弱链接</li></ul><h5 id="领域-结构和心理表征"><a href="#领域-结构和心理表征" class="headerlink" title="领域,结构和心理表征"></a>领域,结构和心理表征</h5><ul><li>领域的数量</li><li>知识点的数量</li><li>网络密集程度</li><li>掌握质量</li></ul><h4 id="四个方法"><a href="#四个方法" class="headerlink" title="四个方法"></a>四个方法</h4><h5 id="主题学习"><a href="#主题学习" class="headerlink" title="主题学习"></a>主题学习</h5><p>强领域的集中学习+刻意学习</p><h5 id="扩展学习"><a href="#扩展学习" class="headerlink" title="扩展学习"></a>扩展学习</h5><p>弱领域的关联阅读学习</p><h5 id="最大的误区"><a href="#最大的误区" class="headerlink" title="最大的误区"></a>最大的误区</h5><p>认为要学习的知识是单一领域的</p><h5 id="解决的办法"><a href="#解决的办法" class="headerlink" title="解决的办法"></a>解决的办法</h5><ul><li>结构知识领域,逐个击破</li><li>进行足够的扩展式学习</li></ul><hr><blockquote><p>PPT 学习</p></blockquote><ul><li>内容结构<ul><li>掌握软件操作技巧</li><li>排版布局和颜色搭配训练</li></ul></li><li>扩展性学习<ul><li>摄影作品</li><li>平面设计作品</li><li>相关书籍</li></ul></li></ul><h5 id="i-1学习方法"><a href="#i-1学习方法" class="headerlink" title="i+1学习方法"></a>i+1学习方法</h5><h6 id="错误的学习方法"><a href="#错误的学习方法" class="headerlink" title="错误的学习方法"></a>错误的学习方法</h6><p>硬着头皮往下看(以为现在看不懂,看着看着后面一定会懂,其实最后也啥都不懂)</p><h6 id="正确的学习方法"><a href="#正确的学习方法" class="headerlink" title="正确的学习方法"></a>正确的学习方法</h6><p>一切都是恰到好处</p><blockquote><p>案例:通过阅读学英语<br>上来就读英文著作</p></blockquote><h6 id="英语-i-1学习"><a href="#英语-i-1学习" class="headerlink" title="英语 i+1学习"></a>英语 i+1学习</h6><ul><li>测试词汇和阅读能力</li><li>寻找分级阅读材料</li><li>逐级网上阅读</li></ul><h5 id="费曼学习法"><a href="#费曼学习法" class="headerlink" title="费曼学习法"></a>费曼学习法</h5><ol><li><p>选择一个概念</p></li><li><p>把它教给完全不懂的另外一个人</p></li><li><p>如果卡壳，回到原始材料</p></li><li><p>回顾后简化语言表达（可选择）</p></li></ol><p><strong>阿何补充环节</strong></p><ul><li>讲解-理解测试环节</li><li>讲解-提问测试环节</li><li>理解-做题测试环节</li></ul><h5 id="一题多解学习法"><a href="#一题多解学习法" class="headerlink" title="一题多解学习法"></a>一题多解学习法</h5><blockquote><p>案例:算24点</p></blockquote><p>4,5,4,5</p><blockquote><p>案例:插入形状+插入文本框</p></blockquote><h5 id="学习的矛盾之处"><a href="#学习的矛盾之处" class="headerlink" title="学习的矛盾之处"></a>学习的矛盾之处</h5><ul><li>精力有限</li><li>脑容量有限</li><li>知识无限</li></ul><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;60天引爆你的学习力&quot;&gt;&lt;a href=&quot;#60天引爆你的学习力&quot; class=&quot;headerlink&quot; title=&quot;60天引爆你的学习力&quot;&gt;&lt;/a&gt;60天引爆你的学习力&lt;/h1&gt;&lt;p&gt; 视频地址 链接: &lt;a href=&quot;https://pan.baidu.c
      
    
    </summary>
    
      <category term="学习资料" scheme="https://github.com/itgoyo/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
  </entry>
  
  <entry>
    <title>离职计划</title>
    <link href="https://github.com/itgoyo/2017/11/27/%E7%A6%BB%E8%81%8C%E8%AE%A1%E5%88%92.html"/>
    <id>https://github.com/itgoyo/2017/11/27/离职计划.html</id>
    <published>2017-11-27T15:31:05.000Z</published>
    <updated>2017-11-28T12:43:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="离职计划"><a href="#离职计划" class="headerlink" title="离职计划"></a>离职计划</h3><ul><li>公司原因: 公司14薪变12薪</li><li>自己原因: 在这里技术没什么提高,一直在迭代新功能,公司也不注重技术这一块.</li><li><p>环境原因: 和直播组的小伙伴分开了,上班的时候一个交流的都没有他们都给承包到别的挂名公司上面去了,和网站这边的人也没什么交流,自己中间转过去也不是他们网站的,所以自己一个人也挺尴尬的.</p><p>今天被公司里年纪比较大的程序员拉去谈话, 见面的时候他就说关于项目开发你有什么计划,最近App 这边问题比较多,我就说没什么计划,就准备搞新版本的东西.然后解释到 bug 多,这个我和测试人员是不可能把所有的 bug 都捕捉到的,要通过用户不断的反馈搜集更多的 bug,因为引起 bug 的步骤或者原因都不尽相同.然后就说我技术不行,还有态度不行.</p><p>首先经我接手项目之后,我就负责一块我的荣誉模块的开发,上线之后这部分所出现的唯一 bug 就是文案写错了,然后 svn 上我所有的提交记录是除了新版本功能的代码之后就是提交 fixed bug 的记录,很多都是修改前任留下来的坑,让我一步步去测发现所有的 bug 是不可能的,而且我也不可能把整个项目的代码再审查一遍, 且不说 这样子要花大量没有意义的时间在上面, 关键是得到的成效也是甚微的.</p><p>关于态度这一点上我没否认,因为由于公司离职2/3的员工的原因,我自己也在准备了自己的计划,公司造成这样大流量的员工流失,肯定公司有很大的责任,我自己也肯定会为自己的职业规划做出不同的调整.因为平时没有时间的时候我很多都是花时间在写 Blog 或者是在学习新框架或者总结一些资料的事情上.因为我觉得这样子对我来说才是最有用的.当初第二版本的时候要求3个半月完成大改版,所以当初三个人讨论了一下项目的进度有可能不够,所以就没有从心搭建框架而是在原来的基础上改,还有不停的迭代新功能.现在新版本要是再重新开始搭建框架的话,有点不现实,因为项目太庞大了,集成的东西也很多,比如说支付,推送,分享之类的功能.</p><p>我其实主要不积极的原因是因为这个 app 才完成大改版没多久,也可以说不到一个月,原因是上一个产品经理离职了然后新来的产品把之前的东西又重新搞了一个遍,很多东西就是页面上的些许改变,也可能是为了体现他自己的工作量,猛的修改东西,把整个 app 都基本翻新了一个遍,这一点是我很不开心的地方,而且开会的时候他说他这样子觉得好,然后反驳他也坚持,公司领导一直觉得他这种又是对的,一直不发边自己特别的见解,很多地方都是他想怎么来就怎么搞,UI 和我们开发这边提了一些建议,他也不听,一直都在说他怎么怎么好,这样子比较好看什么的,我都无语了,如果是这样子的会,开来还有什么意义,你们产品还有领导直接自己开就好了呀,还让我们进去听做什么,我们说的观点也没人听,反倒是浪费了很多时间在开会上面.</p><p>在公司里我只认同能力强的,其他的官职领导什么的我是不怎么感冒,我也不和别人抢些什么东西,我就只想在自己职位上完成自己应该完成的事,其他的活动什么积极参与就好了,也不会给谁背后捅刀子,也不会去黑谁.反倒是某些所谓的领导由于顶撞几句,一直怀恨在心,各种让你穿小鞋.</p><p>之前我负责直播平台的开发,一直都很积极,因为项目是我一个人从无到有做出来的,像我自己的孩子一样,所以之前比较花时间在上面,还有为了跟进时代的变化换了网络框架,还有把 listview 换成 recyleview,还有集成 bugly 还有其他七七八八能增强app 性能的东西.到是到网站这边开发之后,这边接口文档还有写的接口各种不规范,然后丢一份阿里巴巴的 java 开发规范文档过来,我觉得真是好笑,一开始就没给代码规范,后面看见别人的文档好就直接丢过来了,而且他们网站那边的接口也不规范,参数什么的经常时不时少东西,还有经常请求不到正确的数据,然后两个人一起対调的时候发现那边的代码有错,还有就是请求返回的 json 内容,正确的,失败的返回也不给,每次都要自己去抓.网站那边共有3个人写接口,三个人写出来的东西有时候都不一样,一点都不规范,浪费我们这边很多时间,本来接口文档就是根据 app 客户端的需要做的,现在变成,他那边怎么写接口让我们这边去适应它或者说是完善它,比如很多时候什么都不返回,把那个字段都不返回了,有时候又莫名其妙的多几个字段,害得我们开发时候经常空指针,后面找原因都是返回的数据经常不一致造成的,最可怕的就是需要某个字段的时候,本该是在第三层的东西,他直接新增到你的最外层去了,有时候相同字段的东西,最外层的也有,第二,第三层的也有,说真的这种接口是我见过最烂的.</p><p>今天晚上开始计划这离职的事情,实现的话有可能要到年后才能实现,因为感觉自己没有准备好,现在也快12月份了,因为公司要扣你一个月,所以那会也快过年了,那会估计招人的公司会很少,因为很多公司的计划或者指标那会也基本完成了.所以趁这几个月的时间好好规划一下自己的离职计划,还有强化自己的编码能力,完善自己的知识面还有巩固一下自己的基础知识.</p><p>和老程序员对话的时候,他很多话,让我很受启发,他说他之前在中兴研发部的时候自己一个新人就拿了优秀员工奖,其他老员工都没有拿奖,因为他那会敢做别人不敢做的事,敢承担自己的责任.其他人没有要改项目的意愿,他自己就自己改了,说出了什么问题自己来承担,他说他之前还是一个研究生,比较喜欢研究新技术什么什么的.交谈一番下来我其实挺佩服他的,因为他很多时候都不是为了自己,而是为了公司,这一点让我深受启发,想想自己,确实自私了一点,都是为自己着想,其实项目即便不是你搭建的,你也有责任和义务去完善它,虽然出现问题的代码不是你写的,但是你也有责任让它完美不出现一些不该出现的 bug.</p><p>永远不要为了自己的错误去找任何理由,如果做不出来就想办法去沟通而不是说做不出来就不做了,因为做不出来是你自己的问题而不是产品提出来的东西不能做,为什么别人可以做你不可以做,这难道不是你的原因吗?</p><p>由于公司不注重开发的原因,还有缺少人文关怀,感觉在这里也没有大的增长空间,对于自己技能的提高也没什么帮助,差不多两年了,都是独立开发,遇到一些不懂的东西都是 google,stackoverflow,能交流的东西基本没有,公司能教会我的技术层面上的东西也没有.我要寻找一个更适合我的,或者是我想要的环境去实现自己的人生小目标.</p><p>后面会整理出一份关于自己在离职计划实践过程中看了什么书还有什么好的文章,源码之类的都会整理出来,关于面试相关的试题也会整理出来,不说了.准备先撸一遍&lt;第一行代码 第二版本&gt;的代码先.</p></li></ul><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;离职计划&quot;&gt;&lt;a href=&quot;#离职计划&quot; class=&quot;headerlink&quot; title=&quot;离职计划&quot;&gt;&lt;/a&gt;离职计划&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;公司原因: 公司14薪变12薪&lt;/li&gt;
&lt;li&gt;自己原因: 在这里技术没什么提高,一直在迭代新功能,公司也不注
      
    
    </summary>
    
      <category term="生活随笔" scheme="https://github.com/itgoyo/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活随笔" scheme="https://github.com/itgoyo/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>给初学者的RxJava2教程</title>
    <link href="https://github.com/itgoyo/2017/11/24/%E7%BB%99%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84RxJava2%E6%95%99%E7%A8%8B.html"/>
    <id>https://github.com/itgoyo/2017/11/24/给初学者的RxJava2教程.html</id>
    <published>2017-11-24T13:50:31.000Z</published>
    <updated>2017-11-24T16:19:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接:<a href="http://www.jianshu.com/u/c50b715ccaeb" target="_blank" rel="external">http://www.jianshu.com/u/c50b715ccaeb</a></p><h1 id="Rxjava2-一"><a href="#Rxjava2-一" class="headerlink" title="Rxjava2(一)"></a>Rxjava2(一)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上个月RxJava2正式版发布了，但目前国内的资料还比较少，以前使用过RxJava1只需要看看更新文档就知道怎么使用了，但还有一些以前没用过RxJava的朋友可能就不知道怎么办了，不知道该看RxJava1还是直接跳到RxJava2。所以写下这个教程， 帮助那些没有用过RxJava的朋友入门。</p><blockquote><p>注：如果你觉得写得不好，请直接批评指出。</p></blockquote><p>我先回答这个问题：学习RxJava2需要先学习RxJava1吗？</p><p>这个问题就像论坛经常问学Java前需要先学习C语言吗，这里就不引战了！（PHP是世界上最好的语言！！）</p><p>答案明显不是，如果你以前学过RxJava1，那么对于RxJava2只需要看看更新了哪些东西就行了，其最核心的思想并没有变化，如果你没学过RxJava1，没有关系，直接学习RxJava2。所以作为一个RxJava2的教程，本文中所有的名词都属于RxJava2中，并不涉及RxJava1。</p><p>要在Android中使用RxJava2, 先添加Gradle配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile &apos;io.reactivex.rxjava2:rxjava:2.0.1&apos;</div><div class="line">compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</div></pre></td></tr></table></figure><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>在开始学习之前，先来介绍点原理性的东西。</p><p>网上也有很多介绍RxJava原理的文章，通常这些文章都从观察者模式开始，先讲观察者，被观察者，订阅关系巴拉巴拉一大堆，说实话，当我第一次看到这些文章的时候已经被这些名词给绕晕了，用了很长的时间才理清楚它们之间的关系。可能是我太蠢了，境界不够，领会不到那么多高大上的名词.</p><p>今天我用两根水管代替观察者和被观察者, 试图用通俗易懂的话把它们的关系解释清楚, 在这里我将从事件流这个角度来说明RxJava的基本工作原理。</p><p>先假设有两根水管：</p><p><img src="http://omvbl46i3.bkt.clouddn.com/3f43378ea9f38feb6e2e2e70ef709230.png" alt=""></p><p>上面一根水管为事件产生的水管，叫它<strong>上游</strong>吧，下面一根水管为事件接收的水管叫它<strong>下游</strong>吧。</p><p>两根水管通过一定的方式连接起来，使得上游每产生一个事件，下游就能收到该事件。注意这里和官网的事件图是反过来的, 这里的事件发送的顺序是先1,后2,后3这样的顺序, 事件接收的顺序也是先1,后2,后3的顺序, 我觉得这样更符合我们普通人的思维, 简单明了.</p><p>这里的上游和下游就分别对应着RxJava中的Observable和Observer，它们之间的连接就对应着subscribe()，因此这个关系用RxJava来表示就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">//创建一个上游 Observable：</div><div class="line">       Observable&lt;Integer&gt; observable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">               emitter.onNext(1);</div><div class="line">               emitter.onNext(2);</div><div class="line">               emitter.onNext(3);</div><div class="line">               emitter.onComplete();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       //创建一个下游 Observer</div><div class="line">       Observer&lt;Integer&gt; observer = new Observer&lt;Integer&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public void onSubscribe(Disposable d) &#123;</div><div class="line">               Log.d(TAG, &quot;subscribe&quot;);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onNext(Integer value) &#123;</div><div class="line">               Log.d(TAG, &quot;&quot; + value);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onError(Throwable e) &#123;</div><div class="line">               Log.d(TAG, &quot;error&quot;);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onComplete() &#123;</div><div class="line">               Log.d(TAG, &quot;complete&quot;);</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">       //建立连接</div><div class="line">       observable.subscribe(observer);</div></pre></td></tr></table></figure><p>这个运行的结果就是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">12-02 03:37:17.818 4166-4166/zlc.season.rxjava2demo D/TAG: subscribe</div><div class="line">12-02 03:37:17.819 4166-4166/zlc.season.rxjava2demo D/TAG: 1</div><div class="line">12-02 03:37:17.819 4166-4166/zlc.season.rxjava2demo D/TAG: 2</div><div class="line">12-02 03:37:17.819 4166-4166/zlc.season.rxjava2demo D/TAG: 3</div><div class="line">12-02 03:37:17.819 4166-4166/zlc.season.rxjava2demo D/TAG: complete</div></pre></td></tr></table></figure><blockquote><p>注意: 只有当上游和下游建立连接之后, 上游才会开始发送事件. 也就是调用了subscribe() 方法之后才开始发送事件.</p></blockquote><p>把这段代码连起来写就成了RxJava引以为傲的链式操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">               emitter.onNext(1);</div><div class="line">               emitter.onNext(2);</div><div class="line">               emitter.onNext(3);</div><div class="line">               emitter.onComplete();</div><div class="line">           &#125;</div><div class="line">       &#125;).subscribe(new Observer&lt;Integer&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public void onSubscribe(Disposable d) &#123;</div><div class="line">               Log.d(TAG, &quot;subscribe&quot;);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onNext(Integer value) &#123;</div><div class="line">               Log.d(TAG, &quot;&quot; + value);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onError(Throwable e) &#123;</div><div class="line">               Log.d(TAG, &quot;error&quot;);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onComplete() &#123;</div><div class="line">               Log.d(TAG, &quot;complete&quot;);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure><p>接下来解释一下其中两个陌生的玩意：ObservableEmitter和Disposable.</p><p>ObservableEmitter： Emitter是发射器的意思，那就很好猜了，这个就是用来发出事件的，它可以发出三种类型的事件，通过调用emitter的onNext(T value)、onComplete()和onError(Throwable error)就可以分别发出next事件、complete事件和error事件。</p><p>但是，请注意，并不意味着你可以随意乱七八糟发射事件，需要满足一定的规则：</p><p>上游可以发送无限个onNext, 下游也可以接收无限个onNext.</p><p>当上游发送了一个onComplete后, 上游onComplete之后的事件将会继续发送, 而下游收到onComplete事件之后将不再继续接收事件.</p><p>当上游发送了一个onError后, 上游onError之后的事件将继续发送, 而下游收到onError事件之后将不再继续接收事件.</p><p>上游可以不发送onComplete或onError.</p><p>最为关键的是onComplete和onError必须唯一并且互斥, 即不能发多个onComplete, 也不能发多个onError, 也不能先发一个onComplete, 然后再发一个onError, 反之亦然</p><blockquote><p>注: 关于onComplete和onError唯一并且互斥这一点, 是需要自行在代码中进行控制, 如果你的代码逻辑中违背了这个规则, 并不一定会导致程序崩溃. 比如发送多个onComplete是可以正常运行的, 依然是收到第一个onComplete就不再接收了, 但若是发送多个onError, 则收到第二个onError事件会导致程序会崩溃.</p></blockquote><p>以上几个规则用示意图表示如下:</p><table><thead><tr><th style="text-align:center">事件</th><th>示意图</th></tr></thead><tbody><tr><td style="text-align:center"> 只发送onNext事件</td><td><img src="http://omvbl46i3.bkt.clouddn.com/f4d1ec5519b3d5d4e48fcac83ec78841.png" alt=""></td></tr><tr><td style="text-align:center">发送onComplete事件</td><td><img src="http://omvbl46i3.bkt.clouddn.com/d6cbd74dc4e4d4f82efc28382a4dfb57.png" alt=""></td></tr><tr><td style="text-align:center"> 发送onError事件</td><td><img src="http://omvbl46i3.bkt.clouddn.com/48bb5501aa9ad00a5bde8ba14b94c150.png" alt=""></td></tr></tbody></table><p>介绍了ObservableEmitter, 接下来介绍Disposable, 这个单词的字面意思是一次性用品,用完即可丢弃的. 那么在RxJava中怎么去理解它呢, 对应于上面的水管的例子, 我们可以把它理解成两根管道之间的一个机关, 当调用它的dispose()方法时, 它就会将两根管道切断, 从而导致下游收不到事件.</p><blockquote><p>注意: 调用dispose()并不会导致上游不再继续发送事件, 上游会继续发送剩余的事件.</p></blockquote><p>来看个例子, 我们让上游依次发送1,2,3,complete,4,在下游收到第二个事件之后, 切断水管, 看看运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">                Log.d(TAG, &quot;emit 1&quot;);</div><div class="line">                emitter.onNext(1);</div><div class="line">                Log.d(TAG, &quot;emit 2&quot;);</div><div class="line">                emitter.onNext(2);</div><div class="line">                Log.d(TAG, &quot;emit 3&quot;);</div><div class="line">                emitter.onNext(3);</div><div class="line">                Log.d(TAG, &quot;emit complete&quot;);</div><div class="line">                emitter.onComplete();</div><div class="line">                Log.d(TAG, &quot;emit 4&quot;);</div><div class="line">                emitter.onNext(4);</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(new Observer&lt;Integer&gt;() &#123;</div><div class="line">            private Disposable mDisposable;</div><div class="line">            private int i;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onSubscribe(Disposable d) &#123;</div><div class="line">                Log.d(TAG, &quot;subscribe&quot;);</div><div class="line">                mDisposable = d;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onNext(Integer value) &#123;</div><div class="line">                Log.d(TAG, &quot;onNext: &quot; + value);</div><div class="line">                i++;</div><div class="line">                if (i == 2) &#123;</div><div class="line">                    Log.d(TAG, &quot;dispose&quot;);</div><div class="line">                    mDisposable.dispose();</div><div class="line">                    Log.d(TAG, &quot;isDisposed : &quot; + mDisposable.isDisposed());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onError(Throwable e) &#123;</div><div class="line">                Log.d(TAG, &quot;error&quot;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onComplete() &#123;</div><div class="line">                Log.d(TAG, &quot;complete&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>运行结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">12-02 06:54:07.728 7404-7404/zlc.season.rxjava2demo D/TAG: subscribe</div><div class="line">12-02 06:54:07.728 7404-7404/zlc.season.rxjava2demo D/TAG: emit 1</div><div class="line">12-02 06:54:07.728 7404-7404/zlc.season.rxjava2demo D/TAG: onNext: 1</div><div class="line">12-02 06:54:07.728 7404-7404/zlc.season.rxjava2demo D/TAG: emit 2</div><div class="line">12-02 06:54:07.728 7404-7404/zlc.season.rxjava2demo D/TAG: onNext: 2</div><div class="line">12-02 06:54:07.728 7404-7404/zlc.season.rxjava2demo D/TAG: dispose</div><div class="line">12-02 06:54:07.728 7404-7404/zlc.season.rxjava2demo D/TAG: isDisposed : true</div><div class="line">12-02 06:54:07.728 7404-7404/zlc.season.rxjava2demo D/TAG: emit 3</div><div class="line">12-02 06:54:07.728 7404-7404/zlc.season.rxjava2demo D/TAG: emit complete</div><div class="line">12-02 06:54:07.728 7404-7404/zlc.season.rxjava2demo D/TAG: emit 4</div></pre></td></tr></table></figure><p>从运行结果我们看到, 在收到onNext 2这个事件后, 切断了水管, 但是上游仍然发送了3, complete, 4这几个事件, 而且上游并没有因为发送了onComplete而停止. 同时可以看到下游的onSubscribe()方法是最先调用的.</p><p>Disposable的用处不止这些, 后面讲解到了线程的调度之后, 我们会发现它的重要性. 随着后续深入的讲解, 我们会在更多的地方发现它的身影.</p><p>另外, subscribe()有多个重载的方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public final Disposable subscribe() &#123;&#125;</div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext) &#123;&#125;</div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError) &#123;&#125;</div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete) &#123;&#125;</div><div class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete, Consumer&lt;? super Disposable&gt; onSubscribe) &#123;&#125;</div><div class="line">public final void subscribe(Observer&lt;? super T&gt; observer) &#123;&#125;</div></pre></td></tr></table></figure><p>最后一个带有Observer参数的我们已经使用过了,这里对其他几个方法进行说明.</p><p>不带任何参数的subscribe() 表示下游不关心任何事件,你上游尽管发你的数据去吧, 老子可不管你发什么. 带有一个Consumer参数的方法表示下游只关心onNext事件, 其他的事件我假装没看见, 因此我们如果只需要onNext事件可以这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</div><div class="line">        Log.d(TAG, &quot;emit 1&quot;);</div><div class="line">        emitter.onNext(1);</div><div class="line">        Log.d(TAG, &quot;emit 2&quot;);</div><div class="line">        emitter.onNext(2);</div><div class="line">        Log.d(TAG, &quot;emit 3&quot;);</div><div class="line">        emitter.onNext(3);</div><div class="line">        Log.d(TAG, &quot;emit complete&quot;);</div><div class="line">        emitter.onComplete();</div><div class="line">        Log.d(TAG, &quot;emit 4&quot;);</div><div class="line">        emitter.onNext(4);</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(new Consumer&lt;Integer&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void accept(Integer integer) throws Exception &#123;</div><div class="line">        Log.d(TAG, &quot;onNext: &quot; + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>其他几个方法同理, 这里就不一一解释了.</p><h1 id="Rxjava2-二"><a href="#Rxjava2-二" class="headerlink" title="Rxjava2(二)"></a>Rxjava2(二)</h1><h2 id="正题-1"><a href="#正题-1" class="headerlink" title="正题"></a>正题</h2><p>还是以之前的例子, 两根水管:</p><p><img src="http://omvbl46i3.bkt.clouddn.com/3f43378ea9f38feb6e2e2e70ef709230.png" alt=""></p><p>正常情况下, 上游和下游是工作在同一个线程中的, 也就是说上游在哪个线程发事件, 下游就在哪个线程接收事件.</p><p>怎么去理解呢, 以Android为例, 一个Activity的所有动作默认都是在主线程中运行的, 比如我们在onCreate中打出当前线程的名字:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    Log.d(TAG, Thread.currentThread().getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结果便是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D/TAG: main</div></pre></td></tr></table></figure></p><p>回到RxJava中, 当我们在主线程中去创建一个上游Observable来发送事件, 则这个上游默认就在主线程发送事件.</p><p>当我们在主线程去创建一个下游Observer来接收事件, 则这个下游默认就在主线程中接收事件, 来看段代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@Override                                                                                       </div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;                                            </div><div class="line">    super.onCreate(savedInstanceState);                                                         </div><div class="line">    setContentView(R.layout.activity_main);                                                     </div><div class="line"></div><div class="line">    Observable&lt;Integer&gt; observable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;   </div><div class="line">        @Override                                                                               </div><div class="line">        public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;            </div><div class="line">            Log.d(TAG, &quot;Observable thread is : &quot; + Thread.currentThread().getName());           </div><div class="line">            Log.d(TAG, &quot;emit 1&quot;);                                                               </div><div class="line">            emitter.onNext(1);                                                                  </div><div class="line">        &#125;                                                                                       </div><div class="line">    &#125;);                                                                                         </div><div class="line"></div><div class="line">    Consumer&lt;Integer&gt; consumer = new Consumer&lt;Integer&gt;() &#123;                                      </div><div class="line">        @Override                                                                               </div><div class="line">        public void accept(Integer integer) throws Exception &#123;                                  </div><div class="line">            Log.d(TAG, &quot;Observer thread is :&quot; + Thread.currentThread().getName());              </div><div class="line">            Log.d(TAG, &quot;onNext: &quot; + integer);                                                   </div><div class="line">        &#125;                                                                                       </div><div class="line">    &#125;;                                                                                          </div><div class="line"></div><div class="line">    observable.subscribe(consumer);                                                             </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在主线程中分别创建上游和下游, 然后将他们连接在一起, 同时分别打印出它们所在的线程, 运行结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">D/TAG: Observable thread is : main</div><div class="line">D/TAG: emit 1                     </div><div class="line">D/TAG: Observer thread is :main   </div><div class="line">D/TAG: onNext: 1</div></pre></td></tr></table></figure></p><p>这就验证了刚才所说, 上下游默认是在同一个线程工作.</p><p>这样肯定是满足不了我们的需求的, 我们更多想要的是这么一种情况, 在子线程中做耗时的操作, 然后回到主线程中来操作UI, 用图片来描述就是下面这个图片:</p><p><img src="http://omvbl46i3.bkt.clouddn.com/b7f79cd696dc5f2404cbe14b98e9dfdc.png" alt=""></p><p>在这个图中, 我们用黄色水管表示子线程, 深蓝色水管表示主线程.</p><p>要达到这个目的, 我们需要先改变上游发送事件的线程, 让它去子线程中发送事件, 然后再改变下游的线程, 让它去主线程接收事件. 通过RxJava内置的线程调度器可以很轻松的做到这一点. 接下来看一段代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@Override                                                                                       </div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;                                            </div><div class="line">    super.onCreate(savedInstanceState);                                                         </div><div class="line">    setContentView(R.layout.activity_main);                                                     </div><div class="line"></div><div class="line">    Observable&lt;Integer&gt; observable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;   </div><div class="line">        @Override                                                                               </div><div class="line">        public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;            </div><div class="line">            Log.d(TAG, &quot;Observable thread is : &quot; + Thread.currentThread().getName());           </div><div class="line">            Log.d(TAG, &quot;emit 1&quot;);                                                               </div><div class="line">            emitter.onNext(1);                                                                  </div><div class="line">        &#125;                                                                                       </div><div class="line">    &#125;);                                                                                         </div><div class="line"></div><div class="line">    Consumer&lt;Integer&gt; consumer = new Consumer&lt;Integer&gt;() &#123;                                      </div><div class="line">        @Override                                                                               </div><div class="line">        public void accept(Integer integer) throws Exception &#123;                                  </div><div class="line">            Log.d(TAG, &quot;Observer thread is :&quot; + Thread.currentThread().getName());              </div><div class="line">            Log.d(TAG, &quot;onNext: &quot; + integer);                                                   </div><div class="line">        &#125;                                                                                       </div><div class="line">    &#125;;                                                                                          </div><div class="line"></div><div class="line">    observable.subscribeOn(Schedulers.newThread())                                              </div><div class="line">            .observeOn(AndroidSchedulers.mainThread())                                          </div><div class="line">            .subscribe(consumer);                                                               </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>还是刚才的例子, 只不过我们太添加了一点东西, 先来看看运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">D/TAG: Observable thread is : RxNewThreadScheduler-2  </div><div class="line">D/TAG: emit 1                                         </div><div class="line">D/TAG: Observer thread is :main                       </div><div class="line">D/TAG: onNext: 1</div></pre></td></tr></table></figure></p><p>可以看到, 上游发送事件的线程的确改变了, 是在一个叫  RxNewThreadScheduler-2的线程中发送的事件, 而下游仍然在主线程中接收事件, 这说明我们的目的达成了, 接下来看看是如何做到的.</p><p>和上一段代码相比,这段代码只不过是增加了两行代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.subscribeOn(Schedulers.newThread())                                              </div><div class="line">.observeOn(AndroidSchedulers.mainThread())</div></pre></td></tr></table></figure></p><p>作为一个初学者的入门教程, 并不会贴出一大堆源码来分析, 因此只需要让大家记住几个要点, 已达到如何正确的去使用这个目的才是我们的目标.</p><p>简单的来说, subscribeOn() 指定的是上游发送事件的线程, observeOn() 指定的是下游接收事件的线程.</p><p>多次指定上游的线程只有第一次指定的有效, 也就是说多次调用subscribeOn() 只有第一次的有效, 其余的会被忽略.</p><p>多次指定下游的线程是可以的, 也就是说每调用一次observeOn() , 下游的线程就会切换一次.</p><p>举个例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">observable.subscribeOn(Schedulers.newThread())     </div><div class="line">         .subscribeOn(Schedulers.io())              </div><div class="line">         .observeOn(AndroidSchedulers.mainThread())</div><div class="line">         .observeOn(Schedulers.io())                </div><div class="line">         .subscribe(consumer);</div></pre></td></tr></table></figure></p><p>这段代码中指定了两次上游发送事件的线程, 分别是newThread和IO线程, 下游也指定了两次线程,分别是main和IO线程. 运行结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">D/TAG: Observable thread is : RxNewThreadScheduler-3</div><div class="line">D/TAG: emit 1                                       </div><div class="line">D/TAG: Observer thread is :RxCachedThreadScheduler-1</div><div class="line">D/TAG: onNext: 1</div></pre></td></tr></table></figure></p><p>可以看到, 上游虽然指定了两次线程, 但只有第一次指定的有效, 依然是在RxNewThreadScheduler 线程中, 而下游则跑到了RxCachedThreadScheduler 中, 这个CacheThread其实就是IO线程池中的一个.</p><p>为了更清晰的看到下游的线程切换过程, 我们加点log:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">observable.subscribeOn(Schedulers.newThread())</div><div class="line">           .subscribeOn(Schedulers.io())</div><div class="line">           .observeOn(AndroidSchedulers.mainThread())</div><div class="line">           .doOnNext(new Consumer&lt;Integer&gt;() &#123;</div><div class="line">               @Override</div><div class="line">               public void accept(Integer integer) throws Exception &#123;</div><div class="line">                   Log.d(TAG, &quot;After observeOn(mainThread), current thread is: &quot; + Thread.currentThread().getName());</div><div class="line">               &#125;</div><div class="line">           &#125;)</div><div class="line">           .observeOn(Schedulers.io())</div><div class="line">           .doOnNext(new Consumer&lt;Integer&gt;() &#123;</div><div class="line">               @Override</div><div class="line">               public void accept(Integer integer) throws Exception &#123;</div><div class="line">                   Log.d(TAG, &quot;After observeOn(io), current thread is : &quot; + Thread.currentThread().getName());</div><div class="line">               &#125;</div><div class="line">           &#125;)</div><div class="line">           .subscribe(consumer);</div></pre></td></tr></table></figure></p><p>我们在下游线程切换之后, 把当前的线程打印出来, 运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">D/TAG: Observable thread is : RxNewThreadScheduler-1                                             </div><div class="line">D/TAG:emit1                                                                                    </div><div class="line">D/TAG: After observeOn(mainThread), current thread is: main                                      </div><div class="line">D/TAG: After observeOn(io), current thread is : RxCachedThreadScheduler-2                        </div><div class="line">D/TAG: Observer thread is :RxCachedThreadScheduler-2                                             </div><div class="line">D/TAG: onNext: 1</div></pre></td></tr></table></figure></p><p>可以看到, 每调用一次observeOn() 线程便会切换一次, 因此如果我们有类似的需求时, 便可知道如何处理了.</p><p>在RxJava中, 已经内置了很多线程选项供我们选择, 例如有</p><ul><li>Schedulers.io() 代表io操作的线程, 通常用于网络,读写文件等io密集型的操作</li><li>Schedulers.computation() 代表CPU计算密集型的操作, 例如需要大量计算的操作</li><li>Schedulers.newThread() 代表一个常规的新线程</li><li>AndroidSchedulers.mainThread() 代表Android的主线程</li></ul><p>这些内置的Scheduler已经足够满足我们开发的需求, 因此我们应该使用内置的这些选项, 在RxJava内部使用的是线程池来维护这些线程, 所有效率也比较高.</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>对于我们Android开发人员来说, 经常会将一些耗时的操作放在后台, 比如网络请求或者读写文件,操作数据库等等,等到操作完成之后回到主线程去更新UI, 有了上面的这些基础, 那么现在我们就可以轻松的去做到这样一些操作.</p><p>下面来举几个常用的场景.</p><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p>Android中有名的网络请求库就那么几个, Retrofit能够从中脱颖而出很大原因就是因为它支持RxJava的方式来调用, 下面简单讲解一下它的基本用法.</p><p>要使用Retrofit,先添加Gradle配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//retrofit</div><div class="line">compile &apos;com.squareup.retrofit2:retrofit:2.1.0&apos;</div><div class="line">//Gson converter</div><div class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.1.0&apos;</div><div class="line">//RxJava2 Adapter</div><div class="line">compile &apos;com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0&apos;</div><div class="line">//okhttp</div><div class="line">compile &apos;com.squareup.okhttp3:okhttp:3.4.1&apos;</div><div class="line">compile &apos;com.squareup.okhttp3:logging-interceptor:3.4.1&apos;</div></pre></td></tr></table></figure></p><p>随后定义Api接口:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public interface Api &#123;</div><div class="line">    @GET</div><div class="line">    Observable&lt;LoginResponse&gt; login(@Body LoginRequest request);</div><div class="line"></div><div class="line">    @GET</div><div class="line">    Observable&lt;RegisterResponse&gt; register(@Body RegisterRequest request);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接着创建一个Retrofit客户端:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private static Retrofit create() &#123;</div><div class="line">            OkHttpClient.Builder builder = new OkHttpClient().newBuilder();</div><div class="line">            builder.readTimeout(10, TimeUnit.SECONDS);</div><div class="line">            builder.connectTimeout(9, TimeUnit.SECONDS);</div><div class="line"></div><div class="line">            if (BuildConfig.DEBUG) &#123;</div><div class="line">                HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();</div><div class="line">                interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class="line">                builder.addInterceptor(interceptor);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            return new Retrofit.Builder().baseUrl(ENDPOINT)</div><div class="line">                    .client(builder.build())</div><div class="line">                    .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                    .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class="line">                    .build();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>发起请求就很简单了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Api api = retrofit.create(Api.class);</div><div class="line">api.login(request)</div><div class="line">      .subscribeOn(Schedulers.io())               //在IO线程进行网络请求</div><div class="line">     .observeOn(AndroidSchedulers.mainThread())  //回到主线程去处理请求结果</div><div class="line">    .subscribe(new Observer&lt;LoginResponse&gt;() &#123;</div><div class="line">            @Override</div><div class="line">        public void onSubscribe(Disposable d) &#123;&#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onNext(LoginResponse value) &#123;&#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onError(Throwable e) &#123;</div><div class="line">            Toast.makeText(mContext, &quot;登录失败&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onComplete() &#123;</div><div class="line">            Toast.makeText(mContext, &quot;登录成功&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p><p>看似很完美, 但我们忽略了一点, 如果在请求的过程中Activity已经退出了, 这个时候如果回到主线程去更新UI, 那么APP肯定就崩溃了, 怎么办呢, 上一节我们说到了Disposable , 说它是个开关, 调用它的dispose()方法时就会切断水管, 使得下游收不到事件, 既然收不到事件, 那么也就不会再去更新UI了. 因此我们可以在Activity中将这个Disposable 保存起来, 当Activity退出时, 切断它即可.</p><p>那如果有多个Disposable 该怎么办呢, RxJava中已经内置了一个容器CompositeDisposable, 每当我们得到一个Disposable时就调用CompositeDisposable.add()将它添加到容器中, 在退出的时候, 调用CompositeDisposable.clear() 即可切断所有的水管.</p><h2 id="读写数据库"><a href="#读写数据库" class="headerlink" title="读写数据库"></a>读写数据库</h2><p>上面说了网络请求的例子, 接下来再看看读写数据库, 读写数据库也算一个耗时的操作, 因此我们也最好放在IO线程里去进行, 这个例子就比较简单, 直接上代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public Observable&lt;List&lt;Record&gt;&gt; readAllRecords() &#123;</div><div class="line">        return Observable.create(new ObservableOnSubscribe&lt;List&lt;Record&gt;&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void subscribe(ObservableEmitter&lt;List&lt;Record&gt;&gt; emitter) throws Exception &#123;</div><div class="line">                Cursor cursor = null;</div><div class="line">                try &#123;</div><div class="line">                    cursor = getReadableDatabase().rawQuery(&quot;select * from &quot; + TABLE_NAME, new String[]&#123;&#125;);</div><div class="line">                    List&lt;Record&gt; result = new ArrayList&lt;&gt;();</div><div class="line">                    while (cursor.moveToNext()) &#123;</div><div class="line">                        result.add(Db.Record.read(cursor));</div><div class="line">                    &#125;</div><div class="line">                    emitter.onNext(result);</div><div class="line">                    emitter.onComplete();</div><div class="line">                &#125; finally &#123;</div><div class="line">                    if (cursor != null) &#123;</div><div class="line">                        cursor.close();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>好了本次的教程就到这里吧, 后面的教程将会教大家如何使用RxJava中强大的操作符. 通过使用这些操作符可以很轻松的做到各种吊炸天的效果. 敬请期待.</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""></div>]]></content>
    
    <summary type="html">
    
      Rxjava2入门最通俗易懂的教程
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Vim常用快捷键大全</title>
    <link href="https://github.com/itgoyo/2017/11/09/Vim%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8.html"/>
    <id>https://github.com/itgoyo/2017/11/09/Vim常用快捷键大全.html</id>
    <published>2017-11-09T08:32:13.000Z</published>
    <updated>2017-11-25T04:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-Vim的几种模式"><a href="#1-1-Vim的几种模式" class="headerlink" title="1.1 Vim的几种模式"></a>1.1 Vim的几种模式</h3><p>正常模式：可以使用快捷键命令，或按:输入命令行。</p><p>插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。</p><p>可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式，之后使用 j/k/h/l键可以选中一块</p><p>替换模式：正常模式下，按R进入。</p><h3 id="2-启动Vim"><a href="#2-启动Vim" class="headerlink" title="2. 启动Vim"></a>2. 启动Vim</h3><p>vim -c cmd file: 在打开文件前，先执行指定的命令；</p><p>vim -r file: 恢复上次异常退出的文件；</p><p>vim -R file: 以只读的方式打开文件，但可以强制保存；</p><p>vim -M file: 以只读的方式打开文件，不可以强制保存；</p><p>vim -y num file: 将编辑窗口的大小设为num行；</p><p>vim + file: 从文件的末尾开始；</p><p>vim +num file: 从第num行开始；</p><p>vim +/string file: 打开file，并将光标停留在第一个找到的string上。</p><p>vim –remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim –remote file在已有的gvim中打开文件。</p><p>###3. 文档操作</p><p>:e file –关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。</p><p>:e! file –放弃对当前文件的修改，编辑新的文件。</p><p>:e+file – 开始新的文件，并从文件尾开始编辑。</p><p>:e+n file – 开始新的文件，并从第n行开始编辑。</p><p>:enew –编译一个未命名的新文档。(CTRL-W n)</p><p>:e – 重新加载当前文档。</p><p>:e! – 重新加载当前文档，并丢弃已做的改动。</p><p>:e#或ctrl+^ – 回到刚才编辑的文件，很实用。</p><p>:f或ctrl+g – 显示文档名，是否修改，和光标位置。</p><p>:f filename – 改变编辑的文件名，这时再保存相当于另存为。</p><p>gf – 打开以光标所在字符串为文件名的文件。</p><p>:w – 保存修改。</p><p>:n1,n2w filename – 选择性保存从某n1行到另n2行的内容。</p><p>:wq – 保存并退出。</p><p>ZZ – 保存并退出。</p><p>:x – 保存并退出。</p><p>:q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)</p><p>:saveas newfilename – 另存为</p><p>:browse e – 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际<br>上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：</p><p>:set browsedir=last – 用上次访问过的目录（默认）；</p><p>:set browsedir=buffer – 用当前文件所在目录；</p><p>:set browsedir=current – 用当前工作目录；</p><p>:Sex – 水平分割一个窗口，浏览文件系统；</p><p>:Vex – 垂直分割一个窗口，浏览文件系统；</p><p>###4. 光标的移动</p><p>####4.1 基本移动</p><p>以下移动都是在normal模式下。</p><p>h或退格: 左移一个字符；</p><p>l或空格: 右移一个字符；</p><p>j: 下移一行；</p><p>k: 上移一行；</p><p>gj: 移动到一段内的下一行；</p><p>gk: 移动到一段内的上一行；</p><p>+或Enter: 把光标移至下一行第一个非空白字符。</p><p>-: 把光标移至上一行第一个非空白字符。</p><p>w: 前移一个单词，光标停在下一个单词开头；</p><p>W: 移动下一个单词开头，但忽略一些标点；</p><p>e: 前移一个单词，光标停在下一个单词末尾；</p><p>E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点；</p><p>b: 后移一个单词，光标停在上一个单词开头；</p><p>B: 移动到上一个单词开头，忽略一些标点；</p><p>ge: 后移一个单词，光标停在上一个单词末尾；</p><p>gE: 同 ge ，不过‘单词’包含单词相邻的标点。</p><p>(: 前移1句。</p><p>): 后移1句。</p><p>{: 前移1段。</p><p>}: 后移1段。</p><p>fc: 把光标移到同一行的下一个c字符处</p><p>Fc: 把光标移到同一行的上一个c字符处</p><p>tc: 把光标移到同一行的下一个c字符前</p><p>Tc: 把光标移到同一行的上一个c字符后</p><p>;: 配合f &amp; t使用，重复一次，比如fa后，再; 表示继续fa</p><p>,: 配合f &amp; t使用，反向重复一次</p><p>上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。</p><p>0: 移动到行首。</p><p>g0: 移到光标所在屏幕行行首。</p><p>^: 移动到本行第一个非空白字符。</p><p>g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。</p><p>$: 移动到行尾。</p><p>g$: 移动光标所在屏幕行行尾。</p><p>n|: 把光标移到递n列上。</p><p>nG: 到文件第n行。</p><p>:n<cr> 移动到第n行。</cr></p><p>:$<cr> 移动到最后一行。</cr></p><p>H: 把光标移到屏幕最顶端一行。</p><p>M: 把光标移到屏幕中间一行。</p><p>L: 把光标移到屏幕最底端一行。</p><p>gg: 到文件头部。</p><p>G: 到文件尾部。</p><h4 id="4-2-翻屏"><a href="#4-2-翻屏" class="headerlink" title="4.2 翻屏"></a>4.2 翻屏</h4><p>ctrl+f: 下翻一屏。</p><p>ctrl+b: 上翻一屏。</p><p>ctrl+d: 下翻半屏。</p><p>ctrl+u: 上翻半屏。</p><p>ctrl+e: 向下滚动一行。</p><p>ctrl+y: 向上滚动一行。</p><p>n%: 到文件n%的位置。</p><p>zz: 将当前行移动到屏幕中央。</p><p>zt: 将当前行移动到屏幕顶端。</p><p>zb: 将当前行移动到屏幕底端。</p><h4 id="4-3-标记"><a href="#4-3-标记" class="headerlink" title="4.3 标记"></a>4.3 标记</h4><p>使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。</p><p>m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。</p><p>m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。</p><p>`{a-z}: 移动到标记位置。</p><p>‘{a-z}: 移动到标记行的行首。</p><p>`{0-9}：回到上[2-10]次关闭vim时最后离开的位置。</p><p><code>: 移动到上次编辑的位置。&#39;&#39;也可以，不过</code>精确到列，而’’精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。</p><p>`”: 移动到上次离开的地方。</p><p>`.: 移动到最后改动的地方。</p><p>:marks 显示所有标记。</p><p>:delmarks a b – 删除标记a和b。</p><p>:delmarks a-c – 删除标记a、b和c。</p><p>:delmarks a c-f – 删除标记a、c、d、e、f。</p><p>:delmarks! – 删除当前缓冲区的所有标记。</p><p>:help mark-motions 查看更多关于mark的知识。</p><h3 id="5-插入文本"><a href="#5-插入文本" class="headerlink" title="5. 插入文本"></a>5. 插入文本</h3><h4 id="5-1-基本插入"><a href="#5-1-基本插入" class="headerlink" title="5.1 基本插入"></a>5.1 基本插入</h4><p>i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+<esc>就插入了36个+组成的分割线。</esc></p><p>I: 在当前行第一个非空字符前插入；</p><p>gI: 在当前行第一列插入；</p><p>a: 在光标后插入；</p><p>A: 在当前行最后插入；</p><p>o: 在下面新建一行插入；</p><p>O: 在上面新建一行插入；</p><p>:r filename在当前位置插入另一个文件的内容。</p><p>:[n]r filename在第n行插入另一个文件的内容。</p><p>:r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。</p><h4 id="5-2-改写插入"><a href="#5-2-改写插入" class="headerlink" title="5.2 改写插入"></a>5.2 改写插入</h4><p>c[n]w: 改写光标后1(n)个词。</p><p>c[n]l: 改写光标后n个字母。</p><p>c[n]h: 改写光标前n个字母。</p><p>[n]cc: 修改当前[n]行。</p><p>[n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。</p><p>[n]S: 删除指定数目的行，并以所输入文本代替之。</p><p>注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。</p><h3 id="6-剪切复制和寄存器"><a href="#6-剪切复制和寄存器" class="headerlink" title="6. 剪切复制和寄存器"></a>6. 剪切复制和寄存器</h3><h4 id="6-1-剪切和复制、粘贴"><a href="#6-1-剪切和复制、粘贴" class="headerlink" title="6.1 剪切和复制、粘贴"></a>6.1 剪切和复制、粘贴</h4><p>[n]x: 剪切光标右边n个字符，相当于d[n]l。</p><p>[n]X: 剪切光标左边n个字符，相当于d[n]h。</p><p>y: 复制在可视模式下选中的文本。</p><p>yy or Y: 复制整行文本。</p><p>y[n]w: 复制一(n)个词。</p><p>y[n]l: 复制光标右边1(n)个字符。</p><p>y[n]h: 复制光标左边1(n)个字符。</p><p>y$: 从光标当前位置复制到行尾。</p><p>y0: 从光标当前位置复制到行首。</p><p>:m,ny<cr> 复制m行到n行的内容。</cr></p><p>y1G或ygg: 复制光标以上的所有行。</p><p>yG: 复制光标以下的所有行。</p><p>yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。</p><p>d: 删除（剪切）在可视模式下选中的文本。</p><p>d$ or D: 删除（剪切）当前位置到行尾的内容。</p><p>d[n]w: 删除（剪切）1(n)个单词</p><p>d[n]l: 删除（剪切）光标右边1(n)个字符。</p><p>d[n]h: 删除（剪切）光标左边1(n)个字符。</p><p>d0: 删除（剪切）当前位置到行首的内容</p><p>[n] dd: 删除（剪切）1(n)行。</p><p>:m,nd<cr> 剪切m行到n行的内容。</cr></p><p>d1G或dgg: 剪切光标以上的所有行。</p><p>dG: 剪切光标以下的所有行。</p><p>daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。</p><p>dt字符                     –删除本行内容，直到遇到第一个指定字符 [不包括该字符]</p><p>df字符                     –删除本行内容，直到遇到第一个指定字符 [包括该字符]</p><p>p: 在光标之后粘贴。</p><p>P: 在光标之前粘贴。</p><p>6.2 文本对象</p><p>aw：一个词</p><p>as：一句。</p><p>ap：一段。</p><p>ab：一块（包含在圆括号中的）。</p><p>y, d, c, v都可以跟文本对象。</p><h4 id="6-2-剪切板"><a href="#6-2-剪切板" class="headerlink" title="6.2 剪切板"></a>6.2 剪切板</h4><p>Vim 有12个粘贴板依次编号为:0,1,2,3,…,9,a,”,+,其中+为系统粘贴板,”为临时粘贴板.系统粘贴板中的内容可在其他程序中使用.上面的复制指令都可以配合剪切板进行操作.</p><p>“nyw 复制当前单词到 n 号剪切板(双引号开始)<br>“np 粘贴 n 好剪切板的内容到当前位置后<br>“Y 复制当前行到系统剪切板<br>“ny 复制当前行加下面 n 行到系统剪切板<br>“p 粘贴系统剪切板内容到当前位置后</p><h4 id="6-3-寄存器"><a href="#6-3-寄存器" class="headerlink" title="6.3 寄存器"></a>6.3 寄存器</h4><p>a-z：都可以用作寄存器名。”ayy把当前行的内容放入a寄存器。</p><p>A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如”Ayy把当前行的内容追加到a寄存器中。</p><p>:reg 显示所有寄存器的内容。</p><p>“”：不加寄存器索引时，默认使用的寄存器。</p><p>“<em>：当前选择缓冲区，”</em>yy把当前行的内容放入当前选择缓冲区。</p><p>“+：系统剪贴板。”+yy把当前行的内容放入系统剪贴板。</p><h3 id="7-查找与替换"><a href="#7-查找与替换" class="headerlink" title="7. 查找与替换"></a>7. 查找与替换</h3><h4 id="7-1-查找"><a href="#7-1-查找" class="headerlink" title="7.1 查找"></a>7.1 查找</h4><p>/something: 在后面的文本中查找something。</p><p>?something: 在前面的文本中查找something。</p><p>/pattern/+number: 将光标停在包含pattern的行后面第number行上。</p><p>/pattern/-number: 将光标停在包含pattern的行前面第number行上。</p><p>n: 向后查找下一个。</p><p>N: 向前查找下一个。</p><p>可以用grep或vimgrep查找一个模式都在哪些地方出现过，</p><p>其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。</p><p>用法为： :vim[grep]/pattern/[g] [j] files</p><p>g的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。</p><p>j的含义是grep结束后，结果停在第j项，默认是停在第一项。</p><p>vimgrep前面可以加数字限定搜索结果的上限，如</p><p>:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。</p><p>其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。</p><p>比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：</p><p>:vim/^d{1,}./ %</p><p>然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧，</p><p>就更像个目录了。</p><h4 id="7-2-替换"><a href="#7-2-替换" class="headerlink" title="7.2 替换"></a>7.2 替换</h4><p>:s/old/new - 用new替换当前行第一个old。</p><p>:s/old/new/g - 用new替换当前行所有的old。</p><p>:n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。</p><p>:%s/old/new/g - 用new替换文件中所有的old。</p><p>:%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。</p><p>:%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。</p><p>所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。</p><p>还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，</p><p>语法为 :[range]g/pattern/command</p><p>例如 :%g/^ xyz/normal dd。</p><p>表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。</p><p>关于range的规定为：</p><p>如果不指定range，则表示当前行。</p><p>m,n: 从m行到n行。</p><p>0: 最开始一行（可能是这样）。</p><p>$: 最后一行</p><p>.: 当前行</p><p>%: 所有行</p><h4 id="7-3-正则表达式"><a href="#7-3-正则表达式" class="headerlink" title="7.3 正则表达式"></a>7.3 正则表达式</h4><p>高级的查找替换就要用到正则表达式。</p><p>\d: 表示十进制数（我猜的）</p><p>\s: 表示空格</p><p>\S: 非空字符</p><p>\a: 英文字母</p><p>|: 表示 或</p><p>.: 表示.</p><p>{m,n}: 表示m到n个字符。这要和 \s与\a等连用，如 \a{m,n} 表示m 到n个英文字母。</p><p>{m,}: 表示m到无限多个字符。</p><p>**: 当前目录下的所有子目录。</p><p>:help pattern得到更多帮助。</p><h3 id="8-排版"><a href="#8-排版" class="headerlink" title="8. 排版"></a>8. 排版</h3><h4 id="8-1-基本排版"><a href="#8-1-基本排版" class="headerlink" title="8.1 基本排版"></a>8.1 基本排版</h4><p>&lt;&lt; 向左缩进一个shiftwidth</p><blockquote><blockquote><p>向右缩进一个shiftwidth</p></blockquote></blockquote><p>:ce(nter) 本行文字居中</p><p>:le(ft) 本行文字靠左</p><p>:ri(ght) 本行文字靠右</p><p>gq 对选中的文字重排，即对过长的文字进行断行</p><p>gqq 重排当前行</p><p>gqnq 重排n行</p><p>gqap 重排当前段</p><p>gqnap 重排n段</p><p>gqnj 重排当前行和下面n行</p><p>gqQ 重排当前段对文章末尾</p><p>J 拼接当前行和下一行</p><p>gJ 同 J ，不过合并后不留空格。</p><h4 id="8-2-拼写检查"><a href="#8-2-拼写检查" class="headerlink" title="8.2 拼写检查"></a>8.2 拼写检查</h4><p>:set spell－开启拼写检查功能</p><p>:set nospell－关闭拼写检查功能</p><p>]s－移到下一个拼写错误的单词</p><p>[s－作用与上一命令类似，但它是从相反方向进行搜索</p><p>z=－显示一个有关拼写错误单词的列表，可从中选择</p><p>zg－告诉拼写检查器该单词是拼写正确的</p><p>zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的</p><h4 id="8-3-统计字数"><a href="#8-3-统计字数" class="headerlink" title="8.3 统计字数"></a>8.3 统计字数</h4><p>g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是<br>Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。</p><h3 id="9-编辑多个文件"><a href="#9-编辑多个文件" class="headerlink" title="9. 编辑多个文件"></a>9. 编辑多个文件</h3><h4 id="9-1-一次编辑多个文件"><a href="#9-1-一次编辑多个文件" class="headerlink" title="9.1 一次编辑多个文件"></a>9.1 一次编辑多个文件</h4><p>我们可以一次打开多个文件，如</p><p> vi a.txt b.txt c.txt</p><p>使用:next(:n)编辑下一个文件。</p><p>:2n 编辑下2个文件。</p><p>使用:previous或:N编辑上一个文件。</p><p>使用:wnext，保存当前文件，并编辑下一个文件。</p><p>使用:wprevious，保存当前文件，并编辑上一个文件。</p><p>使用:args 显示文件列表。</p><p>:n filenames或:args filenames 指定新的文件列表。</p><p>vi -o filenames 在水平分割的多个窗口中编辑多个文件。</p><p>vi -O filenames 在垂直分割的多个窗口中编辑多个文件。</p><h4 id="9-2-多标签编辑"><a href="#9-2-多标签编辑" class="headerlink" title="9.2 多标签编辑"></a>9.2 多标签编辑</h4><p>vim -p files: 打开多个文件，每个文件占用一个标签页。</p><p>:tabe, tabnew – 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。</p><p>^w gf – 在新的标签页里打开光标下路径指定的文件。</p><p>:tabn – 切换到下一个标签。Control + PageDown，也可以。</p><p>:tabp – 切换到上一个标签。Control + PageUp，也可以。</p><p>[n] gt – 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。</p><p>gT–切换到上一个。</p><p>:tab split – 将当前缓冲区的内容在新页签中打开。</p><p>:tabc[lose] – 关闭当前的标签页。</p><p>:tabo[nly] – 关闭其它的标签页。</p><p>:tabs – 列出所有的标签页和它们包含的窗口。</p><p>:tabm[ove] [N] – 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。</p><h4 id="9-3-缓冲区"><a href="#9-3-缓冲区" class="headerlink" title="9.3 缓冲区"></a>9.3 缓冲区</h4><p>:buffers或:ls或:files 显示缓冲区列表。</p><p>ctrl+^：在最近两个缓冲区间切换。</p><p>:bn – 下一个缓冲区。</p><p>:bp – 上一个缓冲区。</p><p>:bl – 最后一个缓冲区。</p><p>:b[n]或:[n]b – 切换到第n个缓冲区。</p><p>:nbw(ipeout) – 彻底删除第n个缓冲区。</p><p>:nbd(elete) – 删除第n个缓冲区，并未真正删除，还在unlisted列表中。</p><p>:ba[ll] – 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。</p><h3 id="10-分屏编辑"><a href="#10-分屏编辑" class="headerlink" title="10. 分屏编辑"></a>10. 分屏编辑</h3><p>vim -o file1 file2:水平分割窗口，同时打开file1和file2</p><p>vim -O file1 file2:垂直分割窗口，同时打开file1和file2</p><h4 id="10-1-水平分割"><a href="#10-1-水平分割" class="headerlink" title="10.1 水平分割"></a>10.1 水平分割</h4><p>:split(:sp) – 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。</p><p>让水平分割窗口同时滚动，在两个窗口中输入    ：set scb</p><p>:split filename – 水平分割窗口，并在新窗口中显示另一个文件。</p><p>:nsplit(:nsp) – 水平分割出一个n行高的窗口。</p><p>:[N]new – 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N)</p><p>ctrl+w f –水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。</p><p>C-w C-^ – 水平分割一个窗口，打开刚才编辑的文件。</p><h4 id="10-2-垂直分割"><a href="#10-2-垂直分割" class="headerlink" title="10.2 垂直分割"></a>10.2 垂直分割</h4><p>:vsplit(:vsp) – 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V)</p><p>:[N]vne[w] – 垂直分割出一个新窗口。</p><p>:vertical 水平分割的命令： 相应的垂直分割。</p><h4 id="10-3-关闭子窗口"><a href="#10-3-关闭子窗口" class="headerlink" title="10.3 关闭子窗口"></a>10.3 关闭子窗口</h4><p>:qall – 关闭所有窗口，退出vim。</p><p>:wall – 保存所有修改过的窗口。</p><p>:only – 只保留当前窗口，关闭其它窗口。(CTRL-W o)</p><p>:close – 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 )</p><h4 id="10-4-调整窗口大小"><a href="#10-4-调整窗口大小" class="headerlink" title="10.4 调整窗口大小"></a>10.4 调整窗口大小</h4><p>ctrl+w + –当前窗口增高一行。也可以用n增高n行。</p><p>ctrl+w - –当前窗口减小一行。也可以用n减小n行。</p><p>ctrl+w _ –当前窗口扩展到尽可能的大。也可以用n设定行数。</p><p>:resize n – 当前窗口n行高。</p><p>ctrl+w = – 所有窗口同样高度。</p><p>n ctrl+w _ – 当前窗口的高度设定为n行。</p><p>ctrl+w &lt; –当前窗口减少一列。也可以用n减少n列。</p><p>ctrl+w &gt; –当前窗口增宽一列。也可以用n增宽n列。</p><p>ctrl+w | –当前窗口尽可能的宽。也可以用n设定列数。</p><h4 id="10-5-切换和移动窗口"><a href="#10-5-切换和移动窗口" class="headerlink" title="10.5 切换和移动窗口"></a>10.5 切换和移动窗口</h4><p>如果支持鼠标，切换和调整子窗口的大小就简单了。</p><p>ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。</p><p>ctrl+w p: 切换到前一个窗口。</p><p>ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。</p><p>ctrl+w t(b):切换到最上（下）面的窗口。<br></p><p>ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。</p><p>ctrl+w r：旋转窗口的位置。</p><p>ctrl+w T: 将当前的窗口移动到新的标签页上。</p><h3 id="11-快速编辑"><a href="#11-快速编辑" class="headerlink" title="11. 快速编辑"></a>11. 快速编辑</h3><h4 id="11-1-改变大小写"><a href="#11-1-改变大小写" class="headerlink" title="11.1 改变大小写"></a>11.1 改变大小写</h4><p>~: 反转光标所在字符的大小写。</p><p>可视模式下的U或u：把选中的文本变为大写或小写。</p><p>gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j<br>，把当前行和下面四行全部变成小写。</p><h4 id="11-2-替换（normal模式）"><a href="#11-2-替换（normal模式）" class="headerlink" title="11.2 替换（normal模式）"></a>11.2 替换（normal模式）</h4><p>r: 替换光标处的字符，同样支持汉字。</p><p>R: 进入替换模式，按esc回到正常模式。</p><h4 id="11-3-撤消与重做（normal模式）"><a href="#11-3-撤消与重做（normal模式）" class="headerlink" title="11.3 撤消与重做（normal模式）"></a>11.3 撤消与重做（normal模式）</h4><p>[n] u: 取消一(n)个改动。</p><p>:undo 5 – 撤销5个改变。</p><p>:undolist – 你的撤销历史。</p><p>ctrl + r: 重做最后的改动。</p><p>U: 取消当前行中所有的改动。</p><p>:earlier 4m – 回到4分钟前</p><p>:later 55s –</p><h4 id="11-4-宏"><a href="#11-4-宏" class="headerlink" title="11.4 宏"></a>11.4 宏</h4><p>. –重复上一个编辑动作</p><p>qa：开始录制宏a（键盘操作记录）</p><p>q：停止录制</p><p>@a：播放宏a</p><h3 id="12-编辑特殊文件"><a href="#12-编辑特殊文件" class="headerlink" title="12. 编辑特殊文件"></a>12. 编辑特殊文件</h3><h4 id="12-1-文件加解密"><a href="#12-1-文件加解密" class="headerlink" title="12.1 文件加解密"></a>12.1 文件加解密</h4><p>vim -x file: 开始编辑一个加密的文件。</p><p>:X – 为当前文件设置密码。</p><p>:set key= – 去除文件的密码。</p><p>这里是 滇狐总结的比较高级的vi技巧。</p><h4 id="12-2-文件的编码"><a href="#12-2-文件的编码" class="headerlink" title="12.2 文件的编码"></a>12.2 文件的编码</h4><p>:e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。</p><p>:w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。</p><p>:set fenc或:set fileencoding，查看当前文件的编码。</p><p>在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom<br>对应于windows下的文件格式。</p><p>让vim 正确处理文件格式和文件编码，有赖于 ~/.vimrc的正确配置</p><h4 id="12-3-文件格式"><a href="#12-3-文件格式" class="headerlink" title="12.3 文件格式"></a>12.3 文件格式</h4><p>大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。</p><p>:e ++ff=dos filename, 让vim用dos格式打开这个文件。</p><p>:w ++ff=mac filename, 以mac格式存储这个文件。</p><p>:set ff，显示当前文件的格式。</p><p>在vimrc中添加set fileformats=unix,dos,mac，让vim自动识别文件格式。</p><h3 id="13-编程辅助"><a href="#13-编程辅助" class="headerlink" title="13. 编程辅助"></a>13. 编程辅助</h3><h4 id="13-1-一些按键"><a href="#13-1-一些按键" class="headerlink" title="13.1 一些按键"></a>13.1 一些按键</h4><p>gd: 跳转到局部变量的定义处；</p><p>gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；</p><p>g;: 上一个修改过的地方；</p><p>g,: 下一个修改过的地方；</p><p>[[: 跳转到上一个函数块开始，需要有单独一行的{。</p><p>]]: 跳转到下一个函数块开始，需要有单独一行的{。</p><p>[]: 跳转到上一个函数块结束，需要有单独一行的}。</p><p>][: 跳转到下一个函数块结束，需要有单独一行的}。</p><p>[{: 跳转到当前块开始处；</p><p>]}: 跳转到当前块结束处；</p><p>[/: 跳转到当前注释块开始处；</p><p>]/: 跳转到当前注释块结束处；</p><p>%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。</p><p>下面的括号匹配对编程很实用的。</p><p>ci’, di’, yi’：修改、剪切或复制’之间的内容。</p><p>ca’, da’, ya’：修改、剪切或复制’之间的内容，包含’。</p><p>ci”, di”, yi”：修改、剪切或复制”之间的内容。</p><p>ca”, da”, ya”：修改、剪切或复制”之间的内容，包含”。</p><p>ci(, di(, yi(：修改、剪切或复制()之间的内容。</p><p>ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。</p><p>ci[, di[, yi[：修改、剪切或复制[]之间的内容。</p><p>ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。</p><p>ci{, di{, yi{：修改、剪切或复制{}之间的内容。</p><p>ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。</p><p>ci&lt;, di&lt;, yi&lt;：修改、剪切或复制&lt;&gt;之间的内容。</p><p>ca&lt;, da&lt;, ya&lt;：修改、剪切或复制&lt;&gt;之间的内容，包含&lt;&gt;。</p><h4 id="13-2-ctags"><a href="#13-2-ctags" class="headerlink" title="13.2 ctags"></a>13.2 ctags</h4><p>ctags -R: 生成tag文件，-R表示也为子目录中的文件生成tags</p><p>:set tags=path/tags – 告诉ctags使用哪个tag文件</p><p>:tag xyz – 跳到xyz的定义处，或者将光标放在xyz上按C-]，返回用C-t</p><p>:stag xyz – 用分割的窗口显示xyz的定义，或者C-w ]， 如果用C-w n ]，就会打开一个n行高的窗口</p><p>:ptag xyz – 在预览窗口中打开xyz的定义，热键是C-w }。</p><p>:pclose – 关闭预览窗口。热键是C-w z。</p><p>:pedit abc.h – 在预览窗口中编辑abc.h</p><p>:psearch abc – 搜索当前文件和当前文件include的文件，显示包含abc的行。</p><p>有时一个tag可能有多个匹配，如函数重载，一个函数名就会有多个匹配。 这种情况会先跳转到第一个匹配处。</p><p>:[n]tnext – 下一[n]个匹配。</p><p>:[n]tprev – 上一[n]个匹配。</p><p>:tfirst – 第一个匹配</p><p>:tlast – 最后一个匹配</p><p>:tselect tagname – 打开选择列表</p><p>tab键补齐</p><p>:tag xyz<tab> – 补齐以xyz开头的tag名，继续按tab键，会显示其他的。</tab></p><p>:tag /xyz<tab> – 会用名字中含有xyz的tag名补全。</tab></p><h4 id="13-3-cscope"><a href="#13-3-cscope" class="headerlink" title="13.3 cscope"></a>13.3 cscope</h4><p>cscope -Rbq: 生成cscope.out文件</p><p>:cs add /path/to/cscope.out /your/work/dir</p><p>:cs find c func – 查找func在哪些地方被调用</p><p>:cw – 打开quickfix窗口查看结果</p><h4 id="13-4-gtags"><a href="#13-4-gtags" class="headerlink" title="13.4 gtags"></a>13.4 gtags</h4><p>Gtags综合了ctags和cscope的功能。 使用Gtags之前，你需要安装GNU Gtags。 然后在工程目录运行 gtags 。</p><p>:Gtags funcname 定位到 funcname 的定义处。</p><p>:Gtags -r funcname 查询 funcname被引用的地方。</p><p>:Gtags -s symbol 定位 symbol 出现的地方。</p><p>:Gtags -g string Goto string 出现的地方。 :Gtags -gi string 忽略大小写。</p><p>:Gtags -f filename 显示 filename 中的函数列表。 你可以用 :Gtags -f % 显示当前文件。</p><p>:Gtags -P pattern 显示路径中包含特定模式的文件。 如 :Gtags -P .h$ 显示所有头文件， :Gtags -P /vm/ 显示vm目录下的文件。</p><h4 id="13-5-编译"><a href="#13-5-编译" class="headerlink" title="13.5 编译"></a>13.5 编译</h4><p>vim提供了:make来编译程序，默认调用的是make， 如果你当前目录下有makefile，简单地:make即可。</p><p>如果你没有make程序，你可以通过配置makeprg选项来更改make调用的程序。 如果你只有一个abc.Java文件，你可以这样设置：</p><p>set makeprg=javac\ abc.java<br>然后:make即可。如果程序有错，可以通过quickfix窗口查看错误。 不过如果要正确定位错误，需要设置好errorformat，让vim识别错误信息。 如：</p><p>:setl efm=%A%f:%l:\ %m,%-Z%p^,%-C%.%#<br>%f表示文件名，%l表示行号， %m表示错误信息，其它的还不能理解。 请参考 :help errorformat。</p><h4 id="13-6-快速修改窗口"><a href="#13-6-快速修改窗口" class="headerlink" title="13.6 快速修改窗口"></a>13.6 快速修改窗口</h4><p>其实是quickfix插件提供的功能， 对编译调试程序非常有用 :)</p><p>:copen – 打开快速修改窗口。</p><p>:cclose – 关闭快速修改窗口。<br>快速修改窗口在make程序时非常有用，当make之后：</p><p>:cl – 在快速修改窗口中列出错误。</p><p>:cn – 定位到下一个错误。</p><p>:cp – 定位到上一个错误。</p><p>:cr – 定位到第一个错误。</p><h4 id="13-7-自动补全"><a href="#13-7-自动补全" class="headerlink" title="13.7 自动补全"></a>13.7 自动补全</h4><p>C-x C-s – 拼写建议。</p><p>C-x C-v – 补全vim选项和命令。</p><p>C-x C-l – 整行补全。</p><p>C-x C-f – 自动补全文件路径。弹出菜单后，按C-f循环选择，当然也可以按 C-n和C-p。</p><p>C-x C-p 和C-x C-n – 用文档中出现过的单词补全当前的词。 直接按C-p和C-n也可以。</p><p>C-x C-o – 编程时可以补全关键字和函数名啊。</p><p>C-x C-i – 根据头文件内关键字补全。</p><p>C-x C-d – 补全宏定义。</p><p>C-x C-n – 按缓冲区中出现过的关键字补全。 直接按C-n或C-p即可。<br>当弹出补全菜单后：</p><p>C-p 向前切换成员；</p><p>C-n 向后切换成员；</p><p>C-e 退出下拉菜单，并退回到原来录入的文字；</p><p>C-y 退出下拉菜单，并接受当前选项。</p><h4 id="13-8-多行缩进缩出"><a href="#13-8-多行缩进缩出" class="headerlink" title="13.8 多行缩进缩出"></a>13.8 多行缩进缩出</h4><p>正常模式下，按两下&gt;;光标所在行会缩进。</p><p>如果先按了n，再按两下&gt;;，光标以下的n行会缩进。</p><p>对应的，按两下&lt;;，光标所在行会缩出。</p><p>如果在编辑代码文件，可以用=进行调整。</p><p>在可视模式下，选择要调整的代码块，按=，代码会按书写规则缩排好。</p><p>或者n =，调整n行代码的缩排。</p><h4 id="13-9-折叠"><a href="#13-9-折叠" class="headerlink" title="13.9 折叠"></a>13.9 折叠</h4><p>zf – 创建折叠的命令，可以在一个可视区域上使用该命令；</p><p>zd – 删除当前行的折叠；</p><p>zD – 删除当前行的折叠；</p><p>zfap – 折叠光标所在的段；</p><p>zo – 打开折叠的文本；</p><p>zc – 收起折叠；</p><p>za – 打开/关闭当前折叠；</p><p>zr – 打开嵌套的折行；</p><p>zm – 收起嵌套的折行；</p><p>zR (zO) – 打开所有折行；</p><p>zM (zC) – 收起所有折行；</p><p>zj – 跳到下一个折叠处；</p><p>zk – 跳到上一个折叠处；</p><p>zi – enable/disable fold;</p><h3 id="14-命令行"><a href="#14-命令行" class="headerlink" title="14. 命令行"></a>14. 命令行</h3><p>normal模式下按:进入命令行模式</p><h4 id="14-1-命令行模式下的快捷键："><a href="#14-1-命令行模式下的快捷键：" class="headerlink" title="14.1 命令行模式下的快捷键："></a>14.1 命令行模式下的快捷键：</h4><p>上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。</p><p>左右方向键：左/右移一个字符。</p><p>C-w： 向前删除一个单词。</p><p>C-h： 向前删除一个字符，等同于Backspace。</p><p>C-u： 从当前位置移动到命令行开头。</p><p>C-b： 移动到命令行开头。</p><p>C-e： 移动到命令行末尾。</p><p>Shift-Left： 左移一个单词。</p><p>Shift-Right： 右移一个单词。</p><p>@： 重复上一次的冒号命令。</p><p>q： 正常模式下，q然后按’:’，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。</p><p>q/和q? 可以打开查找历史记录。</p><h4 id="14-2-执行外部命令"><a href="#14-2-执行外部命令" class="headerlink" title="14.2 执行外部命令"></a>14.2 执行外部命令</h4><p>:! cmd 执行外部命令。</p><p>:!! 执行上一次的外部命令。</p><p>:sh 调用shell，用exit返回vim。</p><p>:r !cmd 将命令的返回结果插入文件当前位置。</p><p>:m,nw !cmd 将文件的m行到n行之间的内容做为命令输入执行命令。</p><h3 id="15-其它"><a href="#15-其它" class="headerlink" title="15. 其它"></a>15. 其它</h3><h4 id="15-1-工作目录"><a href="#15-1-工作目录" class="headerlink" title="15.1 工作目录"></a>15.1 工作目录</h4><p>:pwd 显示vim的工作目录。</p><p>:cd path 改变vim的工作目录。</p><p>:set autochdir 可以让vim</p><h4 id="15-2-一些快捷键（收集中）"><a href="#15-2-一些快捷键（收集中）" class="headerlink" title="15.2 一些快捷键（收集中）"></a>15.2 一些快捷键（收集中）</h4><p>K: 打开光标所在词的manpage。</p><p>*: 向下查找光标所在词。</p><p>#：向上查找</p><p>g*: 同上，但部分符合即可。</p><p>#: 向上搜索光标所在词。</p><p>g#: 同上，但部分符合即可。</p><p>g C-g: 统计全文或统计部分的字数。</p><h4 id="15-3-在线帮助"><a href="#15-3-在线帮助" class="headerlink" title="15.3 在线帮助"></a>15.3 在线帮助</h4><p>:h(elp)或F1 打开总的帮助。</p><p>:help user-manual 打开用户手册。</p><p>命令帮助的格式为：第一行指明怎么使用那个命令； 然后是缩进的一段解释这个命令的作用，然后是进一步的信息。</p><p>:helptags somepath 为somepath中的文档生成索引。</p><p>:helpgrep 可以搜索整个帮助文档，匹配的列表显示在quickfix窗口中。</p><p>Ctrl+] 跳转到tag主题，Ctrl+t 跳回。</p><p>:ver 显示版本信息。</p><h4 id="15-4-一些小功能"><a href="#15-4-一些小功能" class="headerlink" title="15.4 一些小功能"></a>15.4 一些小功能</h4><p>简单计算器: 在插入模式下，输入C-r =，然后输入表达式，就能在 光标处得到计算结果</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-1-Vim的几种模式&quot;&gt;&lt;a href=&quot;#1-1-Vim的几种模式&quot; class=&quot;headerlink&quot; title=&quot;1.1 Vim的几种模式&quot;&gt;&lt;/a&gt;1.1 Vim的几种模式&lt;/h3&gt;&lt;p&gt;正常模式：可以使用快捷键命令，或按:输入命令行。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Vim" scheme="https://github.com/itgoyo/categories/Vim/"/>
    
    
      <category term="Vim" scheme="https://github.com/itgoyo/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Mac系统好用的软件推荐</title>
    <link href="https://github.com/itgoyo/2017/11/08/Mac%E7%B3%BB%E7%BB%9F%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90.html"/>
    <id>https://github.com/itgoyo/2017/11/08/Mac系统好用的软件推荐.html</id>
    <published>2017-11-08T10:02:07.000Z</published>
    <updated>2017-11-23T13:15:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/MacApp.svg?style=social&amp;label=Star" alt=""></p><h1 id="MacApp"><a href="#MacApp" class="headerlink" title="MacApp"></a>MacApp</h1><p>文章应用参考<a href="http://xclient.info/" target="_blank" rel="external">xclient官网</a>，做出整理。</p><h4 id="1-1-热门应用"><a href="#1-1-热门应用" class="headerlink" title="1.1 热门应用"></a>1.1 热门应用</h4><table><thead><tr><th>评分</th><th>名称</th><th>功能简述</th><th>官网</th><th>破解版</th></tr></thead><tbody><tr><td>★★★★★</td><td>Sketch</td><td>轻量易用的矢量设计工具</td><td><a href="https://www.sketchapp.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/sketch.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Microsoft Office</td><td>最好用的办公软件</td><td><a href="https://www.office.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/office-for-mac-2016.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Navicat Premium</td><td>强大的数据库管理工具</td><td><a href="https://www.office.com/https://www.navicat.com.cn/products/navicat-premium" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/navicat-premium.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Adobe Photoshop</td><td>最强大的设计软件</td><td><a href="http://www.adobe.com/cn/products/photoshop/free-trial-download.html" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/adobe-photoshop-cc.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Charles</td><td>强大的抓包工具</td><td><a href="https://www.charlesproxy.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/charles.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Alfred</td><td>效率神器</td><td><a href="https://www.alfredapp.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/alfred.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Dash</td><td>开发者必备API文档聚合</td><td><a href="https://kapeli.com/dash" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/dash.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Parallels Desktop</td><td>最佳Mac虚拟机解决方案</td><td><a href="https://www.parallels.com/products/desktop/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/parallels-desktop.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>PDF Expert</td><td>极致的PDF阅读标注工作体验</td><td><a href="https://pdfexpert.com/zh" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/pdf-expert-for-mac.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>MindNode Pro</td><td>思维导图工具</td><td><a href="https://mindnode.com/mindnode/mac" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/mind-node-pro.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Sublime Text 3</td><td>强大的文本编辑器</td><td><a href="https://www.sublimetext.com/3" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/sublime-text.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>VMware Fusion</td><td>强大的虚拟机应用</td><td><a href="https://www.vmware.com/products/fusion.html" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/vmware-fusion.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Downie</td><td>视频下载工具</td><td><a href="http://software.charliemonroe.net/downie.php" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/downie.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>WebStorm</td><td>Web前端开发神器</td><td><a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/web-storm.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>OmniGraffle Pro</td><td>强大的图形工具</td><td><a href="https://www.omnigroup.com/omnigraffle" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/omnigraffle.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>SecureCRT</td><td>一款终端仿真程序</td><td><a href="https://www.vandyke.com/products/securecrt/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/securecrt.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>iStat Menus</td><td>优秀的系统监控工具</td><td><a href="https://bjango.com/mac/istatmenus/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/istat-menus-for-mac.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Principle</td><td>Mac平台交互动效设计神器</td><td><a href="http://principleformac.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/principle.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>BetterZip</td><td>快速的压缩工具</td><td><a href="https://macitbetter.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/better-zip.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Axure RP</td><td>专业的快速原型设计工具</td><td><a href="https://www.axure.com/download" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/axure-rp.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Cornerstone</td><td>应该说是mac上最好用的SVN客户端</td><td><a href="https://www.zennaware.com/cornerstone/store.php" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/cornerstone.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Final Cut Pro</td><td>专业级视频剪辑软件</td><td><a href="https://www.apple.com/final-cut-pro/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/final-cut-pro.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Adobe Illustrator CC</td><td>一款非常好的矢量图形处理工具</td><td><a href="http://www.adobe.com/products/illustrator/free-trial-download.html" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/adobe-illustrator-cc.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>iMazing</td><td>在Mac上管理iPhone如此简单</td><td><a href="https://imazing.com/zh" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/imazing.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Bartender</td><td>一款实用的菜单栏管理工具</td><td><a href="https://www.macbartender.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/bartender.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Flinto</td><td>交互式设计神器</td><td><a href="https://www.flinto.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/flinto.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Ulysses</td><td>强大的文本编辑器</td><td><a href="https://ulyssesapp.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/ulysses.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>IntelliJ IDEA</td><td>业界公认的最好的java开发工具之一</td><td><a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/intellij-idea.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Shimo</td><td>最先进的VPN客户端</td><td><a href="https://www.shimovpn.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/shimo.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Airmail</td><td>最强mac邮件客户端</td><td><a href="http://airmailapp.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/airmail.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>PyCharm</td><td>强大的Python IDE工具</td><td><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/pycharm.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>1Password</td><td>密码管理工具 App名人堂产品</td><td><a href="https://1password.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/1password.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>MWeb</td><td>专业的Markdown写作、静态博客生成软件</td><td><a href="http://zh.mweb.im/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/mweb.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Transmit</td><td>一款功能齐全的FTP客户端</td><td><a href="https://panic.com/transmit/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/transmit.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>BetterTouchTool</td><td>把触控板的潜力发挥到淋漓尽致</td><td><a href="https://www.boastr.net/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/bettertouchtool.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Folx Pro</td><td>Mac上公认最好的下载工具</td><td><a href="https://www.macupdate.com/app/mac/29767/folx-pro" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/folx-pro.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Fantastical</td><td>优雅的日历软件</td><td><a href="https://flexibits.com/fantastical" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/fantastical.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>OmniFocus</td><td>强大的任务管理软件</td><td><a href="https://www.omnigroup.com/omnifocus" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/omnifocus.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Movist</td><td>一款CPU占用率低的高清多格式媒体播放器</td><td><a href="https://movist.en.softonic.com/mac" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/movist.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>CrossOver</td><td>在你的mac上运行window应用</td><td><a href="https://www.codeweavers.com/products/crossover-mac" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/cross-over.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>OmniPlan</td><td>最NB的项目管理流程软件</td><td><a href="https://www.omnigroup.com/omniplan" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/omni-plan.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Paw</td><td>3.1.5 实用的HTTP/REST服务测试工具</td><td><a href="https://paw.cloud/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/paw.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Archiver</td><td>一款功能齐全的压缩解压工具</td><td><a href="https://archiverapp.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/archiver.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Tower</td><td>mac平台最强大的Git 客户端</td><td><a href="https://www.git-tower.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/tower.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Adobe Acrobat Pro</td><td>强大的PDF编辑软件</td><td><a href="https://acrobat.adobe.com/us/en/acrobat/acrobat-pro.html" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/adobe-acrobat-pro-dc.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Adobe After Effects</td><td>一款强大的图形视频处理软件</td><td><a href="http://www.adobe.com/products/aftereffects.html" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/adobe-after-effects-cc.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Day One</td><td>生活记录伴侣</td><td><a href="http://dayoneapp.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/day-one.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Framer</td><td>移动交互原型设计工具</td><td><a href="https://framer.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/framer-studio.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>MAMP Pro</td><td>集成web服务器环境</td><td><a href="https://www.mamp.info/en/mamp-pro/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/mamp-pro.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr><tr><td>★★★★★</td><td>Civilization VI（文明6）</td><td>一款回合制策略游戏</td><td><a href="https://www.civilization.com/" target="_blank" rel="external">官网</a></td><td><a href="http://xclient.info/s/civilization-vi.html?_=7a372c5fb239b94c77ad4868d63f8a67" target="_blank" rel="external">地址</a></td></tr></tbody></table><h4 id="评分说明："><a href="#评分说明：" class="headerlink" title="评分说明："></a>评分说明：</h4><table><thead><tr><th>评分</th><th>推荐度</th></tr></thead><tbody><tr><td>★★★★★</td><td>必装神器</td></tr><tr><td>★★★★☆</td><td>十分出色</td></tr><tr><td>★★★★</td><td>值得购入</td></tr><tr><td>★★★☆</td><td>亮点突出</td></tr><tr><td>★★★</td><td>同类出众</td></tr></tbody></table><div align="center"><br><br><strong>请我吃颗糖</strong><br><br><br><br><br><br><img src="http://omvbl46i3.bkt.clouddn.com/17-11-8/71817293.jpg" alt=""><br></div><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/MacApp.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;MacApp&quot;&gt;&lt;a href=&quot;#MacApp
      
    
    </summary>
    
      <category term="Mac" scheme="https://github.com/itgoyo/categories/Mac/"/>
    
    
      <category term="Mac" scheme="https://github.com/itgoyo/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>凭什么我要给你钱</title>
    <link href="https://github.com/itgoyo/2017/11/07/%E5%87%AD%E4%BB%80%E4%B9%88%E6%88%91%E8%A6%81%E7%BB%99%E4%BD%A0%E9%92%B1.html"/>
    <id>https://github.com/itgoyo/2017/11/07/凭什么我要给你钱.html</id>
    <published>2017-11-07T00:14:49.000Z</published>
    <updated>2017-11-23T13:14:23.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><img src="http://omvbl46i3.bkt.clouddn.com/17-11-7/41129282.jpg" alt=""><br></div><br>昨晚在下班回家，走到小区前面的一家超市面前的时候，突然有一位中年妇女，走过来问了声，”你好，你可以帮我买瓶水，或者买点吃的吗？”那会我没怎么听清楚，反问到”什么？”，她又说到”可以帮我买点吃的，或者到超市给我买瓶水么？”，我心中一疑，仔细观察了这位中年妇女的穿着，干干净净的，然后微笑对她说了句，”对不起，不能”，然后转身就走，在我转身离开的那一刻，我听到，她很大声的骂了一句”我靠”，还有一些呢喃听得不怎么清楚。<br><br>我觉得很奇怪，凭什么我要给你买东西，为什么我不给你买，你就骂人。首先，我没有必须给你钱的义务，其次，你什么都不说清楚，就径直地过来问我替你买东西，我怎么知道你是不是在骗我，最后，庆幸自己没有爱心泛滥，因为没有帮她买之后，她的表现真的让人无语。<br><br>当年我快上大学的时候，我和我爸爸走到南宁火车站附近的时候，就看到有一个年轻的妈妈背着她的娃跪在路边，摆了一张纸，上面写到什么因为没钱回家什么的，所以求助好心人，我爸爸当初觉得挺可怜的，就给了20块钱，然而那个女的就一直保持跪着，连一声谢谢都没有，总觉得自己本该被捐助一样。我们转身走开之后那女的还一直跪在那里，在我爸爸买水的时候就问了一下那个店员，那个女的跪在这里多久了，那店员就说，不用理她，就是一个骗子而已，每天都会在哪里跪着骗钱，那会我爸爸才知道被骗了。其实我觉得那20块钱不亏，买到了一些经验，就是不要爱心泛滥。我就觉得很奇怪，总是有人起哄逼捐，类似马云被逼捐这种。凭什么有钱就要捐？如果说到捐，为什么你们不捐，反而要别人捐，很多时候这种人就是见不得别人过得比他好，认为我没有的，别人就要分享给他，这无疑也是一种国民的劣根性，或者说是人的劣根性。这个世界是公平的，你想拿到什么样的东西，就要付出同等价值的东西去交换，而不是在哪里期待着别人会给你无私的捐赠。<br><br><br><br><br><br>—<br><br><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://omvbl46i3.bkt.clouddn.com/17-11-7/41129282.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;昨晚在下班回家，走到小区前面的一家超市面前的时候，突然有一位
      
    
    </summary>
    
      <category term="生活随笔" scheme="https://github.com/itgoyo/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活随笔" scheme="https://github.com/itgoyo/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Putty+Xming在Windows端显示Linux图形化界面GUI</title>
    <link href="https://github.com/itgoyo/2017/11/06/Putty-Xming%E5%9C%A8Windows%E7%AB%AF%E6%98%BE%E7%A4%BALinux%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2GUI.html"/>
    <id>https://github.com/itgoyo/2017/11/06/Putty-Xming在Windows端显示Linux图形化界面GUI.html</id>
    <published>2017-11-06T01:19:04.000Z</published>
    <updated>2017-11-23T13:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Linux配置"><a href="#一、Linux配置" class="headerlink" title="一、Linux配置"></a>一、Linux配置</h3><p>#apt-get install openssh-server</p><h3 id="二、Windows"><a href="#二、Windows" class="headerlink" title="二、Windows"></a>二、Windows</h3><p>下载并安装Xming客户端<br><a href="http://sourceforge.net/projects/xming" target="_blank" rel="external">http://sourceforge.net/projects/xming</a></p><p>完了之后出现sshd的字样表明服务器开启成功。</p><p>安装并启动， 无需配置<br>下载并安装putty<br><a href="http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe" target="_blank" rel="external">http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe</a></p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-11-5/62626614.jpg" alt=""></p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-11-5/90740534.jpg" alt=""></p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-11-5/13122657.jpg" alt=""></p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-11-5/458619.jpg" alt=""></p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-11-5/84274553.jpg" alt=""></p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-11-5/70170489.jpg" alt=""></p><h3 id="三、配置Putty"><a href="#三、配置Putty" class="headerlink" title="三、配置Putty"></a>三、配置Putty</h3><h4 id="首先获取Linux服务器的ip地址"><a href="#首先获取Linux服务器的ip地址" class="headerlink" title="首先获取Linux服务器的ip地址"></a>首先获取Linux服务器的ip地址</h4><p>在终端输入: ifconfig 即可查看。</p><h4 id="填写配置信息"><a href="#填写配置信息" class="headerlink" title="填写配置信息"></a>填写配置信息</h4><p><img src="http://omvbl46i3.bkt.clouddn.com/17-11-5/8035428.jpg" alt=""></p><p>Putty中开启X11支持</p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-11-5/88604763.jpg" alt=""></p><p>Linux里边的ssh文件配置也要打开</p><p>要允许Linux主机上的SSH X转发，查看 /etc/ssh/sshd_config 文件，加入以下一行，</p><p>X11Forwrding yes</p><p>到此配置就结束了，想要测试是否成功的话，可以在终端输入:xclock</p><p>如果出现一个悬浮的时钟则表明配置成功了，或者你可以打开Linux上面的一张图片如果显示也代表成功了，命令如下</p><p>eog xxx.jpg</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Linux配置&quot;&gt;&lt;a href=&quot;#一、Linux配置&quot; class=&quot;headerlink&quot; title=&quot;一、Linux配置&quot;&gt;&lt;/a&gt;一、Linux配置&lt;/h3&gt;&lt;p&gt;#apt-get install openssh-server&lt;/p&gt;
&lt;h3 id
      
    
    </summary>
    
      <category term="Linux" scheme="https://github.com/itgoyo/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://github.com/itgoyo/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Oh-My-Zsh</title>
    <link href="https://github.com/itgoyo/2017/11/03/Oh-My-Zsh.html"/>
    <id>https://github.com/itgoyo/2017/11/03/Oh-My-Zsh.html</id>
    <published>2017-11-03T09:02:15.000Z</published>
    <updated>2017-11-23T13:15:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh my zsh"></a>oh my zsh</h2><ul><li><p>curl or wget should be installed</p></li><li><p>git should be installed</p></li></ul><h4 id="Basic-Installation"><a href="#Basic-Installation" class="headerlink" title="Basic Installation"></a>Basic Installation</h4><p>Oh My Zsh is installed by running one of the following commands in your terminal. You can install this via the command-line with either curl or wget.</p><ul><li>via curl</li></ul><p><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></p><ul><li>via wget</li></ul><p><code>sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;1</code></p><h4 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h4><p>Once you spot a plugin (or several) that you’d like to use with Oh My Zsh, you’ll need to enable them in the .zshrc file. You’ll find the zshrc file in your $HOME directory. Open it with your favorite text editor and you’ll see a spot to list all the plugins you want to load.</p><p>For example, this line might begin to look like this:</p><p><code>plugins=(git bundler osx rake ruby)</code></p><h4 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h4><p>Robby’s theme is the default one. It’s not the fanciest one. It’s not the simplest one. It’s just the right one (for him).</p><p>Once you find a theme that you want to use, you will need to edit the ~/.zshrc file. You’ll see an environment variable (all caps) in there that looks like:</p><p><code>ZSH_THEME=&quot;robbyrussell&quot;</code></p><p>To use a different theme, simply change the value to match the name of your desired theme. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME=&quot;agnoster&quot; # (this is one of the fancy ones)</div><div class="line"># you might need to install a special Powerline font on your console&apos;s host for this to work</div><div class="line"># see https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#agnoster</div></pre></td></tr></table></figure><h3 id="出现乱码解决方式"><a href="#出现乱码解决方式" class="headerlink" title="出现乱码解决方式"></a>出现乱码解决方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">执行以下命令来安装缺失的字体：</div><div class="line">wget https://raw.githubusercontent.com/powerline/powerline/develop/font/10-powerline-symbols.conf</div><div class="line">wget https://raw.githubusercontent.com/powerline/powerline/develop/font/PowerlineSymbols.otf</div><div class="line">sudo mkdir /usr/share/fonts/OTF</div><div class="line">sudo cp 10-powerline-symbols.conf /usr/share/fonts/OTF/</div><div class="line">sudo mv 10-powerline-symbols.conf /etc/fonts/conf.d/</div><div class="line">sudo mv PowerlineSymbols.otf /usr/share/fonts/OTF/</div></pre></td></tr></table></figure><p>Open up a new terminal window and your prompt should look something like this:<br><img src="https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png" alt=""></p><p>In case you did not find a suitable theme for your needs, please have a look at the <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes">wiki</a> for more of them.</p><p>If you’re feeling feisty, you can let the computer select one randomly for you each time you open a new terminal window.</p><p><code>ZSH_THEME=&quot;random&quot; # (...please let it be pie... please be some pie..)</code></p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;oh-my-zsh&quot;&gt;&lt;a href=&quot;#oh-my-zsh&quot; class=&quot;headerlink&quot; title=&quot;oh my zsh&quot;&gt;&lt;/a&gt;oh my zsh&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;curl or wget should be installed&lt;
      
    
    </summary>
    
      <category term="编程相关" scheme="https://github.com/itgoyo/categories/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Program" scheme="https://github.com/itgoyo/tags/Program/"/>
    
  </entry>
  
  <entry>
    <title>Vim的安装与使用</title>
    <link href="https://github.com/itgoyo/2017/11/03/Vim%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.html"/>
    <id>https://github.com/itgoyo/2017/11/03/Vim的安装与使用.html</id>
    <published>2017-11-03T08:55:29.000Z</published>
    <updated>2017-11-23T13:14:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><h4 id="Vim的配置以spf-13为例子"><a href="#Vim的配置以spf-13为例子" class="headerlink" title="Vim的配置以spf-13为例子"></a>Vim的配置以spf-13为例子</h4><p>项目地址:   <a href="https://github.com/spf13/spf13-vim">https://github.com/spf13/spf13-vim</a></p><h4 id="Vim的安装"><a href="#Vim的安装" class="headerlink" title="Vim的安装"></a>Vim的安装</h4><ul><li>Linux, *nix, Mac OSX Installation</li></ul><p>The easiest way to install spf13-vim is to use our automatic installer by simply copying and pasting the following line into a terminal. This will install spf13-vim and backup your existing vim configuration. If you are upgrading from a prior version (before 3.0) this is also the recommended installation.</p><p>Requires Git 1.7+ and Vim 7.3+</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://j.mp/spf13-vim3 -L &gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh</div></pre></td></tr></table></figure><p>If you have a bash-compatible shell you can run the script directly:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh &lt;(curl https://j.mp/spf13-vim3 -L)</div></pre></td></tr></table></figure></p><p>此过程会比较长，包括插件的下载还有安装，这个过程将近1个多小时</p><ul><li>Installing on Windows</li></ul><p>On Windows and *nix Git and Curl are required. Also, if you haven’t done so already, you’ll need to install Vim. The quickest option to install all three dependencies (Git, Curl, Vim and spf13-vim) is via Chocolatey NuGet. After installing Chocolatey, execute the following commands on the command prompt:</p><p>Install with cmd.exe(run as admin mode)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))&quot; &amp;&amp; SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\&gt; choco install spf13-vim</div></pre></td></tr></table></figure><p>一直Y，整个过程大概2h左右</p><h2 id="Vim插件的介绍"><a href="#Vim插件的介绍" class="headerlink" title="Vim插件的介绍"></a>Vim插件的介绍</h2><ul><li><h4 id="Vundle-The-best-plugin-manager"><a href="#Vundle-The-best-plugin-manager" class="headerlink" title="Vundle(The best plugin manager)"></a>Vundle(The best plugin manager)</h4></li></ul><p>Vundle is an excellent system built on the same principles as Pathogen, but with an integrated plugin management system that is Git and Github aware.</p><p>spf13-vim uses the Vundle plugin management system to have a well organized vim directory (Similar to mac’s app folders). Vundle also ensures that the latest versions of your plugins are installed and makes it easy to keep them up to date.</p><ul><li><h4 id="NERDTree-file-navigation"><a href="#NERDTree-file-navigation" class="headerlink" title="NERDTree(file navigation)"></a>NERDTree(file navigation)</h4></li></ul><p>NERDTree is a file explorer plugin that provides “project drawer” functionality to your vim editing. You can learn more about it with :help NERDTree or checkout my post on NERDTree.</p><p>Use <code>Ctrl+e</code> to toggle NERDTree</p><ul><li><h4 id="ctrlp-fast-file-finder"><a href="#ctrlp-fast-file-finder" class="headerlink" title="ctrlp(fast file finder)"></a>ctrlp(fast file finder)</h4></li></ul><p>Ctrlp replaces the Command-T plugin with a 100% viml plugin. It provides an intuitive and fast mechanism to load files from the file system (with regex and fuzzy find), from open buffers, and from recently used files.</p><p>Use <code>Ctrl+p</code> to toggle Ctrlp</p><ul><li><h4 id="neocomplcache-autocomplete"><a href="#neocomplcache-autocomplete" class="headerlink" title="neocomplcache(autocomplete++)"></a>neocomplcache(autocomplete++)</h4></li></ul><p>NeoComplCache is an amazing autocomplete plugin with additional support for snippets. It can complete simulatiously from the dictionary, buffer, omnicomplete and snippets. This is the one true plugin that brings Vim autocomplete on par with the best editors.</p><p>Use <code>Ctrl+n</code> to toggle neocomplcache</p><ul><li><h4 id="Tagbar-tag-generation-and-navigation"><a href="#Tagbar-tag-generation-and-navigation" class="headerlink" title="Tagbar(tag generation and navigation)"></a>Tagbar(tag generation and navigation)</h4></li></ul><p>spf13-vim includes the Tagbar plugin. This plugin requires exuberant-ctags and will automatically generate tags for your open files. It also provides a panel to navigate easily via tags</p><p>Use <code>,tt</code> to toggle neocomplcache</p><h4 id="关于在Mac端ctags无效的解决方法"><a href="#关于在Mac端ctags无效的解决方法" class="headerlink" title="关于在Mac端ctags无效的解决方法"></a>关于在Mac端ctags无效的解决方法</h4><p><a href="https://brew.sh/" target="_blank" rel="external">https://brew.sh/</a></p><p><a href="https://github.com/universal-ctags/ctags">https://github.com/universal-ctags/ctags</a></p><p><a href="https://github.com/universal-ctags/homebrew-universal-ctags">https://github.com/universal-ctags/homebrew-universal-ctags</a></p><hr><p>在Windows端，如果想切换到别的盘符进行操作的话,使用</p><p><code>:NERDTree D:\\</code></p><p>进行目录的跳转</p><hr><h4 id="Preview-To-preview-markdown-format-you-need-to-install-bluecloth-gem"><a href="#Preview-To-preview-markdown-format-you-need-to-install-bluecloth-gem" class="headerlink" title="Preview: To preview markdown format you need to install bluecloth gem"></a>Preview: To preview markdown format you need to install bluecloth gem</h4><p>在使用previewMarkdown的时候出现了<br><code>Preview: To preview markdown format you need to install bluecloth gem</code></p><p>解决方法：</p><ul><li><p><code>sudo gem install redcarpet</code></p></li><li><p><code>sudo gem install bluecloth</code></p></li></ul><h4 id="Linux出现的问题"><a href="#Linux出现的问题" class="headerlink" title="Linux出现的问题"></a>Linux出现的问题</h4><p>can’t find header files for ruby at /usr/lib/ruby/include/ruby.h</p><p>解决方法:sudo apt-get install ruby-dev</p><h3 id="提示找不到tag文件"><a href="#提示找不到tag文件" class="headerlink" title="提示找不到tag文件"></a>提示找不到tag文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">用法:</div><div class="line">    1.生成标签文件(cmd到项目的目录中执行)</div><div class="line">        在当前目录下(运行$提示符后面的命令):</div><div class="line">        $ctags -R .</div><div class="line">      -R表示recursive，递归,为当前目录及其子目录中的c文件生成标签文件。最后一个.表示在当前目录。</div><div class="line">        运行完当前目录会多一个文件tags,就是c标签的索引文件。</div><div class="line">    2.跳转</div><div class="line">        1)用vim打开一个已经建过标签的c文件    </div><div class="line">        2)ctrl+] 找到光标所在位置的标签定义的地方</div><div class="line">        3)ctrl+t 回到跳转之前的标签处</div><div class="line">    3.窗口显示方法</div><div class="line">         命令Tagbar toggle打开相应的方法窗口显示</div><div class="line">    注意：此时运行vim，必须在&quot;tags&quot;文件所在的目录下运行。否则，运行它会找不到&quot;tags&quot;文件，而需要在vim中用&quot;:set tags=&quot;命令设定&quot;tags&quot;文件的路径。对于一个稍微大点的项目，你可能在任何一个目录下打开vim，然而在每个目录下都生成一个tags文件并不 是个好主意，那么如何解决呢？方法是在.vimrc中增加一行：</div><div class="line">        set tags=tags;/</div><div class="line">    这是告诉vim在当前目录找不到tags文件时请到上层目录查找。</div></pre></td></tr></table></figure><h4 id="窗口切换快捷键"><a href="#窗口切换快捷键" class="headerlink" title="窗口切换快捷键"></a>窗口切换快捷键</h4><p><code>Ctrl+w+w</code></p><h4 id="关闭分屏"><a href="#关闭分屏" class="headerlink" title="关闭分屏"></a>关闭分屏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">关闭当前窗口。</div><div class="line">Ctrl+W c</div><div class="line">关闭当前窗口，如果只剩最后一个了，则退出Vim。</div><div class="line">Ctrl+W q</div></pre></td></tr></table></figure><h4 id="打开多个窗口了之后，怎么快速切换"><a href="#打开多个窗口了之后，怎么快速切换" class="headerlink" title="打开多个窗口了之后，怎么快速切换"></a>打开多个窗口了之后，怎么快速切换</h4><p><code>:buffers 列表  :bn下一个 :bp 上一个  :b17</code></p><h4 id="取消查找遗留的边框"><a href="#取消查找遗留的边框" class="headerlink" title="取消查找遗留的边框"></a>取消查找遗留的边框</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set: nohlseach</div></pre></td></tr></table></figure><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vim&quot;&gt;&lt;a href=&quot;#Vim&quot; class=&quot;headerlink&quot; title=&quot;Vim&quot;&gt;&lt;/a&gt;Vim&lt;/h2&gt;&lt;h4 id=&quot;Vim的配置以spf-13为例子&quot;&gt;&lt;a href=&quot;#Vim的配置以spf-13为例子&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Vim" scheme="https://github.com/itgoyo/categories/Vim/"/>
    
    
      <category term="Vim" scheme="https://github.com/itgoyo/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Java多态的理解</title>
    <link href="https://github.com/itgoyo/2017/10/27/Java%E5%A4%9A%E6%80%81%E7%9A%84%E7%90%86%E8%A7%A3.html"/>
    <id>https://github.com/itgoyo/2017/10/27/Java多态的理解.html</id>
    <published>2017-10-27T06:56:56.000Z</published>
    <updated>2017-11-23T13:06:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章是参照博客园的一篇文章<a href="http://www.cnblogs.com/jack204/archive/2012/10/29/2745150.html" target="_blank" rel="external">博文链接</a>来做的笔记。</p><h3 id="什么是多态？"><a href="#什么是多态？" class="headerlink" title="什么是多态？"></a>什么是多态？</h3><p>多态是同一个行为具有多个不同表现形式或形态的能力。<a href="http://www.runoob.com/java/java-polymorphism.html" target="_blank" rel="external">菜鸟教程</a></p><p>多态就是同一个接口，使用不同的实例而执行不同操作，如图所示：</p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-27/8493448.jpg" alt=""></p><p>多态性是对象多种表现形式的体现。</p><blockquote><p>现实中，比如我们按下 F1 键这个动作：</p><ul><li>如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；</li><li>如果当前在 Word 下弹出的就是 Word 帮助；</li><li>在 Windows 下弹出的就是 Windows 帮助和支持。</li></ul></blockquote><p>同一个事件发生在不同的对象上会产生不同的结果。</p><h3 id="多态的优点"><a href="#多态的优点" class="headerlink" title="多态的优点"></a>多态的优点</h3><ol><li>消除类型之间的耦合关系</li><li>可替换性</li><li>可扩充性</li><li>接口性</li><li>灵活性</li><li>简化性</li></ol><h3 id="多态存在的三个必要条件"><a href="#多态存在的三个必要条件" class="headerlink" title="多态存在的三个必要条件"></a>多态存在的三个必要条件</h3><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象</li></ul><p>当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。<br>要想调用父类中被重写的方法，则必须使用关键字super。</p><p>简单的Demo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class A ...&#123;  </div><div class="line">         public String show(D obj)...&#123;  </div><div class="line">                return (&quot;A and D&quot;);  </div><div class="line">         &#125;   </div><div class="line">         public String show(A obj)...&#123;  </div><div class="line">                return (&quot;A and A&quot;);  </div><div class="line">         &#125;   </div><div class="line">&#125;   </div><div class="line">class B extends A...&#123;  </div><div class="line">         public String show(B obj)...&#123;  </div><div class="line">                return (&quot;B and B&quot;);  </div><div class="line">         &#125;  </div><div class="line">         public String show(A obj)...&#123;  </div><div class="line">                return (&quot;B and A&quot;);  </div><div class="line">         &#125;   </div><div class="line">&#125;  </div><div class="line">class C extends B...&#123;&#125;   </div><div class="line">class D extends B...&#123;&#125;</div></pre></td></tr></table></figure></p><p>问题：以下输出结果是什么？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">A a1 = new A();  </div><div class="line">A a2 = new B();  </div><div class="line">B b = new B();  </div><div class="line">C c = new C();   </div><div class="line">D d = new D();   </div><div class="line">System.out.println(a1.show(b));   ①  </div><div class="line">System.out.println(a1.show(c));   ②  </div><div class="line">System.out.println(a1.show(d));   ③  </div><div class="line">System.out.println(a2.show(b));   ④  </div><div class="line">System.out.println(a2.show(c));   ⑤  </div><div class="line">System.out.println(a2.show(d));   ⑥  </div><div class="line">System.out.println(b.show(b));    ⑦  </div><div class="line">System.out.println(b.show(c));    ⑧  </div><div class="line">System.out.println(b.show(d));    ⑨</div></pre></td></tr></table></figure></p><p>答案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">①   A and A</div><div class="line">②   A and A</div><div class="line">③   A and D</div><div class="line">④   B and A</div><div class="line">⑤   B and A</div><div class="line">⑥   A and D</div><div class="line">⑦   B and B</div><div class="line">⑧   B and B</div><div class="line">⑨   A and D</div></pre></td></tr></table></figure></p><p>答案解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1.实例对象为A，参数为对象B，B为A的子类。执行A.class中show(A obj)</div><div class="line">2.同上</div><div class="line">3.实例对象为A，参数为对象D，执行A.class中show(D obj)</div><div class="line">4.实例对象依然为A，参数为B，本应执行A.class中show(A obj)，但是，B.class重写了show(A obj),所以执行B.class show(A obj)</div><div class="line">5.同上</div><div class="line">6.执行A.class show(D obj) B中并没有重写。</div><div class="line">7，8.实例对象为B，参数为B或者B的子类，执行show(B obj)</div><div class="line">9.实例对象为B，参数为D，因为B继承自A，也可以执行A中的show(D obj)</div></pre></td></tr></table></figure></p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文章是参照博客园的一篇文章&lt;a href=&quot;http://www.cnblogs.com/jack204/archive/2012/10/29/2745150.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博文链接&lt;/a&gt;来做的笔记。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="编程相关" scheme="https://github.com/itgoyo/categories/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Program" scheme="https://github.com/itgoyo/tags/Program/"/>
    
      <category term="Java" scheme="https://github.com/itgoyo/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>解决Alfred每次都访问通讯录的问题</title>
    <link href="https://github.com/itgoyo/2017/10/22/%E8%A7%A3%E5%86%B3Alfred%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%AE%BF%E9%97%AE%E9%80%9A%E8%AE%AF%E5%BD%95%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <id>https://github.com/itgoyo/2017/10/22/解决Alfred每次都访问通讯录的问题.html</id>
    <published>2017-10-22T05:30:02.000Z</published>
    <updated>2017-11-23T13:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>打开终端或者iterm2，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo codesign -f -d -s - /Applications/Alfred\ 3.app/Contents/Frameworks/Alfred\ Framework.framework/Versions/A/Alfred\ Framework</div></pre></td></tr></table></figure></p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h3&gt;&lt;p&gt;打开终端或者iterm2，输入&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="Mac" scheme="https://github.com/itgoyo/categories/Mac/"/>
    
    
      <category term="Mac" scheme="https://github.com/itgoyo/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>常用的Markdown编辑器推荐</title>
    <link href="https://github.com/itgoyo/2017/10/15/%E5%B8%B8%E7%94%A8%E7%9A%84Markdown%E7%BC%96%E8%BE%91%E5%99%A8%E6%8E%A8%E8%8D%90.html"/>
    <id>https://github.com/itgoyo/2017/10/15/常用的Markdown编辑器推荐.html</id>
    <published>2017-10-15T03:43:47.000Z</published>
    <updated>2017-11-23T13:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎关注本人Gtihub:<a href="https://github.com/itgoyo/">itgoyo</a></p><h3 id="MarkdownPad"><a href="#MarkdownPad" class="headerlink" title="MarkdownPad"></a>MarkdownPad</h3><p><a href="http://www.markdownpad.com/" target="_blank" rel="external">官网</a></p><ul><li>Windows</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/51474730.jpg" alt=""></p><h3 id="Cmd-Markdown"><a href="#Cmd-Markdown" class="headerlink" title="Cmd Markdown"></a>Cmd Markdown</h3><p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">官网</a></p><ul><li>Windows</li><li>Linux</li><li>Web</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/76033690.jpg" alt=""></p><h3 id="Dillinger"><a href="#Dillinger" class="headerlink" title="Dillinger"></a>Dillinger</h3><p><a href="http://dillinger.io/" target="_blank" rel="external">官网</a></p><ul><li>Web</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/40454829.jpg" alt=""></p><h3 id="MaHua"><a href="#MaHua" class="headerlink" title="MaHua"></a>MaHua</h3><p><a href="http://mahua.jser.me/" target="_blank" rel="external">官网</a></p><ul><li>Web</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/8176719.jpg" alt=""></p><h3 id="马克飞象"><a href="#马克飞象" class="headerlink" title="马克飞象"></a>马克飞象</h3><p><a href="https://maxiang.io/" target="_blank" rel="external">官网</a></p><ul><li>Web</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/77097295.jpg" alt=""></p><h3 id="小书匠编辑器"><a href="#小书匠编辑器" class="headerlink" title="小书匠编辑器"></a>小书匠编辑器</h3><p><a href="http://soft.xiaoshujiang.com/" target="_blank" rel="external">官网</a></p><ul><li>Mac</li><li>Windows</li><li>Linux</li><li>Web</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/84080395.jpg" alt=""></p><h3 id="SublimeText"><a href="#SublimeText" class="headerlink" title="SublimeText"></a>SublimeText</h3><p><a href="http://www.sublimetext.com/" target="_blank" rel="external">官网</a></p><ul><li>Mac</li><li>Windows</li><li>Linux</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/47793703.jpg" alt=""></p><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><p><a href="http://atom.io/" target="_blank" rel="external">官网</a></p><ul><li>Mac</li><li>Windows</li><li>Linux</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/56302560.jpg" alt=""></p><h3 id="Smark"><a href="#Smark" class="headerlink" title="Smark"></a>Smark</h3><p><a href="https://gitee.com/elerao/Smark" target="_blank" rel="external">官网</a></p><ul><li>Windows</li><li>Linux</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/22986115.jpg" alt=""></p><h3 id="MdCharm"><a href="#MdCharm" class="headerlink" title="MdCharm"></a>MdCharm</h3><p><a href="http://www.mdcharm.com/" target="_blank" rel="external">官网</a></p><ul><li>Windows</li><li>Linux</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/8176719.jpg" alt=""></p><h3 id="Miu"><a href="#Miu" class="headerlink" title="Miu"></a>Miu</h3><p><a href="https://github.com/egoist/Miu?utm_source=next.36kr.com">官网</a></p><ul><li>Windows</li></ul><h3 id="GitBook-Editor"><a href="#GitBook-Editor" class="headerlink" title="GitBook Editor"></a>GitBook Editor</h3><p><a href="https://www.gitbook.com/editor/" target="_blank" rel="external">官网</a></p><ul><li>Mac</li><li>Windows</li><li>Linux</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/90925923.jpg" alt=""></p><h3 id="Mou"><a href="#Mou" class="headerlink" title="Mou"></a>Mou</h3><p><a href="http://25.io/mou/" target="_blank" rel="external">官网</a></p><ul><li>Mac</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/50682807.jpg" alt=""></p><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p><a href="https://typora.io/" target="_blank" rel="external">官网</a></p><ul><li>Mac</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/85888039.jpg" alt=""></p><h3 id="Byword"><a href="#Byword" class="headerlink" title="Byword"></a>Byword</h3><p><a href="https://bywordapp.com/" target="_blank" rel="external">官网</a></p><ul><li>Mac<br><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/54762275.jpg" alt=""></li></ul><h3 id="Ulysses"><a href="#Ulysses" class="headerlink" title="Ulysses"></a>Ulysses</h3><p><a href="http://www.ulyssesapp.com/" target="_blank" rel="external">官网</a></p><ul><li>Mac</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/45071409.jpg" alt=""></p><h3 id="Typed"><a href="#Typed" class="headerlink" title="Typed"></a>Typed</h3><p><a href="https://www.realmacsoftware.com/" target="_blank" rel="external">官网</a></p><ul><li>Mac</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/72249745.jpg" alt=""></p><h3 id="Editor-md"><a href="#Editor-md" class="headerlink" title="Editor.md"></a>Editor.md</h3><p><a href="https://pandao.github.io/editor.md/" target="_blank" rel="external">官网</a></p><ul><li>Mac</li><li>Windows</li><li>Web</li></ul><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/63165225.jpg" alt=""></p><p><strong>发现更多有趣的好玩的，欢迎关注我的公众号：toolpool</strong></p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-10-11/94979995.jpg" alt=""></p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      常用的Markdown编辑器推荐
    
    </summary>
    
      <category term="开发工具" scheme="https://github.com/itgoyo/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
      <category term="Markdown" scheme="https://github.com/itgoyo/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>SublimeText3怎么修改侧边栏的颜色和内容一致</title>
    <link href="https://github.com/itgoyo/2017/09/03/Text3%E6%80%8E%E4%B9%88%E4%BF%AE%E6%94%B9%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%9A%84%E9%A2%9C%E8%89%B2%E5%92%8C%E5%86%85%E5%AE%B9%E4%B8%80%E8%87%B4.html"/>
    <id>https://github.com/itgoyo/2017/09/03/Text3怎么修改侧边栏的颜色和内容一致.html</id>
    <published>2017-09-03T02:04:58.000Z</published>
    <updated>2017-11-23T13:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>sublime text3刚安装完成之后打开文件夹显示的样式如下</p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-9-3/38900987.jpg" alt=""></p><p>这样子看起来眼睛会很难受,那么我们怎样才能使得引导菜单的颜色和编辑器底色一样呢?</p><p>解决方法如下:</p><p>Ctrl+Shift+P -&gt; install -&gt; 搜索安装包SyncedSidebarBg，自动同步侧边栏底色为编辑窗口底色。<br>PS：有时改完后侧边栏颜色没变化，不知什么原因，打开包控制，然后列一下已安装包就刷新了。</p><p>安装完成之后,效果是这样子的:</p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-9-3/5379561.jpg" alt=""></p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sublime text3刚安装完成之后打开文件夹显示的样式如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://omvbl46i3.bkt.clouddn.com/17-9-3/38900987.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样子看起来眼睛会很难受,那么我们怎
      
    
    </summary>
    
      <category term="编程相关" scheme="https://github.com/itgoyo/categories/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Program" scheme="https://github.com/itgoyo/tags/Program/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu扁平化主题Flatabulous安装教程</title>
    <link href="https://github.com/itgoyo/2017/09/03/Ubuntu%E6%89%81%E5%B9%B3%E5%8C%96%E4%B8%BB%E9%A2%98Flatabulous%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.html"/>
    <id>https://github.com/itgoyo/2017/09/03/Ubuntu扁平化主题Flatabulous安装教程.html</id>
    <published>2017-09-03T01:25:48.000Z</published>
    <updated>2017-11-23T13:14:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道大家对Ubuntu自带的主题效果怎么看，反正我自己觉得自带的主题看起来挺难受的，所以网上找了许多法子，终于把主题美化成自己喜欢的样子。</p><p>Flatabulous: 一个超好看的扁平化 Ubuntu 桌面主题</p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-9-3/16411938.jpg" alt=""></p><p>安装此主题步骤：</p><h4 id="一、TweeakTool"><a href="#一、TweeakTool" class="headerlink" title="一、TweeakTool"></a>一、TweeakTool</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:tualatrix/ppa  </div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install ubuntu-tweak</div></pre></td></tr></table></figure><p>该工具是用来设置各种Ubuntu偏好使用的</p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-9-3/47946394.jpg" alt=""></p><h4 id="二、安装Flatabulous"><a href="#二、安装Flatabulous" class="headerlink" title="二、安装Flatabulous"></a>二、安装Flatabulous</h4><p><a href="https://github.com/anmoljagetia/Flatabulous/archive/master.zip">下载地址</a><br>或者直接在Github上 Clone下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/anmoljagetia/Flatabulous</div></pre></td></tr></table></figure></p><p>把下载下来的zip包解压，移动到/usr/share/themes/下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv Flatabulous-master /usr/share/themes/</div></pre></td></tr></table></figure><h4 id="三、安装扁平化图标ultra-flat-icons"><a href="#三、安装扁平化图标ultra-flat-icons" class="headerlink" title="三、安装扁平化图标ultra-flat-icons"></a>三、安装扁平化图标ultra-flat-icons</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:noobslab/icons</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install ultra-flat-icons</div></pre></td></tr></table></figure><p>或者到<a href="http://ppa.launchpad.net/noobslab/icons/ubuntu/pool/main/u/ultra-flat-icons/" target="_blank" rel="external">http://ppa.launchpad.net/noobslab/icons/ubuntu/pool/main/u/ultra-flat-icons/</a>自己下载安装</p><h4 id="注意，在Ubuntu15-04会提示找不到ultra-flat-icons这个包"><a href="#注意，在Ubuntu15-04会提示找不到ultra-flat-icons这个包" class="headerlink" title="注意，在Ubuntu15.04会提示找不到ultra-flat-icons这个包"></a>注意，在Ubuntu15.04会提示找不到ultra-flat-icons这个包</h4><p>解决方法：在软件和更新中把ultra-flat-icons源中的vivid改成trusty，即可安装成功，最后记得改回来过</p><p>或者你也可以运行sudo apt-get install ultra-flat-icons-orange或者 sudo apt-get install ultra-flat-icons-green</p><p>根据你自己喜欢的颜色选择。</p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-9-3/90967736.jpg" alt=""></p><p>最后完成以上设置的效果图</p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-9-3/47946394.jpg" alt=""></p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不知道大家对Ubuntu自带的主题效果怎么看，反正我自己觉得自带的主题看起来挺难受的，所以网上找了许多法子，终于把主题美化成自己喜欢的样子。&lt;/p&gt;
&lt;p&gt;Flatabulous: 一个超好看的扁平化 Ubuntu 桌面主题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://
      
    
    </summary>
    
      <category term="Linux" scheme="https://github.com/itgoyo/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://github.com/itgoyo/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>决策</title>
    <link href="https://github.com/itgoyo/2017/09/02/%E5%86%B3%E7%AD%96.html"/>
    <id>https://github.com/itgoyo/2017/09/02/决策.html</id>
    <published>2017-09-02T12:16:15.000Z</published>
    <updated>2017-11-23T13:14:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么是我们一生中耗时最多、最让人纠结的事?是做出大大小小的决策。</p><p>我们的生活无时无刻的都充满了各种决策，比如午餐我要吃什么，到了商场我要买什么，今天衣服穿什么等等。</p><p>我们时常陷入个人主观感情或者是非理性感情中做出错误的决定，以致于做出让我们后悔终生的判断。</p><p>有一个很有趣的问题“<strong>扎克伯格为什么总是穿同一件衣服？</strong>”</p><p>其实扎克伯格的衣柜里的衣服是这样子的</p><p><img src="http://omvbl46i3.bkt.clouddn.com/17-9-2/51906861.jpg" alt=""></p><p> 而扎克伯格自己的回答则是</p><p> “<strong>我想通过清空我的生活来让我在除了如何更好服务社会这件事情以外的任何事情上都做尽可能少的决策。</strong>”</p><p> 作为一个富豪，扎克伯格不是为了有趣才每天穿同一款式的衣服，他这样做确实是行之有效,每一个决定都会减少我们的意志力“血槽”。<strong>每一个决定都会让我们少一丝创造力、控制力和专注力</strong>。</p><p> 引用一位名人的话</p><blockquote><p>“我们必须尽早将尽可能多且有用的行动变成我们自发的和习以为常的决策……我们通过毫不费力的下意识行为解决的日常细节越多，我们就能解放越多应该用来处理高级事务的精神意志力。”——威廉·詹姆斯</p></blockquote><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      决策
    
    </summary>
    
      <category term="生活随笔" scheme="https://github.com/itgoyo/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活随笔" scheme="https://github.com/itgoyo/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Android开发工具大全</title>
    <link href="https://github.com/itgoyo/2017/07/29/Android%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%A4%A7%E5%85%A8.html"/>
    <id>https://github.com/itgoyo/2017/07/29/Android开发工具大全.html</id>
    <published>2017-07-29T06:35:32.000Z</published>
    <updated>2017-11-23T13:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AndroidDevTools"><a href="#AndroidDevTools" class="headerlink" title="AndroidDevTools"></a>AndroidDevTools</h1><p><img src="https://badges.gitter.im/Join%20Chat.svg" alt=""></p><p><strong>Android Dev Tools官网地址：<a href="http://www.androiddevtools.cn" target="_blank" rel="external">www.androiddevtools.cn</a></strong></p><p>收集整理Android开发所需的Android SDK、开发中用到的工具、Android开发教程、Android设计规范，免费的设计素材等。</p><p>欢迎大家推荐自己在Android开发过程中用的好用的工具、学习开发教程、用到设计素材，欢迎Star、Fork 😄。</p><h1 id="Android-Tools"><a href="#Android-Tools" class="headerlink" title="Android Tools"></a>Android Tools</h1><hr><h4 id="Android-SDK在线更新镜像服务器"><a href="#Android-SDK在线更新镜像服务器" class="headerlink" title="Android SDK在线更新镜像服务器"></a>Android SDK在线更新镜像服务器</h4><ol><li><p>中国科学院开源协会镜像站地址:</p><ul><li><p>IPV4/IPV6: <code>mirrors.opencas.cn</code> 端口：80</p></li><li><p>IPV4/IPV6: <code>mirrors.opencas.org</code> 端口：80</p></li><li><p>IPV4/IPV6: <code>mirrors.opencas.ac.cn</code> 端口：80</p></li></ul></li></ol><ol><li><p>上海GDG镜像服务器地址:</p><ul><li><code>sdk.gdgshanghai.com</code>  端口：8000</li></ul></li><li><p>北京化工大学镜像服务器地址:</p><ul><li><p>IPv4: <code>ubuntu.buct.edu.cn/</code> 端口：80</p></li><li><p>IPv4: <code>ubuntu.buct.cn/</code>   端口：80</p></li><li><p>IPv6: <code>ubuntu.buct6.edu.cn/</code>  端口：80</p></li></ul></li><li><p>大连东软信息学院镜像服务器地址:</p><ul><li><code>mirrors.neusoft.edu.cn</code> 端口：80</li></ul></li><li><p>腾讯Bugly 镜像:</p><ul><li><p><code>android-mirror.bugly.qq.com</code> 端口：8080</p><p>腾讯镜像使用方法: <a href="http://android-mirror.bugly.qq.com:8080/include/usage.html" target="_blank" rel="external">http://android-mirror.bugly.qq.com:8080/include/usage.html</a></p></li></ul></li></ol><p><strong>使用方法</strong>：</p><ol><li><p>启动 Android SDK Manager ，打开主界面，依次选择『<strong>Tools</strong>』、『<strong>Options…</strong>』，弹出『<strong>Android SDK Manager - Settings</strong>』窗口；</p></li><li><p>在『<strong>Android SDK Manager - Settings</strong>』窗口中，在『<strong>HTTP Proxy Server」和「HTTP Proxy Port</strong>』输入框内填入上面镜像服务器地址(<strong>不包含http://</strong>，如下图)和端口，并且选中『<strong>Force https://… sources to be fetched using http://…</strong>』复选框。设置完成后单击『<strong>Close</strong>』按钮关闭『<strong>Android SDK Manager - Settings</strong>』窗口返回到主界面；</p></li><li><p>依次选择『<strong>Packages</strong>』、『<strong>Reload</strong>』。</p></li></ol><p><img src="http://omvbl46i3.bkt.clouddn.com/17-7-29/26741829.jpg" alt=""></p><h4 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h4><blockquote style="color: gray"><br>                        <strong style="color: red">注意:</strong>以下 Android Studio 下载链接全是 <code>dl.google.com</code> 开头的官方下载，无需tizi，<strong style="color: red">建议用浏览器直接从官方原始链接下载，不要用迅雷下载、不要用迅雷下载、不要用迅雷下载</strong>，重要的事情说三遍，避免类似<a href="https://www.zhihu.com/question/35721299" target="_blank" rel="external">XCodeGhost</a>的事件！！！<br>                    </blockquote><table><thead><tr><th style="text-align:center">版本号</th><th style="text-align:center">Windows</th><th style="text-align:center">Mac OSX</th><th style="text-align:center">Linux</th><th style="text-align:left">SHA-1校验码</th><th style="text-align:center">官方SHA-1校验码截图</th></tr></thead><tbody><tr><td style="text-align:center">2.1.3 正式版</td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/install/2.1.3.0/android-studio-bundle-143.3101438-windows.exe" target="_blank" rel="external">下载 (推荐)</a> <br> <a href="https://dl.google.com/dl/android/studio/ide-zips/2.1.3.0/android-studio-ide-143.3101438-windows.zip" target="_blank" rel="external">下载 (不含SDK Tools)</a> <br> <a href="https://dl.google.com/dl/android/studio/install/2.1.3.0/android-studio-ide-143.3101438-windows.exe" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/install/2.1.3.0/android-studio-ide-143.3101438-mac.dmg" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/ide-zips/2.1.3.0/android-studio-ide-143.3101438-linux.zip" target="_blank" rel="external">下载</a></td><td style="text-align:left">Win: 10d319c772b80f3cb0cde952451af8429ea1b68b <br> 43f84de7e61f37880a126c3d567b7fa6cb90c90e <br> 8ad212c55c7f4dc7ab490e4b7e77ec48001ae224 <br> Mac: 06166759b0e1e1ee91a147dcf5227d897a184277 <br> Linux: 8729e6f2f1fa58f04df9f8d1caac2f5be9dfc549</td><td style="text-align:center"><a href="http://ww2.sinaimg.cn/large/8a41f469gw1f6ve98yjtxj21kw16baos.jpg" target="_blank" rel="external">查看</a></td></tr><tr><td style="text-align:center">2.2 Beta</td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/ide-zips/2.2.0.7/android-studio-ide-145.3128856-windows.zip" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/ide-zips/2.2.0.7/android-studio-ide-145.3128856-mac.zip" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/ide-zips/2.2.0.7/android-studio-ide-145.3128856-linux.zip" target="_blank" rel="external">下载</a></td><td style="text-align:left">Win: 7d2c9861e90dc985b1e6ba78ebd8497b610a8620 <br> Mac:050a443ffee51922eabddbcd260c845a8e06e4a9 <br> Linux: bafb5d7029d2678e8274e24da1c7ce0a00f3a644</td><td style="text-align:center"><a href="http://ww1.sinaimg.cn/large/8a41f469gw1f6ve698vw9j21ih1304jw.jpg" target="_blank" rel="external">查看</a></td></tr><tr><td style="text-align:center">2.2 Preview7</td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/ide-zips/2.2.0.6/android-studio-ide-145.3111935-windows.zip" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/ide-zips/2.2.0.6/android-studio-ide-145.3111935-mac.zip" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/ide-zips/2.2.0.6/android-studio-ide-145.3111935-linux.zip" target="_blank" rel="external">下载</a></td><td style="text-align:left">Win: e6ea4c9d9bf4ae46dbea82e3cc5638fd93194c33 <br> Mac: 56327a0f97d999a6b7a15f3e9e513aa42881c989 <br> Linux: b85c4e27401f7f18af19e39e453cca8575041dbb</td><td style="text-align:center"><a href="http://ww2.sinaimg.cn/large/8a41f469gw1f6ve98yjtxj21kw16baos.jpg" target="_blank" rel="external">查看</a></td></tr><tr><td style="text-align:center">2.1.2 正式版</td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/install/2.1.2.0/android-studio-bundle-143.2915827-windows.exe" target="_blank" rel="external">下载(推荐)</a> <br> <a href="https://dl.google.com/dl/android/studio/ide-zips/2.1.2.0/android-studio-ide-143.2915827-windows.zip" target="_blank" rel="external">下载(不含SDK Tools)</a> <br> <a href="https://dl.google.com/dl/android/studio/install/2.1.2.0/android-studio-ide-143.2915827-windows.exe" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/install/2.1.2.0/android-studio-ide-143.2915827-mac.dmg" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="https://dl.google.com/dl/android/studio/ide-zips/2.1.2.0/android-studio-ide-143.2915827-linux.zip" target="_blank" rel="external">下载</a></td><td style="text-align:left">Win: 10d319c772b80f3cb0cde952451af8429ea1b68b <br> 43f84de7e61f37880a126c3d567b7fa6cb90c90e <br> 8ad212c55c7f4dc7ab490e4b7e77ec48001ae224 <br> Mac: <br> Linux:</td><td style="text-align:center"><a href="http://ww4.sinaimg.cn/large/8a41f469gw1f6ve8k9nkij21kw15316t.jpg" target="_blank" rel="external">查看</a></td></tr></tbody></table><h4 id="SDK-Tools"><a href="#SDK-Tools" class="headerlink" title="SDK Tools"></a>SDK Tools</h4><table><thead><tr><th style="text-align:left">版本号</th><th style="text-align:center">Windows</th><th style="text-align:left">Mac OSX</th><th style="text-align:center">Linux</th><th style="text-align:left">SHA-1校验码</th><th style="text-align:center">官方SHA-1校验码截图</th></tr></thead><tbody><tr><td style="text-align:left">24.4.1</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i5xug3j" target="_blank" rel="external">installer_r24.4.1-windows.exe</a> <a href="http://pan.baidu.com/s/1kVjIPCV" target="_blank" rel="external">android-sdk_r24.4.1-windows.zip</a></td><td style="text-align:left"><a href="http://pan.baidu.com/s/1nuWN7V7" target="_blank" rel="external">android-sdk_r24.4.1-macosx.zip</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o8iqMQQ" target="_blank" rel="external">android-sdk_r24.4.1-linux.tgz</a></td><td style="text-align:left">Win:f9b59d72413649d31e633207e31f456443e7ea0b <br>66b6a6433053c152b22bf8cab19c0f3fef4eba49 <br> Mac: 85a9cccb0b1f9e6f1f616335c5f07107553840cd<br> Linux: 725bb360f0f7d04eaccff5a2d57abdd49061326d</td><td style="text-align:center"><a href="http://ww2.sinaimg.cn/large/8a41f469jw1f2ng43mgnhj21kw0fmwhi.jpg" target="_blank" rel="external">查看</a></td></tr><tr><td style="text-align:left">24.3.4</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQppdPC" target="_blank" rel="external">installer_r24.3.4-windows.exe</a> <a href="http://pan.baidu.com/s/1mg08f2K" target="_blank" rel="external">android-sdk_r24.3.4-windows.zip</a></td><td style="text-align:left"><a href="http://pan.baidu.com/s/1dDlTqBB" target="_blank" rel="external">android-sdk_r24.3.4-macosx.zip</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gdsALt5" target="_blank" rel="external">android-sdk_r24.3.4-linux.tgz</a></td><td style="text-align:left">Win: 094dd45f98a31f839feae898b48f23704f2878dd <br> 4a8718fb4a2bf2128d34b92f23ddd79fc65839e7 <br> Mac: 128f10fba668ea490cc94a08e505a48a608879b9 <br> Linux: fb293d7bca42e05580be56b1adc22055d46603dd</td><td style="text-align:center"><a href="http://ww1.sinaimg.cn/large/8a41f469gw1ewbnhql68uj21k20jkjw4.jpg" target="_blank" rel="external">查看</a></td></tr></tbody></table><h4 id="SDK-Platform-Tools"><a href="#SDK-Platform-Tools" class="headerlink" title="SDK Platform-Tools"></a>SDK Platform-Tools</h4><p>这是 adb, fastboot 等工具包。把解压出来的 <code>platform-tools</code> 文件夹放在 android sdk 根目录下，并把 <code>adb</code>所在的目录添加到系统 <code>PATH</code> 路径里，即可在命令行里直接访问了 adb, fastboot 等工具。</p><table><thead><tr><th style="text-align:left">版本号</th><th style="text-align:center">Windows</th><th style="text-align:left">Mac OSX</th><th style="text-align:center">Linux</th></tr></thead><tbody><tr><td style="text-align:left">platform-tools-r22</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1sj4ZfTb" target="_blank" rel="external">platform-tools_r22-windows.zip</a></td><td style="text-align:left"><a href="http://pan.baidu.com/s/1jG3l6Ea" target="_blank" rel="external">platform-tools_r22-mac.zip</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0GUTxA" target="_blank" rel="external">platform-tools_r22-linux.zip</a></td></tr><tr><td style="text-align:left">platform-tools-r21</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gdF1fkZ" target="_blank" rel="external">platform-tools_r21-windows.zip</a></td><td style="text-align:left"><a href="http://pan.baidu.com/s/1dDu6xC9" target="_blank" rel="external">platform-tools_r21-mac.zip</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dDAL25j" target="_blank" rel="external">platform-tools_r21-linux.zip</a></td></tr><tr><td style="text-align:left">platform-tools-r20</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntHqLZj" target="_blank" rel="external">platform-tools_r20-windows.zip</a></td><td style="text-align:left"><a href="http://pan.baidu.com/s/1gdy6fzP" target="_blank" rel="external">platform-tools_r20-mac.zip</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/173KQi" target="_blank" rel="external">platform-tools_r20-linux.zip</a></td></tr></tbody></table><h3 id="Build-Tools"><a href="#Build-Tools" class="headerlink" title="Build-Tools"></a>Build-Tools</h3><p>这是Android开发所需的Build-Tools，下载并解压后，将解压出的整个文件夹复制或者移动到 <code>your sdk 路径/build-tools</code> 文件夹即可。</p><table><thead><tr><th style="text-align:center">版本号</th><th style="text-align:center">Windows</th><th style="text-align:center">Mac OSX</th><th style="text-align:center">Linux</th></tr></thead><tbody><tr><td style="text-align:center">22.0.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3kqFHV" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGquuqU" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dDdDne5" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:center">21.1.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqH1pZY" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hq1mml2" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">21.1.1</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgzFXW0" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i367FTz" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">21.1.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJ3DCGN" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqIfeCW" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">21.0.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kTDpnt9" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dDCf9TZ" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">21.0.1</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQreI6A" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQCd5YE" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">21.0.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3y0mKd" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3oWM01" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">20.0.0</td><td style="text-align:center"></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0AfIOK" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">19.1.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1nttAyhV" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1nt2vM21" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">19.0.3</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1qWCzdwC" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hq7VIgG" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">19.0.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntl0Qnf" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1xY7PO" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">19.0.1</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJ1BJrt" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o65bAwa" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">19.0.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6I8NBs" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0dBDvE" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h4><p>这是Android开发所需的sdk，下载并解压后，将解压出的整个文件夹复制或者移动到<code>your sdk 路径/platforms</code>文件夹，然后打开SDK Manager，打开<code>Tools(工具)</code>菜单选择<code>Options(选项)</code>菜单项打开Android SDK Manager Setting对话框，点击<code>Clear Cache(清除缓存)</code>按钮，然后重启Eclipse(或Android Studio)和SDK Manager。</p><table><thead><tr><th style="text-align:left">系统版本号</th><th style="text-align:center">Windows</th><th style="text-align:center">Mac OSX</th><th style="text-align:center">Linux</th></tr></thead><tbody><tr><td style="text-align:left">android 5.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i33Puo1" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6v7E2I" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6v7E2I" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android L Rev3</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1u8dhc" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jG1duN8" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jG1duN8" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android L</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3tDDvZ" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntHmhYx" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntHmhYx" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.4W</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eYPGE" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1nt5GKWh" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1nt5GKWh" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.4.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQf8ZgI" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c03XoL6" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c03XoL6" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.3</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o65bfV8" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bn1tNm3" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bn1tNm3" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.2.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgICw9E" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJJSlfl" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJJSlfl" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.1.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1nt3bpI5" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kTA6V8z" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kTA6V8z" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.0.3</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJoegpd" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGzdDxc" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGzdDxc" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0H6Ld2" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqwzPTa" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqwzPTa" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 3.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGLvX6A" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1qWqH9Q8" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1qWqH9Q8" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 3.1</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJ0naTP" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jG62PSy" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jG62PSy" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 3.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0hi7Ck" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bn2Duub" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bn2Duub" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 2.3.3</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ngubc" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGge2bk" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGge2bk" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 2.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1qW8YzY8" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntmJVmD" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntmJVmD" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="SDK-System-images"><a href="#SDK-System-images" class="headerlink" title="SDK System images"></a>SDK System images</h4><p>这是在创建模拟器时需要的system image，也就是在创建模拟器时<code>CPU/ABI</code>项需要选择的，下载并解压后，将解压出的整个文件夹复制或者移动到<code>your sdk 路径/system-images</code>文件夹下即可， 如果没有<code>system-images</code>目录就先创建此文件夹，然后打开SDK Manager，打开<code>Tools(工具)</code>菜单选择<code>Options(选项)</code>菜单项打开Android SDK Manager Setting对话框，点击<code>Clear Cache(清除缓存)</code>按钮，然后重启Eclipse(或Android Studio)和SDK Manager。</p><table><thead><tr><th style="text-align:left">系统版本号</th><th style="text-align:center">Windows</th><th style="text-align:center">Mac OSX</th><th style="text-align:center">Linux</th></tr></thead><tbody><tr><td style="text-align:left">android 5.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntwpDQL" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1D7glC" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1D7glC" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android L</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqIcqhA" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntFQlRV" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntFQlRV" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.4W</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgJVZfE" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1GmAE6" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1GmAE6" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.4.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3Jwhed" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1qW0QWdm" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1qW0QWdm" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.3</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1guLaQ" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJPp6dX" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJPp6dX" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.2.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJO99hD" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kTyZo27" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kTyZo27" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.1.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1nMr4E" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kT2xdxd" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kT2xdxd" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.0.3</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3Fsx6H" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gdnCh2b" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gdnCh2b" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJzIXZl" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqoWcNM" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqoWcNM" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="GoogleMap-APIs-SDK"><a href="#GoogleMap-APIs-SDK" class="headerlink" title="GoogleMap APIs SDK"></a>GoogleMap APIs SDK</h4><p>这是GoogleMap APIs SDK，下载并解压后，将解压出的整个文件夹复制或者移动到<code>your sdk 路径/add-ons</code>文件夹下，然后打开SDK Manager，打开<code>Tools(工具)</code>菜单选择<code>Options(选项)</code>菜单项打开Android SDK Manager Setting对话框，点击<code>Clear Cache(清除缓存)</code>按钮，然后重启Eclipse(或Android Studio)和SDK Manager。</p><table><thead><tr><th style="text-align:left">系统版本号</th><th style="text-align:center">Windows</th><th style="text-align:center">Mac OSX</th><th style="text-align:center">Linux</th></tr></thead><tbody><tr><td style="text-align:left">android 4.4.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bno0mFt" target="_blank" rel="external">下载ARM版</a> <a href="http://pan.baidu.com/s/1jGgKyZc" target="_blank" rel="external">下载x86版</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bngsIkB" target="_blank" rel="external">下载ARM版</a> <a href="http://pan.baidu.com/s/1eQDwCpG" target="_blank" rel="external">下载x86版</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bngsIkB" target="_blank" rel="external">下载ARM版</a> <a href="http://pan.baidu.com/s/1eQDwCpG" target="_blank" rel="external">下载x86版</a></td></tr><tr><td style="text-align:left">android 4.3</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bnb9at5" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gdJ0mqR" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gdJ0mqR" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.2.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGl4hZw" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dDmurr7" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dDmurr7" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.1.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntK9Urf" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgIAcpa" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgIAcpa" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.0.3</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bnEiHiB" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqBWAIo" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqBWAIo" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gd68WtP" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqBWAIo" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqBWAIo" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 3.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6Dgtse" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gdf49Jt" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gdf49Jt" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 3.1</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6Dgtse" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGBS4rO" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGBS4rO" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 3.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0CKIFA" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0iY68w" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0iY68w" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 2.3.3</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqHwsHA" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dDvhHOt" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dDvhHOt" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 2.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1qWJNPyk" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQEc8SU" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQEc8SU" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Google-Glass-SDK"><a href="#Google-Glass-SDK" class="headerlink" title="Google Glass SDK"></a>Google Glass SDK</h4><p>这是GDK，下载并解压后，将解压出的整个文件夹复制或者移动到<code>your sdk 路径/add-ons</code>文件夹下，然后打开SDK Manager，打开<code>Tools(工具)</code>菜单选择<code>Options(选项)</code>菜单项打开Android SDK Manager Setting对话框，点击<code>Clear Cache(清除缓存)</code>按钮，然后重启Eclipse(或Android Studio)和SDK Manager。</p><table><thead><tr><th style="text-align:left">系统版本</th><th style="text-align:center">Windows</th><th style="text-align:center">Mac OSX</th><th style="text-align:center">Linux</th></tr></thead><tbody><tr><td style="text-align:left">android 4.4.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1fENeu" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQpGaA2" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQpGaA2" target="_blank" rel="external">下载</a></td></tr><tr><td style="text-align:left">android 4.0.3</td><td style="text-align:center"></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqikzUs" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Google-TV-Addon"><a href="#Google-TV-Addon" class="headerlink" title="Google TV Addon"></a>Google TV Addon</h4><p>这是Google TV Addon，下载并解压后，将解压出的整个文件夹复制或者移动到<code>your sdk 路径/add-ons</code>文件夹，然后打开SDK Manager，打开<code>Tools(工具)</code>菜单选择<code>Options(选项)</code>菜单项打开Android SDK Manager Setting对话框，点击<code>Clear Cache(清除缓存)</code>按钮，然后重启Eclipse(或Android Studio)和SDK Manager。</p><table><thead><tr><th style="text-align:left">系统版本</th><th style="text-align:center">Windows</th><th style="text-align:center">Mac OSX</th><th style="text-align:center">Linux</th></tr></thead><tbody><tr><td style="text-align:left">android 3.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1qWLPFfm" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQFy1KA" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQFy1KA" target="_blank" rel="external">下载</a></td></tr></tbody></table><p>####Android Framework Source Code<br>这是Android Framework Source Code，下载并解压后，将解压出的整个文件夹复制或者移动到<code>your sdk 路径/sources</code>文件夹下，然后重启Eclipse(或Android Studio)，这样当你在Eclipse里面按住<code>Ctrl</code>键点击某个系统类时就可以打开该类的源码文件查看源码了。</p><table><thead><tr><th style="text-align:left">系统版本</th></tr></thead><tbody><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1dD5Z1Hf" target="_blank" rel="external">android 5.0</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1eQf6F0Q" target="_blank" rel="external">android 4.4W</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1hqGGrVA" target="_blank" rel="external">android 4.4.2</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1pJI3YrD" target="_blank" rel="external">android 4.3</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1qWlXS9u" target="_blank" rel="external">android 4.2.2</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1qWv1spm" target="_blank" rel="external">android 4.1.2</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1jGGCpuu" target="_blank" rel="external">android 4.0.3</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1o61AZwQ" target="_blank" rel="external">android 4.0</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1pJt14En" target="_blank" rel="external">android 3.0</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1eQekIPW" target="_blank" rel="external">android 2.3.3</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1bny9E2b" target="_blank" rel="external">android 2.2</a></td></tr></tbody></table><h4 id="Android-SDK-Extras"><a href="#Android-SDK-Extras" class="headerlink" title="Android SDK Extras"></a>Android SDK Extras</h4><p>包含 <code>Android Support Library</code> 、 <code>Google Cloud Messaging for Android Library</code> 、<code>Google Play services</code> 、 <code>Google Play services for fit preview</code> 、<code>Google Play services for Froyo</code> 、<code>Google Play APK Expansion Library</code>、<code>Google Play Billing Library</code> 、<code>Google Play Licensing Library</code> 等，下载解压后将解压出的整个文件夹复制或者移动到<code>your sdk</code>根目录下下，如果已经存在<code>extras</code>文件夹就替换掉。</p><table><thead><tr><th style="text-align:center">版本号</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1kTmlB9d" target="_blank" rel="external">21.0.3</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgso8Y0" target="_blank" rel="external">21.0.2</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6v78Lk" target="_blank" rel="external">21</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQIMXMy" target="_blank" rel="external">20</a></td></tr></tbody></table><h4 id="Support-Library"><a href="#Support-Library" class="headerlink" title="Support Library"></a>Support Library</h4><p>包含support <code>v4</code>、<code>v7</code>、<code>v13</code>、<code>v17</code>、<code>multidex</code>和<code>m2repository</code>，下载解压后将解压出的整个文件夹复制或者移动到<code>your sdk 路径/extras</code>下，然后打开SDK Manager，打开<code>Tools(工具)</code>菜单选择<code>Options(选项)</code>菜单项打开Android SDK Manager Setting对话框，点击<code>Clear Cache(清除缓存)</code>按钮，然后重启Eclipse(或Android Studio)和SDK Manager。</p><table><thead><tr><th style="text-align:center">版本号</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntsoeE1" target="_blank" rel="external">21.0.3</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1kTzIkYV" target="_blank" rel="external">21.0.2</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6MBWIu" target="_blank" rel="external">21</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6OBlR8" target="_blank" rel="external">20</a></td></tr></tbody></table><h4 id="SDK-Samples"><a href="#SDK-Samples" class="headerlink" title="SDK Samples"></a>SDK Samples</h4><p>这是Android SDK自带的示例代码，下载并解压后，将解压出的整个文件夹复制或者移动到<code>your sdk 路径/samples</code>文件夹下，然后重启Eclipse(或Android Studio)。<br>。</p><table><thead><tr><th style="text-align:left">系统版本</th></tr></thead><tbody><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1dDD19XB" target="_blank" rel="external">android 21</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1gdpEan5" target="_blank" rel="external">android L</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1ntLVN9B" target="_blank" rel="external">android 4.4W</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1dDeSKt7" target="_blank" rel="external">android 4.4.2</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1pJHicjx" target="_blank" rel="external">android 4.3</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1hqGavMc" target="_blank" rel="external">android 4.2.2</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1eYPL8" target="_blank" rel="external">android 4.1.2</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1i3mScXv" target="_blank" rel="external">android 4.0.3</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1kTiKqZP" target="_blank" rel="external">android 4.0</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1eQpafgI" target="_blank" rel="external">android 3.2</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1haIPw" target="_blank" rel="external">android 3.1</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1ntx9qFR" target="_blank" rel="external">android 3.0</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1hqiQw1Q" target="_blank" rel="external">android 2.3.3</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1ntv7wut" target="_blank" rel="external">android 2.2</a></td></tr></tbody></table><h4 id="NDK"><a href="#NDK" class="headerlink" title="NDK"></a>NDK</h4><p>C/C++开发Android应用工具包,<code>Linux/Mac OS X 下NDK r10c</code>的安装方法请戳 <a href="install-method-url">这里</a></p><table><thead><tr><th style="text-align:left">版本号</th><th style="text-align:center">Windows</th><th style="text-align:center">Mac OSX</th><th style="text-align:center">Linux</th><th style="text-align:left">MD5/SHA-1校验码</th><th style="text-align:center">官方SHA-1校验码截图</th></tr></thead><tbody><tr><td style="text-align:left">ndk-r11b</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1JWvUI" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1pKlqcZL" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pKi8yJT" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0YLv00" target="_blank" rel="external">64位</a></td><td style="text-align:left">Win:b42da395440cc1c5dc4eeeb383679331addeb3ea <br> 480eca1b29cfe73a5b35374730e6a82ca65c2aa6 <br> Mac: c64fb355fec4da57d329ab45bf0aa29a1aec58dc <br> Linux: cf0658956945c81d3d3fad5f9a24fa062d4c9d41</td><td style="text-align:center"><a href="http://ww2.sinaimg.cn/large/8a41f469gw1f25wwym8t6j21kw0rxwja.jpg" target="_blank" rel="external">查看</a></td></tr><tr><td style="text-align:left">ndk-r10e</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jG7Yacm" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1jG5WjL8" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1DKkfc" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1sjoneRr" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1dDAqnK1" target="_blank" rel="external">64位</a></td><td style="text-align:left">Win: 1a82445baaf62aec3a46386ab1e5772c <br>  8412bb4991a95e08fda50b5a44d95df7 <br> Mac: 2cb8893a5701603519d38a7e04c50e81 <br> Linux: c3edd3273029da1cbd2f62c48249e978 <br> 19af543b068bdb7f27787c2bc69aba7f</td><td style="text-align:center"><a href="http://ww1.sinaimg.cn/large/8a41f469gw1ewboorr3czj21kk0vgdmn.jpg" target="_blank" rel="external">查看</a></td></tr></tbody></table><table><thead><tr><th style="text-align:left">Additional Download (32-, 64-bit)</th><th style="text-align:left">Package</th></tr></thead><tbody><tr><td style="text-align:left">r10 STL debug info</td><td style="text-align:left"><a href="http://pan.baidu.com/s/1xWgUE" target="_blank" rel="external">android-ndk-r10-cxx-stl-libs-with-debug-info.zip</a></td></tr><tr><td style="text-align:left">r9 STL debug info</td><td style="text-align:left"><a href="http://pan.baidu.com/s/1c0EMn8O" target="_blank" rel="external">android-ndk-r9-cxx-stl-libs-with-debug-info.zip</a></td></tr></tbody></table><h4 id="Android-L-Preview-System-Image"><a href="#Android-L-Preview-System-Image" class="headerlink" title="Android L Preview System Image"></a>Android L Preview System Image</h4><p>这个是Android L Preview系统的刷机镜像。</p><table><thead><tr><th style="text-align:center">设备</th><th style="text-align:center">下载</th></tr></thead><tbody><tr><td style="text-align:center">Nexus 5 (GSM/LTE) “hammerhead”</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kTsnxsF" target="_blank" rel="external">hammerhead-lpv79-preview-ac1d8a8e.tgz</a></td></tr><tr><td style="text-align:center">Nexus 7 (Wifi) “razor”</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgn1CyG" target="_blank" rel="external">razor-lpv79-preview-d0ddf8ce.tgz</a></td></tr></tbody></table><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4><table><thead><tr><th style="text-align:center">版本号</th><th style="text-align:center">Windows</th><th style="text-align:center">Mac OSX</th><th style="text-align:center">Linux</th></tr></thead><tbody><tr><td style="text-align:center">1.8 u77</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hsFDbBu" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1kUJuzH1" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bRetFw" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i4YX7VZ" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1slBWTIH" target="_blank" rel="external">64位</a></td></tr><tr><td style="text-align:center">1.8 u74</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c1w1TCk" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1nu3BdVj" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0Tv5Pe" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gecIYxP" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1hrtBXkg" target="_blank" rel="external">64位</a></td></tr><tr><td style="text-align:center">1.7 u80</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bfAT58" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1gewvEAR" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hrl4x3u" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c1pG2Fu" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1hrecZ9U" target="_blank" rel="external">64位</a></td></tr><tr><td style="text-align:center">1.6 u45</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o67aooM" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1dDmtSZJ" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqpB7Nm" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJJj5Ib" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1dDck3O9" target="_blank" rel="external">64位</a></td></tr></tbody></table><h4 id="ADT-Bundle"><a href="#ADT-Bundle" class="headerlink" title="ADT Bundle"></a>ADT Bundle</h4><p>ADT Bundle包含了Eclipse、ADT插件和SDK Tools，是已经集成好的IDE，只需安装好Jdk即可开始开发，推荐初学者下载ADT Bundle，不用再折腾开发环境。</p><table><thead><tr><th style="text-align:center">版本号</th><th style="text-align:center">Windows</th><th style="text-align:center">Mac OSX</th><th style="text-align:center">Linux</th></tr></thead><tbody><tr><td style="text-align:center">23.0.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dDGM8oD" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1mgn2dOs" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6OBIHG" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1GmIsQ" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1EQMT4" target="_blank" rel="external">64位</a></td></tr><tr><td style="text-align:center">23.0.0</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i39mvY1" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1o65ExPS" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqvHkry" target="_blank" rel="external">64位</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgoh41q" target="_blank" rel="external">32位</a> <a href="http://pan.baidu.com/s/1qWJh4wk" target="_blank" rel="external">64位</a></td></tr></tbody></table><h4 id="ADT-Plugin"><a href="#ADT-Plugin" class="headerlink" title="ADT Plugin"></a>ADT Plugin</h4><p>离线安装ADT插件请戳<a href="https://github.com/inferjay/AndroidDevTools/wiki/首页"><strong>项目wiki</strong></a></p><table><thead><tr><th style="text-align:center">版本号</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1bngDm6V" target="_blank" rel="external">ADT-23.0.7</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGraNEQ" target="_blank" rel="external">ADT-23.0.6</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1i39UM7j" target="_blank" rel="external">ADT-23.0.4</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqJyLTi" target="_blank" rel="external">ADT-23.0.3</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1bnGkEvX" target="_blank" rel="external">ADT-23.0.2</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1sjArX7J" target="_blank" rel="external">ADT-23.0.0</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGMb5yQ" target="_blank" rel="external">ADT-22.6.3</a></td></tr><tr><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJ185Rl" target="_blank" rel="external">AdT-22.6.1</a></td></tr></tbody></table><h4 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h4><table><thead><tr><th style="text-align:left">版本号</th></tr></thead><tbody><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1gdLhXa7" target="_blank" rel="external">gradle-2.12-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1gewXkzx" target="_blank" rel="external">gradle-2.11-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1mhrKIF2" target="_blank" rel="external">gradle-2.10-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1eRll1Ns" target="_blank" rel="external">gradle-2.9-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1qW25Ndy" target="_blank" rel="external">gradle-2.8-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1c0g9D5m" target="_blank" rel="external">gradle-2.7-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1mg8JAbA" target="_blank" rel="external">gradle-2.6-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1jGrmKx4" target="_blank" rel="external">gradle-2.5-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1c0dcgfe" target="_blank" rel="external">gradle-2.4-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1dDEnQr3" target="_blank" rel="external">gradle-2.3-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1eQH39AE" target="_blank" rel="external">gradle-2.2.1-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1i3BXKYp" target="_blank" rel="external">gradle-2.2-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1bnF6jV5" target="_blank" rel="external">gradle-2.1-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1mgFTN7a" target="_blank" rel="external">gradle-2.0-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1Gmlx8" target="_blank" rel="external">gradle-1.12-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1c0hCmdE" target="_blank" rel="external">gradle-1.11-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1qWtzaGW" target="_blank" rel="external">gradle-1.10-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1dDeSuXV" target="_blank" rel="external">gradle-1.9-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1o6Npqqe" target="_blank" rel="external">gradle-1.8-all.zip</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1pJnvyWz" target="_blank" rel="external">gradle-1.7-all.zip</a></td></tr></tbody></table><h4 id="Android-Gradle-Plugin-DSL-在线文档"><a href="#Android-Gradle-Plugin-DSL-在线文档" class="headerlink" title="Android Gradle Plugin DSL 在线文档"></a>Android Gradle Plugin DSL 在线文档</h4><p><a href="http://google.github.io/android-gradle-dsl/" target="_blank" rel="external">http://google.github.io/android-gradle-dsl/</a></p><h4 id="Gradle-Dependencies-Configuration-Generator（需要梯子）"><a href="#Gradle-Dependencies-Configuration-Generator（需要梯子）" class="headerlink" title="Gradle Dependencies Configuration Generator（需要梯子）"></a>Gradle Dependencies Configuration Generator（需要梯子）</h4><p><a href="http://gradleplease.appspot.com" target="_blank" rel="external">http://gradleplease.appspot.com</a></p><h4 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h4><h5 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h5><table><thead><tr><th style="text-align:left">版本号</th><th style="text-align:center">Windows</th><th style="text-align:center">Mac OSX</th><th style="text-align:center">Linux</th></tr></thead><tbody><tr><td style="text-align:left">Git-2.0.1</td><td style="text-align:center"></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgkM9BE" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="https://github.com/inferjay/AndroidDevTools/wiki/Download-for-Linux-and-Unix">下载</a></td></tr><tr><td style="text-align:left">Git-1.9.4</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntjy9N7" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td><td style="text-align:center"><a href="https://github.com/inferjay/AndroidDevTools/wiki/Download-for-Linux-and-Unix">下载</a></td></tr><tr><td style="text-align:left">Git-1.8.5.2</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntJWxeD" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bncr1pX" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="https://github.com/inferjay/AndroidDevTools/wiki/Download-for-Linux-and-Unix">下载</a></td></tr></tbody></table><h5 id="SVN-Plugin-For-Eclipse"><a href="#SVN-Plugin-For-Eclipse" class="headerlink" title="SVN Plugin For Eclipse"></a>SVN Plugin For Eclipse</h5><table><thead><tr><th style="text-align:left">版本号</th></tr></thead><tbody><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1mg2x4Xq" target="_blank" rel="external">1.10.5</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1hqswoGs" target="_blank" rel="external">1.8.22</a></td></tr><tr><td style="text-align:left"><a href="http://pan.baidu.com/s/1o60r6UA" target="_blank" rel="external">1.6.18</a></td></tr></tbody></table><h4 id="反编译工具"><a href="#反编译工具" class="headerlink" title="反编译工具"></a>反编译工具</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Enjarify</td><td style="text-align:left">Enjarify 是一个用 Python 写的， Google 官方开源的可以将 Dalvik 字节码转换为 Java 字节码的工具。</td><td style="text-align:center"><a href="https://github.com/google/enjarify">下载</a></td></tr><tr><td style="text-align:left">JEB Android Decompiler</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://www.android-decompiler.com/index.php" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Virtuous Ten Studio</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://virtuous-ten-studio.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Apk文件修改工具Root Tools</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://github.com/Stericson/RootTools">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Dex文件反编译工具Dedexer</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://dedexer.sourceforge.net" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">APK+Dex文件反编译及回编译工具</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://idoog.me" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">android-apktool</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Onekey Decompile Apk]</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://code.google.com/p/onekey-decompile-apk/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Baksmali</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://code.google.com/p/smali/downloads/detail?name=baksmali" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Smali</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://code.google.com/p/smali/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AXMLPrinter2</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://android4me.googlecode.com/files/AXMLPrinter2.jar" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">JAD Java Decompiler</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://varaneckas.com/jad/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">JD-GUI Decompiler</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://github.com/java-decompiler/jd-gui/releases/tag/v1.4.0">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">XJad V2.2</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://files.cnblogs.com/arix04/XJad_V2.2.rar" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android APK Decompiler</td><td style="text-align:left">在线反编译工具</td><td style="text-align:center"><a href="http://www.decompileandroid.com/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">JADX - Dex to Java decompiler</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://github.com/skylot/jadx">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">dex2jar</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://code.google.com/p/dex2jar/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">SmaliViewer</td><td style="text-align:left">是一款免费的APK分析软件，无论从分析的深度<br>还是广度来看，都是一款能够满足用户需求的产品，<br>使您在APK分析的过程中，更加得心应手。</td><td style="text-align:center"><a href="http://blog.avlyun.com/wp-content/uploads/2014/04/SmaliViewer.zip" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://blog.avlyun.com/show/《sv用户指南》/" target="_blank" rel="external">使用指南</a></td></tr><tr><td style="text-align:left">Android逆向助手</td><td style="text-align:left">Android逆向助手是一功能强大的逆向辅助软件。<br>该软件可以帮助用户来进行apk反编译打包签名；<br>dex/jar互转替换提取修复；so反编译；<br>xml、txt加密；字符串编码等等，操作简单<br>，只需要直接将文件拖放到源和目标文件。</td><td style="text-align:center"><a href="http://enjoycode.info/uploads/Androidnxzs.zip" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://www.sanwho.com/620.html" target="_blank" rel="external">使用指南</a></td></tr><tr><td style="text-align:left">Android Killer</td><td style="text-align:left">Android Killer 是一款可视化的安卓应用逆向工具，<br>集Apk反编译、Apk打包、Apk签名，编码互转，<br>ADB通信（应用安装-卸载-运行-设备文件管理）<br>等特色功能于一 身，支持logcat日志输出，<br>语法高亮，基于关键字（支持单行代码或多行代码段）<br>项目内搜索，可自定义外部工具；吸收融汇多种工具功能与特点，<br>打造一站 式逆向工具操作体验，大大简化了用户在<br>安卓应用/游戏修改过程中的各类繁琐工作。</td><td style="text-align:center"><a href="http://www.pd521.com/thread-136-1-1.html" target="_blank" rel="external">下载1</a><br><a href="http://pan.baidu.com/share/home?uk=4099707276#category/type=6" target="_blank" rel="external">下载2</a></td><td style="text-align:center"><a href="http://www.pd521.com/thread-509-1-1.html" target="_blank" rel="external">使用指南</a></td></tr><tr><td style="text-align:left">DexExtractor</td><td style="text-align:left">android dex extractor ，anti-shell，android 脱壳。</td><td style="text-align:center"><a href="https://github.com/bunnyblue/DexExtractor">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">jadx</td><td style="text-align:left">Dex to Java decompiler</td><td style="text-align:center"><a href="https://github.com/skylot/jadx">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">android-classyshark</td><td style="text-align:left">a handy Android and Java executables viewer</td><td style="text-align:center"><a href="https://github.com/google/android-classyshark">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">ShakaApktool</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://github.com/rover12421/ShakaApktool">下载</a></td></tr></tbody></table><h4 id="安全工具"><a href="#安全工具" class="headerlink" title="安全工具"></a>安全工具</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">APKfuscator</td><td style="text-align:center"><a href="https://github.com/strazzere/APKfuscator">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">ApkAnalyser</td><td style="text-align:center"><a href="https://github.com/sonyxperiadev/ApkAnalyser/downloads">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AppXplore</td><td style="text-align:center"><a href="https://play.google.com/store/apps/details?id=com.sonyericsson.androidapp.AppExplore&amp;feature=search_result#?t=W251bGwsMSwxLDEsImNvbS5zb255ZXJpY3Nzb24uYW5kcm9pZGFwcC5BcHBFeHBsb3JlIl0." target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android analysis framework</td><td style="text-align:center"><a href="http://www.dexlabs.org" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Androguard</td><td style="text-align:center"><a href="https://code.google.com/p/androguard/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Droidbox</td><td style="text-align:center"><a href="https://code.google.com/p/droidbox/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">dsploit</td><td style="text-align:center"><a href="https://github.com/evilsocket/dsploit">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Androwarn</td><td style="text-align:center"><a href="https://github.com/maaaaz/androwarn">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Anubis</td><td style="text-align:center"><a href="http://anubis.iseclab.org" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Drozer</td><td style="text-align:center"><a href="https://www.mwrinfosecurity.com/products/drozer/community-edition/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">VirusTotal</td><td style="text-align:center"><a href="https://www.virustotal.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">GDB for Android</td><td style="text-align:center"><a href="http://gnutoolchains.com/android/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">VisualGDB</td><td style="text-align:center"><a href="http://visualgdb.com/?features=android" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="静态代码分析工具"><a href="#静态代码分析工具" class="headerlink" title="静态代码分析工具"></a>静态代码分析工具</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">infer</td><td style="text-align:left">Facebook 开源的静态代码分析工具，用于在发布移动应用之前对代码进行分析，找出潜在的问题。</td><td style="text-align:center"><a href="https://github.com/facebook/infer">下载</a></td></tr></tbody></table><h4 id="搜索工具"><a href="#搜索工具" class="headerlink" title="搜索工具"></a>搜索工具</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Structural Java Exception Search</td><td style="text-align:left">Java异常搜索工具</td><td style="text-align:center"><a href="http://www.brainleg.com/search" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Library Finder</td><td style="text-align:left">最快的方式获取依赖库</td><td style="text-align:center"><a href="https://github.com/cesarferreira/alfi">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Codota</td><td style="text-align:left">示例代码搜索网站</td><td style="text-align:center"><a href="http://www.codota.com" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Debug调试工具"><a href="#Debug调试工具" class="headerlink" title="Debug调试工具"></a>Debug调试工具</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Stetho</td><td style="text-align:left">Stetho 是Facebook推出的Android 调试平台，基于 Chrome Developer Tools ，调试网络请求方面特别方便。</td><td style="text-align:center"><a href="https://github.com/facebook/stetho">下载</a></td><td style="text-align:center"><a href="http://facebook.github.io/stetho/" target="_blank" rel="external">教程</a></td></tr><tr><td style="text-align:left">Augmented Traffic Control</td><td style="text-align:left">Facebook宣布开源移动网络测试工具ATC，该工具支持利用Wi-Fi网络模拟2G、2.5G、3G以及LTE 4G移动网络环境，让测试工程师们能够快速对智能手机和App在不同国家地区和应用环境下的性能表现进行测试。</td><td style="text-align:center"><a href="https://github.com/facebook/augmented-traffic-control">下载</a></td></tr></tbody></table><h3 id="Api测试工具"><a href="#Api测试工具" class="headerlink" title="Api测试工具"></a>Api测试工具</h3><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">bat</td><td style="text-align:left">一个用Go写的命令行API测试利器，支持文件下载，<br>文件上传，支持Linux的pipe方式，总之就是炫酷。</td><td style="text-align:center"><a href="http://www.brainleg.com/search" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="https://github.com/astaxie/bat#installation">使用指南</a></td></tr></tbody></table><h4 id="Eclipse-Android-Studio-IDEA插件"><a href="#Eclipse-Android-Studio-IDEA插件" class="headerlink" title="Eclipse/Android Studio/IDEA插件"></a>Eclipse/Android Studio/IDEA插件</h4><h5 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h5><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">SVN</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1sjqamOP" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Genymobile模拟器</td><td style="text-align:center"><a href="http://genymotion.com/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Memory-Analyzer-Tools</td><td style="text-align:center"><a href="http://download.eclipse.org/mat/1.4/update-site/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Droidinspector</td><td style="text-align:center"><a href="http://www.sriramramani.com/droidinspector/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">SQLiteManager</td><td style="text-align:center"><a href="https://dl.dropboxusercontent.com/u/91846918/sqlite%20manager/com.questoid.sqlitemanager_1.0.0.jar" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Color Theme</td><td style="text-align:center"><a href="http://eclipsecolorthemes.org/?view=plugin" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">RoboVM</td><td style="text-align:center"><a href="http://www.robovm.org" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Newrelic</td><td style="text-align:center"><a href="https://download.newrelic.com/android_agent/eclipse" target="_blank" rel="external">下载</a></td></tr></tbody></table><h5 id="Android-Studio-IDEA"><a href="#Android-Studio-IDEA" class="headerlink" title="Android Studio/IDEA"></a>Android Studio/IDEA</h5><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android Resource Resizer Plugin</td><td style="text-align:center"><a href="https://github.com/walmyrcarvalho/android-resource-resizer">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Gradle Dependencies Helper Plugin</td><td style="text-align:center"><a href="https://github.com/ligi/GradleDependenciesHelperPlugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Parcelable code generation Plugin</td><td style="text-align:center"><a href="https://github.com/mcharmas/android-parcelable-intellij-plugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Holo Colors IDEA Plugin</td><td style="text-align:center"><a href="https://github.com/jeromevdl/android-holo-colors-idea-plugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Toolbox Plugin</td><td style="text-align:center"><a href="https://github.com/idamobile/android-toolbox-plugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Gradle Sign Plugin</td><td style="text-align:center"><a href="https://github.com/alexvasilkov/AndroidGradleSignPlugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Permissions Usage Plugin</td><td style="text-align:center"><a href="https://github.com/RomainPiel/AndroidPermissionsUsage">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Helper Plugin</td><td style="text-align:center"><a href="https://github.com/eunjae-lee/AndroidHelper">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Studio Prettify Plugin</td><td style="text-align:center"><a href="https://github.com/Haehnchen/idea-android-studio-plugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">IDEA ADB Plugin</td><td style="text-align:center"><a href="https://github.com/pbreault/adb-idea">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Otto Intellij Plugin</td><td style="text-align:center"><a href="https://github.com/square/otto-intellij-plugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Dagger intellij Plugin</td><td style="text-align:center"><a href="https://github.com/square/dagger-intellij-plugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Gradle Gui Plugin</td><td style="text-align:center"><a href="https://github.com/gradle-archive/gradle-intellij-gui">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Studio Unit Test Plugin</td><td style="text-align:center"><a href="https://github.com/evant/android-studio-unit-test-plugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Layout ID Converter Plugin</td><td style="text-align:center"><a href="https://github.com/funnything/OffingHarbor">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">IDEA protobuf Plugin</td><td style="text-align:center"><a href="https://github.com/nnmatveev/idea-plugin-protobuf">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Simple Team Code Reviewer Plugin</td><td style="text-align:center"><a href="https://github.com/syllant/idea-plugin-revu">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android XML Plugin</td><td style="text-align:center"><a href="https://github.com/mironov-nsk/AndroidXML">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">ADF Plugin</td><td style="text-align:center"><a href="https://github.com/tizionario/adf-intellijPlugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Java2smali Plugin</td><td style="text-align:center"><a href="https://github.com/ollide/intellij-java2smali">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">IDEA gitignore Plugin</td><td style="text-align:center"><a href="https://github.com/hsz/idea-gitignore">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">IDEA Background Image Plugin</td><td style="text-align:center"><a href="https://github.com/kimptoc/Intellij-IDEA-Plugin-Background-Image">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">IDEA Maven Plugin</td><td style="text-align:center"><a href="https://github.com/born2snipe/idea-plugin-maven-plugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Gradle GooglePlay Publisher Plugin</td><td style="text-align:center"><a href="https://github.com/Triple-T/gradle-play-publisher">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Drawable Selectors Generates Plugin</td><td style="text-align:center"><a href="https://github.com/inmite/android-selector-chapek">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Drawable Importer</td><td style="text-align:center"><a href="https://github.com/winterDroid/android-drawable-importer-intellij-plugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Color themes for IntelliJ IDEA</td><td style="text-align:center"><a href="https://github.com/winterDroid/android-drawable-importer-intellij-plugin">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">GsonFormat</td><td style="text-align:center"><a href="https://github.com/zzz40500/GsonFormat">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">ormlite-android-gradle-plugin</td><td style="text-align:center"><a href="https://github.com/stephanenicolas/ormlite-android-gradle-plugin">下载</a></td></tr></tbody></table><h4 id="Android资源-Themes-Style生成工具"><a href="#Android资源-Themes-Style生成工具" class="headerlink" title="Android资源/Themes/Style生成工具"></a>Android资源/Themes/Style生成工具</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android Asset Studio</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://romannurik.github.io/AndroidAssetStudio/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Drawable Factory</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://github.com/tizionario/AndroidDrawableFactory">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Action Bar Style Generator</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://jgilfelt.github.io/android-actionbarstylegenerator" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Holo Colors Generator</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://android-holo-colors.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Simple Nine-patch Generator</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://romannurik.github.io/AndroidAssetStudio/nine-patches.html" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Device Frame Generator</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://f2prateek.com/android-device-frame-generator/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android 9-patch shadow generator</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://inloop.github.io/shadow4android/" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Android资源分析工具"><a href="#Android资源分析工具" class="headerlink" title="Android资源分析工具"></a>Android资源分析工具</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android Assets Viewer</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://www.cellebellum.net/AndroidAssetsViewer/" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Android-Layout-Parser工具"><a href="#Android-Layout-Parser工具" class="headerlink" title="Android Layout Parser工具"></a>Android Layout Parser工具</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android Layout Binder</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://android.lineten.net/layout.php" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Android-Content-Provider代码生成工具"><a href="#Android-Content-Provider代码生成工具" class="headerlink" title="Android Content Provider代码生成工具"></a>Android Content Provider代码生成工具</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Content Provider Code Generator</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://github.com/BoD/android-contentprovider-generator">下载</a></td></tr></tbody></table><h4 id="Android-Fragment-Code-Generator代码生成工具"><a href="#Android-Fragment-Code-Generator代码生成工具" class="headerlink" title="Android Fragment Code Generator代码生成工具"></a>Android Fragment Code Generator代码生成工具</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android Fragment Code Generator</td><td style="text-align:left"></td><td style="text-align:center"><a href="http://techisfun.github.io/pages/android-fragment-generator/" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="代码生成工具"><a href="#代码生成工具" class="headerlink" title="代码生成工具"></a>代码生成工具</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android KickstartR</td><td style="text-align:left">AndroidKickstartR帮助您快速创建<br>Android应用程序并使用最流行的库进行配置。<br>它创建和配置你的项目给你。只专注于代码!</td><td style="text-align:center"><a href="http://androidkickstartr.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Button Maker</td><td style="text-align:left">Android Button Maker是一个在线生成Android应用按钮代码的工具。<br>Android的API提供可绘制资源，其中的XML文件定义的几何形状，包括颜色，边框和梯度。<br>这些按钮是在shape drawable XML代码基础上产生的相比通常的PNG按钮加载速度更快。<br>您可以在设置面板中自定义按钮的属性和获得源代码。</td><td style="text-align:center"><a href="http://angrytools.com/android/button/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">DroidDraw</td><td style="text-align:left"></td><td style="text-align:center"><a href="https://code.google.com/p/droiddraw/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android SVG to VectorDrawable</td><td style="text-align:left">一个可以将SVG图片转换为Vector Drawable xml文件的在线工具。</td><td style="text-align:center"><a href="http://inloop.github.io/svg2android/" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Android-Native开发工具"><a href="#Android-Native开发工具" class="headerlink" title="Android Native开发工具"></a>Android Native开发工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android++</td><td></td><td style="text-align:center"><a href="http://android-plus-plus.com" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Android测试工具"><a href="#Android测试工具" class="headerlink" title="Android测试工具"></a>Android测试工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Appurify</td><td></td><td style="text-align:center"><a href="http://appurify.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Monkey</td><td></td><td style="text-align:center"><a href="http://developer.android.com/intl/zh-cn/tools/help/monkey.html" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Testin</td><td></td><td style="text-align:center"><a href="http://testin.cn" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Spoon</td><td></td><td style="text-align:center"><a href="http://square.github.io/spoon/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Little Eye</td><td></td><td style="text-align:center"><a href="http://www.littleeye.co" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">易测云</td><td></td><td style="text-align:center"><a href="http://www.yiceyun.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Emmagee</td><td></td><td style="text-align:center"><a href="https://code.google.com/p/emmagee/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Apk View Tracer</td><td></td><td style="text-align:center"><a href="https://code.google.com/p/apk-view-tracer/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">APT</td><td>APT是一个Android平台高效性能测试组件，<br>提供丰富实用的功能，适用于开发自测、<br>定位性能瓶颈；<br>测试人员完成性能基准测试、竞品对比测试。</td><td style="text-align:center"><a href="https://code.csdn.net/Tencent/apt" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://www.eoeandroid.com/thread-497380-1-1.html" target="_blank" rel="external">教程</a></td></tr><tr><td style="text-align:left">GT</td><td>GT（随身调）是APP的随身调测平台，它是直接运行在手机上的“集成调测环境”(IDTE, Integrated Debug&amp;Test Environment)。</td><td style="text-align:center"><a href="http://gt.tencent.com/index.html" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://gt.tencent.com/docs.html" target="_blank" rel="external">教程</a></td></tr><tr><td style="text-align:left">Mobile-Checker</td><td>移动端页面检查工具,可以选择三种屏幕规格，通过工具发现网站在移动端存在的问题。</td><td style="text-align:center"><a href="https://github.com/w3c/Mobile-Checker">下载</a></td></tr></tbody></table><h4 id="Android多渠道打包工具"><a href="#Android多渠道打包工具" class="headerlink" title="Android多渠道打包工具"></a>Android多渠道打包工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Umeng多渠道打包工具</td><td></td><td style="text-align:center"><a href="https://github.com/umeng/umeng-muti-channel-build-tool">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AppTools具</td><td></td><td style="text-align:center"><a href="https://github.com/wubo/apptools">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">package_tool</td><td></td><td style="text-align:center"><a href="https://github.com/ahui2823/package_tool">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">RyApkTool</td><td></td><td style="text-align:center"><a href="http://blog.csdn.net/rydiy/article/details/7901564" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">兰贝壳儿</td><td></td><td style="text-align:center"><a href="http://www.orchidshell.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://www.orchidshell.com/Instructions/OchidShellInstructions.htm" target="_blank" rel="external">教程</a></td></tr></tbody></table><h4 id="Android-Bug日志收集工具"><a href="#Android-Bug日志收集工具" class="headerlink" title="Android Bug日志收集工具"></a>Android Bug日志收集工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Crashlytics</td><td></td><td style="text-align:center"><a href="http://try.crashlytics.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">ACRA</td><td></td><td style="text-align:center"><a href="https://github.com/ACRA/acra">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">ChkBugReport</td><td></td><td style="text-align:center"><a href="https://github.com/sonyxperiadev/ChkBugReport">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Log Collector</td><td></td><td style="text-align:center"><a href="https://code.google.com/p/android-log-collector/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Crash Catcher</td><td></td><td style="text-align:center"><a href="https://github.com/netcook/crash-catcher">下载</a></td></tr></tbody></table><h4 id="其他语言开发Android应用工具"><a href="#其他语言开发Android应用工具" class="headerlink" title="其他语言开发Android应用工具"></a>其他语言开发Android应用工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Xamarin</td><td></td><td style="text-align:center"><a href="http://xamarin.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Basic4android</td><td></td><td style="text-align:center"><a href="http://www.basic4ppc.com/index.html" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Scripting Layer</td><td></td><td style="text-align:center"><a href="https://code.google.com/p/android-scripting/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Ruby Rhodes</td><td>移动设备上的Ruby</td><td style="text-align:center"><a href="http://rhomobile.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">PHP for Android</td><td></td><td style="text-align:center"><a href="http://www.phpforandroid.net/doku.php" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Codename One</td><td></td><td style="text-align:center"><a href="http://www.codenameone.com/index.html" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Touchqode</td><td></td><td style="text-align:center"><a href="http://www.codenameone.com/index.html" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">App Inventor</td><td></td><td style="text-align:center"><a href="http://www.codenameone.com/index.html" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="传感器模拟工具"><a href="#传感器模拟工具" class="headerlink" title="传感器模拟工具"></a>传感器模拟工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Sensor Simulator</td><td>独立的Java应用程序，它模拟传感器<br>的数据并将它们传送到Android模拟器。</td><td style="text-align:center"><a href="http://www.openintents.org/en/node/23)" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Android串口开发工具"><a href="#Android串口开发工具" class="headerlink" title="Android串口开发工具"></a>Android串口开发工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android Serialport Api</td><td></td><td style="text-align:center"><a href="https://code.google.com/p/android-serialport-api/" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="图片尺寸处理工具"><a href="#图片尺寸处理工具" class="headerlink" title="图片尺寸处理工具"></a>图片尺寸处理工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">9-Patch Resizer</td><td></td><td style="text-align:center"><a href="https://github.com/redwarp/9-Patch-Resizer">下载</a></td></tr></tbody></table><h4 id="图片压缩工具"><a href="#图片压缩工具" class="headerlink" title="图片压缩工具"></a>图片压缩工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">OptiPNG</td><td></td><td style="text-align:center"><a href="http://optipng.sourceforge.net/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Pngcrush</td><td></td><td style="text-align:center"><a href="http://pmt.sourceforge.net/pngcrush/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">ImageOptim</td><td></td><td style="text-align:center"><a href="https://imageoptim.com)" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Tinypng</td><td></td><td style="text-align:center"><a href="https://tinypng.com/" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="资源清理工具"><a href="#资源清理工具" class="headerlink" title="资源清理工具"></a>资源清理工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android Lint</td><td></td><td style="text-align:center"><a href="http://tools.android.com/tips/lint" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Resource Cleaner</td><td></td><td style="text-align:center"><a href="https://code.google.com/p/android-resource-cleaner/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Unused Resources</td><td></td><td style="text-align:center"><a href="https://code.google.com/p/android-unused-resources/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Resource Remover</td><td></td><td style="text-align:center"><a href="https://github.com/KeepSafe/android-resource-remover">下载</a></td></tr></tbody></table><h4 id="px和dp转换-计算工具"><a href="#px和dp转换-计算工具" class="headerlink" title="px和dp转换/计算工具"></a>px和dp转换/计算工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android dp px Calculator</td><td></td><td style="text-align:center"><a href="http://labs.rampinteractive.co.uk/android_dp_px_calculator/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">dp px converter</td><td></td><td style="text-align:center"><a href="http://pixplicity.com/dp-px-converter/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">pixelcalc</td><td></td><td style="text-align:center"><a href="http://angrytools.com/android/pixelcalc/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">androidpixels</td><td></td><td style="text-align:center"><a href="http://androidpixels.net" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">android dpi calculator</td><td></td><td style="text-align:center"><a href="https://github.com/JerzyPuchalski/Android-DPI-Calculator">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">DPI Calculator</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/dpi-calculator/dldofgjemhkpilajnlenfijjpkabilcg?hl=en" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android DPI Calculator插件</td><td></td><td style="text-align:center"><a href="https://github.com/JerzyPuchalski/Android-DPI-Calculator">下载</a></td></tr></tbody></table><h4 id="Java-To-iOS"><a href="#Java-To-iOS" class="headerlink" title="Java To iOS"></a>Java To iOS</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">j2Objc</td><td></td><td style="text-align:center"><a href="https://github.com/google/j2objc">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">RoboVM</td><td></td><td style="text-align:center"><a href="http://www.robovm.org" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="JSON-XML转换为POJO-Class工具"><a href="#JSON-XML转换为POJO-Class工具" class="headerlink" title="JSON/XML转换为POJO Class工具"></a>JSON/XML转换为POJO Class工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">jsonschema2pojo</td><td></td><td style="text-align:center"><a href="http://www.jsonschema2pojo.org" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Convert XML or JSON to Java Pojo</td><td></td><td style="text-align:center"><a href="http://pojo.sodhanalibrary.com" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Java-DAO-Generate工具"><a href="#Java-DAO-Generate工具" class="headerlink" title="Java DAO Generate工具"></a>Java DAO Generate工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Generate Java DAO for relational data table</td><td></td><td style="text-align:center"><a href="http://pojo.sodhanalibrary.com/GenerateDAO.html" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h4><h5 id="Android插件"><a href="#Android插件" class="headerlink" title="Android插件"></a>Android插件</h5><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android SDK Search</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/android-sdk-search/hgcbffeicehlpmgmnhnkjbjoldkfhoin" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Resource Navigator</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">ADB Plugin for remote <br>debugging Chrome on Android</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/adb/dpngiggdglpdnjdoaefidgiigpemgage?hl=en" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Mobile/RWD Tester</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/mobilerwd-tester/elmekokodcohlommfikpmojheggnbelo?hl=en" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">ExtensionAndroid SDK Samples Search</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/android-sdk-samples-searc/mbiobcenjhldinmnbpjihaemkfofnmgf?hl=en" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Developer Improvements</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/android-developer-improve/omakkdelnjjgfmohpfkejgfcckpkbhbj?hl=en" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android downloader</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/android-downloader/pkffcfhlacdchhpahlgcajjiiljobbbb?hl=en" target="_blank" rel="external">下载</a></td></tr></tbody></table><h5 id="JSON-XML格式化插件"><a href="#JSON-XML格式化插件" class="headerlink" title="JSON/XML格式化插件"></a>JSON/XML格式化插件</h5><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">JSONView</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=en" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">JSON Formatter</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">JSON Viewer</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=en" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">JSON Finder</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/json-finder/flhdcaebggmmpnnaljiajhihdfconkbj?hl=en" target="_blank" rel="external">下载</a></td></tr></tbody></table><h5 id="Encode-Decode插件"><a href="#Encode-Decode插件" class="headerlink" title="Encode/Decode插件"></a>Encode/Decode插件</h5><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Base64 Encode and Decode</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/base64-encode-and-decode/kcafoaahiffdjffagoegkdiabclnkbha?hl=en" target="_blank" rel="external">下载</a></td></tr></tbody></table><h5 id="Git-1"><a href="#Git-1" class="headerlink" title="Git"></a>Git</h5><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Git Cheat Sheet</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/git-cheat-sheet/mjdmgoiobnbkfcfjcceaodlcodhpokgn?hl=en" target="_blank" rel="external">下载</a></td></tr></tbody></table><h2 id="Guides"><a href="#Guides" class="headerlink" title="Guides"></a>Guides</h2><h4 id="Google-Java编程风格指南中文版"><a href="#Google-Java编程风格指南中文版" class="headerlink" title="Google Java编程风格指南中文版"></a>Google Java编程风格指南中文版</h4><p>英文地址：<a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html" target="_blank" rel="external">http://google-styleguide.googlecode.com/svn/trunk/javaguide.html</a></p><p>地址0：<a href="http://hawstein.com/posts/google-java-style.html" target="_blank" rel="external">http://hawstein.com/posts/google-java-style.html</a></p><p>地址1：<a href="https://github.com/codeset/google-java-styleguide">https://github.com/codeset/google-java-styleguide</a></p><h4 id="Android-Developers-国内镜像站"><a href="#Android-Developers-国内镜像站" class="headerlink" title="Android Developers 国内镜像站"></a>Android Developers 国内镜像站</h4><p>地址: <a href="http://androiddoc.qiniudn.com/" target="_blank" rel="external">Android Developers 国内镜像站</a></p><h4 id="Android-Api中文版"><a href="#Android-Api中文版" class="headerlink" title="Android Api中文版"></a>Android Api中文版</h4><p>地址：<a href="http://www.embeddedlinux.org.cn/androidapi/" target="_blank" rel="external">http://www.embeddedlinux.org.cn/androidapi/</a></p><p>####Android API指南中文版</p><p>地址：<a href="http://api.apkbus.com/guide" target="_blank" rel="external">http://api.apkbus.com/guide</a></p><h4 id="Android-Proguard混淆配置指南"><a href="#Android-Proguard混淆配置指南" class="headerlink" title="Android Proguard混淆配置指南"></a>Android Proguard混淆配置指南</h4><p>地址：<a href="https://github.com/inferjay/AndroidProguardGuide/">https://github.com/inferjay/AndroidProguardGuide/</a></p><h4 id="Gradle插件使用指南中文版"><a href="#Gradle插件使用指南中文版" class="headerlink" title="Gradle插件使用指南中文版"></a>Gradle插件使用指南中文版</h4><p>地址：<a href="http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision" target="_blank" rel="external">http://avatarqing.github.io/Gradle-Plugin-User-Guide-Chinese-Verision</a></p><h4 id="Gradle-User-Guide"><a href="#Gradle-User-Guide" class="headerlink" title="Gradle User Guide"></a>Gradle User Guide</h4><p>Gradle 1.12用户指南：<a href="http://pan.baidu.com/s/1dD7sC2d" target="_blank" rel="external">http://pan.baidu.com/s/1dD7sC2d</a></p><h2 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h2><h4 id="Android学习之路"><a href="#Android学习之路" class="headerlink" title="Android学习之路"></a>Android学习之路</h4><p>地址：<a href="http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/</a></p><h4 id="Google-Android官方培训课程中文版"><a href="#Google-Android官方培训课程中文版" class="headerlink" title="Google Android官方培训课程中文版"></a>Google Android官方培训课程中文版</h4><p>地址：<a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">http://hukai.me/android-training-course-in-chinese/index.html</a></p><h4 id="Developing-Android-Apps"><a href="#Developing-Android-Apps" class="headerlink" title="Developing Android Apps"></a>Developing Android Apps</h4><p>地址：<a href="https://www.udacity.com/course/ud853" target="_blank" rel="external">https://www.udacity.com/course/ud853</a></p><h4 id="Java-Design-Patterns-Samples-in-Java"><a href="#Java-Design-Patterns-Samples-in-Java" class="headerlink" title="Java Design Patterns Samples in Java."></a>Java Design Patterns Samples in Java.</h4><p><a href="https://github.com/iluwatar/java-design-patterns">Java Design Patterns</a></p><h1 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h1><hr><h2 id="Design-Tools"><a href="#Design-Tools" class="headerlink" title="Design Tools"></a>Design Tools</h2><h4 id="Photoshop插件"><a href="#Photoshop插件" class="headerlink" title="Photoshop插件"></a>Photoshop插件</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Cut&amp;Slice</td><td>切图神器</td><td style="text-align:center"><a href="http://www.cutandslice.me" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">DevRocket</td><td>切图神器</td><td style="text-align:center"><a href="http://www.robovm.org" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Cutterman</td><td>最好用的切图工具</td><td style="text-align:center"><a href="http://www.cutterman.cn" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Ink</td><td></td><td style="text-align:center"><a href="http://ink.chrometaphore.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Corner Editor</td><td>路径圆角编辑工具</td><td style="text-align:center"><a href="http://photoshopscripts.wordpress.com" target="_blank" rel="external">下载1</a> <br><a href="http://sourceforge.net/projects/cornereditor/" target="_blank" rel="external">下载1</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">GuideGuide</td><td>辅助线工具</td><td style="text-align:center"><a href="http://guideguide.me" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Assistor PS</td><td></td><td style="text-align:center"><a href="http://assistor.net/en/assistor" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Skeuomorphism.it</td><td></td><td style="text-align:center"><a href="http://skeuomorphism.it" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">QuickGuide</td><td></td><td style="text-align:center"><a href="http://guchitaka.com/project-view/quickguidepro/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Long Shadow Generator</td><td>长投影效果生成插件</td><td style="text-align:center"><a href="http://lab.rayps.com/lsg2/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">android_resizer_toolkit</td><td></td><td style="text-align:center"><a href="https://github.com/marcosecchi/android_resizer_toolkit">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">android-ps-tools</td><td>一些方便Android UI设计的PhototShop插件。</td><td style="text-align:center"><a href="https://github.com/timroes/android-ps-tools">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">LayerCraft</td><td>A Photoshop plugin to export UI assets from layers</td><td style="text-align:center"><a href="http://lab.rayps.com/lc/" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="矢量图设计工具"><a href="#矢量图设计工具" class="headerlink" title="矢量图设计工具"></a>矢量图设计工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Sketch 3</td><td></td><td style="text-align:center"><a href="http://bohemiancoding.com/sketch/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Affinity Designer</td><td></td><td style="text-align:center"><a href="https://affinity.serif.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Gravit</td><td></td><td style="text-align:center"><a href="http://gravit.io" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Adobe Illustrator</td><td></td><td style="text-align:center"><a href="https://www.adobe.com/cn/products/illustrator.html" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="切图工具"><a href="#切图工具" class="headerlink" title="切图工具"></a>切图工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Slicy</td><td></td><td style="text-align:center"><a href="http://macrabbit.com/slicy/" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="设计稿尺寸标注工具"><a href="#设计稿尺寸标注工具" class="headerlink" title="设计稿尺寸标注工具"></a>设计稿尺寸标注工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">马克鳗</td><td></td><td style="text-align:center"><a href="http://www.getmarkman.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">PxCook像素大厨</td><td>UI设计师效率提升利器，让你专注于设计本质，<br>不再为标注切图而烦恼，从设计到实现一气呵成</td><td style="text-align:center"><a href="http://www.fancynode.com.cn" target="_blank" rel="external">下载</a></td><td style="text-align:center"><a href="http://www.fancynode.com.cn/tutorial" target="_blank" rel="external">使用教程</a></td></tr></tbody></table><h4 id="原型设计工具"><a href="#原型设计工具" class="headerlink" title="原型设计工具"></a>原型设计工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Axure</td><td></td><td style="text-align:center"><a href="http://www.axure.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Fluid UI</td><td></td><td style="text-align:center"><a href="https://chrome.google.com/webstore/detail/fluid-ui/obgmmkbgpilmggfkhganmcmpemnhimgg?hl=en" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Briefs</td><td></td><td style="text-align:center"><a href="http://giveabrief.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Flinto</td><td></td><td style="text-align:center"><a href="https://www.flinto.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Balsamiq Mockups</td><td></td><td style="text-align:center"><a href="http://balsamiq.com/products/mockups/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AppCooker</td><td></td><td style="text-align:center"><a href="http://www.appcooker.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Proto.io</td><td></td><td style="text-align:center"><a href="https://proto.io/en/signup/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">UXPin</td><td></td><td style="text-align:center"><a href="http://uxpin.com/#" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">InVision</td><td></td><td style="text-align:center"><a href="http://www.invisionapp.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">POP</td><td></td><td style="text-align:center"><a href="https://popapp.in" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">快现</td><td></td><td style="text-align:center"><a href="http://www.ikuaixian.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Composite</td><td></td><td style="text-align:center"><a href="http://www.getcomposite.com/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">OmniGraffle</td><td></td><td style="text-align:center"><a href="https://www.omnigroup.com/omnigraffle" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Marvelapp</td><td></td><td style="text-align:center"><a href="https://marvelapp.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Justinmind</td><td></td><td style="text-align:center"><a href="http://www.justinmind.com/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Form</td><td></td><td style="text-align:center"><a href="http://www.relativewave.com/form.html" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Prott</td><td></td><td style="text-align:center"><a href="https://prottapp.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Composite</td><td></td><td style="text-align:center"><a href="http://www.getcomposite.com/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Avocado</td><td></td><td style="text-align:center"><a href="https://github.com/ideo/avocado">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Pixate</td><td></td><td style="text-align:center"><a href="http://www.pixate.com/" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="交互设计工具"><a href="#交互设计工具" class="headerlink" title="交互设计工具"></a>交互设计工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Framer Studio</td><td></td><td style="text-align:center"><a href="http://framerjs.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Quartz Composer</td><td></td><td style="text-align:center"><a href="http://adcdownload.apple.com/Developer_Tools/graphics_tools_for_xcode__march_2014/graphics_tools_for_xcode_5.1__march_2014.dmg" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Origami</td><td></td><td style="text-align:center"><a href="http://facebook.github.io/origami/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">jQC</td><td></td><td style="text-align:center"><a href="http://qcdesigners.com/index.php/forums" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="UI效果预览工具"><a href="#UI效果预览工具" class="headerlink" title="UI效果预览工具"></a>UI效果预览工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android Design Preview</td><td></td><td style="text-align:center"><a href="https://github.com/romannurik/AndroidDesignPreview/releases">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">PS Play</td><td></td><td style="text-align:center"><a href="http://isux.tencent.com/app/psplay" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Pixl Preview</td><td></td><td style="text-align:center"><a href="https://play.google.com/store/apps/details?id=at.markushi.pixl" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Skala Preview</td><td></td><td style="text-align:center"><a href="http://bjango.com/mac/skalapreview/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">LiveView</td><td></td><td style="text-align:center"><a href="http://www.zambetti.com/projects/liveview/" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="配色工具"><a href="#配色工具" class="headerlink" title="配色工具"></a>配色工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Android Material Design可视化调色板</td><td></td><td style="text-align:center"><a href="https://github.com/HozakaN/MaterialDesignColorPalette">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Material Design Colours.xml</td><td></td><td style="text-align:center"><a href="https://gist.github.com/daniellevass/b0b8cfa773488e138037" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Colorube配色神器</td><td></td><td style="text-align:center"><a href="http://www.fancynode.com/colorcube/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Adobe Kuler</td><td></td><td style="text-align:center"><a href="https://kuler.adobe.com/zh/create/color-wheel/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">ColorSchemer Studio</td><td></td><td style="text-align:center"><a href="http://www.colorschemer.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Piknik</td><td></td><td style="text-align:center"><a href="https://gist.github.com/daniellevass/b0b8cfa773488e138037" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="设计稿版本控制工具"><a href="#设计稿版本控制工具" class="headerlink" title="设计稿版本控制工具"></a>设计稿版本控制工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">LayerVault</td><td></td><td style="text-align:center"><a href="https://layervault.com" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="图标处理工具"><a href="#图标处理工具" class="headerlink" title="图标处理工具"></a>图标处理工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Icon Slate</td><td></td><td style="text-align:center"><a href="http://www.kodlian.com/apps" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="在线Icon库"><a href="#在线Icon库" class="headerlink" title="在线Icon库"></a>在线Icon库</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">IconFont</td><td></td><td style="text-align:center"><a href="http://iconfont.cn" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">NounProject</td><td></td><td style="text-align:center"><a href="http://thenounproject.com" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="取色工具"><a href="#取色工具" class="headerlink" title="取色工具"></a>取色工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">ColorSnapper</td><td></td><td style="text-align:center"><a href="http://colorsnapper.com" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="不透明度16进制值"><a href="#不透明度16进制值" class="headerlink" title="不透明度16进制值"></a>不透明度16进制值</h4><table><thead><tr><th style="text-align:center">不透明度</th><th style="text-align:center">16进制值</th></tr></thead><tbody><tr><td style="text-align:center">100%</td><td style="text-align:center">FF</td></tr><tr><td style="text-align:center">95%</td><td style="text-align:center">F2</td></tr><tr><td style="text-align:center">90%</td><td style="text-align:center">E6</td></tr><tr><td style="text-align:center">85%</td><td style="text-align:center">D9</td></tr><tr><td style="text-align:center">80%</td><td style="text-align:center">CC</td></tr><tr><td style="text-align:center">75%</td><td style="text-align:center">BF</td></tr><tr><td style="text-align:center">70%</td><td style="text-align:center">B3</td></tr><tr><td style="text-align:center">65%</td><td style="text-align:center">A6</td></tr><tr><td style="text-align:center">60%</td><td style="text-align:center">99</td></tr><tr><td style="text-align:center">55%</td><td style="text-align:center">8C</td></tr><tr><td style="text-align:center">50%</td><td style="text-align:center">80</td></tr><tr><td style="text-align:center">45%</td><td style="text-align:center">73</td></tr><tr><td style="text-align:center">40%</td><td style="text-align:center">66</td></tr><tr><td style="text-align:center">35%</td><td style="text-align:center">59</td></tr><tr><td style="text-align:center">30%</td><td style="text-align:center">4D</td></tr><tr><td style="text-align:center">25%</td><td style="text-align:center">40</td></tr><tr><td style="text-align:center">20%</td><td style="text-align:center">33</td></tr><tr><td style="text-align:center">15%</td><td style="text-align:center">26</td></tr><tr><td style="text-align:center">10%</td><td style="text-align:center">1A</td></tr><tr><td style="text-align:center">5%</td><td style="text-align:center">0D</td></tr><tr><td style="text-align:center">0%</td><td style="text-align:center">00</td></tr></tbody></table><p>出自：<a href="http://stackoverflow.com/questions/5445085/understanding-colors-in-android-6-chars" target="_blank" rel="external">http://stackoverflow.com/questions/5445085/understanding-colors-in-android-6-chars</a></p><h4 id="手机To电脑同步预览工具"><a href="#手机To电脑同步预览工具" class="headerlink" title="手机To电脑同步预览工具"></a>手机To电脑同步预览工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">Reflector</td><td></td><td style="text-align:center"><a href="http://www.airsquirrels.com/reflector/download/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">x-Mirage</td><td></td><td style="text-align:center"><a href="http://x-mirage.com/x-mirage/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AirServer</td><td></td><td style="text-align:center"><a href="http://www.airserver.com" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">BBQScreen</td><td></td><td style="text-align:center"><a href="http://screen.bbqdroid.org" target="_blank" rel="external">下载</a></td></tr></tbody></table><h4 id="Gif图片录制工具"><a href="#Gif图片录制工具" class="headerlink" title="Gif图片录制工具"></a>Gif图片录制工具</h4><table><thead><tr><th style="text-align:left">名称</th><th>简介</th><th style="text-align:center">下载地址</th><th style="text-align:center">使用教程</th></tr></thead><tbody><tr><td style="text-align:left">LICEcap</td><td></td><td style="text-align:center"><a href="http://www.cockos.com/licecap/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">GifCam</td><td></td><td style="text-align:center"><a href="http://blog.bahraniapps.com/gifcam/" target="_blank" rel="external">下载</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Android Tool</td><td></td><td style="text-align:center"><a href="https://github.com/mortenjust/androidtool-mac">下载</a></td></tr></tbody></table><h2 id="UI-Programming-Language"><a href="#UI-Programming-Language" class="headerlink" title="UI Programming Language"></a>UI Programming Language</h2><p><a href="http://uilang.com" target="_blank" rel="external">UILang</a></p><h2 id="Tutorials-1"><a href="#Tutorials-1" class="headerlink" title="Tutorials"></a>Tutorials</h2><p><a href="https://hackdesign.org/lessons" target="_blank" rel="external">HackDesign</a></p><h2 id="Games"><a href="#Games" class="headerlink" title="Games"></a>Games</h2><p><a href="http://bezier.method.ac" target="_blank" rel="external">The Bezier Game</a></p><p>一个帮助你练习PS里钢笔工具的小游戏。</p><h2 id="Guides-1"><a href="#Guides-1" class="headerlink" title="Guides"></a>Guides</h2><h4 id="Android设计指南非官方简体中文版"><a href="#Android设计指南非官方简体中文版" class="headerlink" title="Android设计指南非官方简体中文版"></a>Android设计指南非官方简体中文版</h4><p>Topfun镜像地址：<a href="http://www.topfun.us/adchs/index.html" target="_blank" rel="external">http://www.topfun.us/adchs/index.html</a></p><p>Github镜像地址：<a href="http://adchs.github.io" target="_blank" rel="external">http://adchs.github.io</a></p><p>ApkBus镜像地址：<a href="http://www.apkbus.com/design/" target="_blank" rel="external">http://www.apkbus.com/design/</a></p><p>Segmentfault镜像地址：<a href="http://mirrors.segmentfault.com/adchs/" target="_blank" rel="external">http://mirrors.segmentfault.com/adchs/</a></p><p>多看阅读镜像地址：<a href="http://www.duokan.com/book/47790" target="_blank" rel="external">http://www.duokan.com/book/47790</a></p><h4 id="Android-Cheatsheet-for-Graphic-Designers"><a href="#Android-Cheatsheet-for-Graphic-Designers" class="headerlink" title="Android Cheatsheet for Graphic Designers"></a>Android Cheatsheet for Graphic Designers</h4><p>地址:<a href="http://petrnohejl.github.io/Android-Cheatsheet-For-Graphic-Designers/" target="_blank" rel="external">http://petrnohejl.github.io/Android-Cheatsheet-For-Graphic-Designers/</a></p><h4 id="Google-Material-Design-中文版"><a href="#Google-Material-Design-中文版" class="headerlink" title="Google Material Design 中文版"></a>Google Material Design 中文版</h4><p>地址：<a href="http://design.1sters.com" target="_blank" rel="external">http://design.1sters.com</a></p><p>地址： <a href="http://www.ui.cn/Material/" target="_blank" rel="external">http://www.ui.cn/Material/</a></p><h4 id="Designer’s-Guide-To-dpi"><a href="#Designer’s-Guide-To-dpi" class="headerlink" title="Designer’s Guide To dpi"></a>Designer’s Guide To dpi</h4><p>地址：<a href="http://sebastien-gabriel.com/designers-guide-to-dpi/home#" target="_blank" rel="external">http://sebastien-gabriel.com/designers-guide-to-dpi/home</a></p><h4 id="Email-Design-Guide"><a href="#Email-Design-Guide" class="headerlink" title="Email Design Guide"></a>Email Design Guide</h4><p>地址：<a href="http://mailchimp.com/resources/email-design-guide/" target="_blank" rel="external">http://mailchimp.com/resources/email-design-guide/</a></p><h2 id="Free-Design-Resources"><a href="#Free-Design-Resources" class="headerlink" title="Free Design Resources"></a>Free Design Resources</h2><p><a href="http://pan.baidu.com/s/1i35iBNv" target="_blank" rel="external">Google Material Design 素材</a>(感谢 <a href="http://weibo.com/sanityd" target="_blank" rel="external">@SanityD</a>)</p><p><a href="https://dribbble.com/shots/1617724" target="_blank" rel="external">Material Design Icon Templates</a></p><p><a href="https://github.com/google/material-design-icons">Material Design的图标集</a></p><p><a href="https://www.behance.net/gallery/20514895/Material-Design-UI-Kit" target="_blank" rel="external">Material Design UI Kit for Sketch</a></p><p><a href="http://tristanremy.com/nexus-5/" target="_blank" rel="external">Nexus 5 template for Sketch</a></p><p><a href="http://androiduiux.com/free-design-resources/?blogsub=confirming#blog_subscription-2" target="_blank" rel="external">Free Design Resources</a></p><p><a href="https://dl.dropboxusercontent.com/u/8067075/System%20Icons.zip" target="_blank" rel="external">434 SVG icons</a></p><p><a href="http://ui-cloud.com" target="_blank" rel="external">UI Cloun</a></p><p><a href="http://github.com/nullice/NViconsLib_Silhouette">161个国内外社交网站矢量图标</a></p><p><a href="http://www.androidicons.com" target="_blank" rel="external">250 free icons in 5 sizes and 14 colors</a></p><p><a href="http://matt-cooper.com/minimalistic-icons/" target="_blank" rel="external">MINIMALISTIC EVERYDAY ICONS</a></p><p><a href="http://www.icons4android.com" target="_blank" rel="external">Icons4Android</a></p><h1 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h1><hr><p><a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#android">Free Programming Books</a></p><p>一堆免费的Android开发相关的电子书。</p><p><a href="http://www.it-ebooks.info/book/2445/" target="_blank" rel="external">50 Android Hacks</a></p><p>50 Android Hacks这本书分12个部分介绍了50个Android开发的小技巧。</p><p><a href="http://siberiawolf.com/free_programming/index.html" target="_blank" rel="external">免费的编程中文书籍索引</a></p><h1 id="Disclaimer"><a href="#Disclaimer" class="headerlink" title="Disclaimer"></a>Disclaimer</h1><hr><pre><code>版权归原作者所有，这里仅做收集整理，欢迎自由转载-非商用-非衍生-保持署名和链接。</code></pre><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AndroidDevTools&quot;&gt;&lt;a href=&quot;#AndroidDevTools&quot; class=&quot;headerlink&quot; title=&quot;AndroidDevTools&quot;&gt;&lt;/a&gt;AndroidDevTools&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://
      
    
    </summary>
    
      <category term="开发工具" scheme="https://github.com/itgoyo/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>你真的了解AsyncTask吗</title>
    <link href="https://github.com/itgoyo/2017/07/26/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3AsyncTask%E5%90%97.html"/>
    <id>https://github.com/itgoyo/2017/07/26/你真的了解AsyncTask吗.html</id>
    <published>2017-07-26T12:09:45.000Z</published>
    <updated>2017-11-23T13:14:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><h2 id="你真的了解AsyncTask"><a href="#你真的了解AsyncTask" class="headerlink" title="你真的了解AsyncTask?"></a>你真的了解AsyncTask?</h2><p>虽说现在做网络请求有了Volley全家桶和OkHttp这样好用的库，但是在处理其他后台任务以及与UI交互上，还是需要用到AsyncTask。但是你真的了解AsyncTask吗？</p><p>AsyncTask的实现几经修改，因此在不同版本的Android系统上表现各异；我相信，任何一个用户量上千万的产品绝对不会在代码里面使用系统原生的AsynTask，因为它蛋疼的兼容性以及极高的崩溃率实在让人不敢恭维。本文将带你了解AsyncTask背后的原理，并给出一个久经考验的AsyncTask修改版。</p><h2 id="AsyncTask是什么？"><a href="#AsyncTask是什么？" class="headerlink" title="AsyncTask是什么？"></a>AsyncTask是什么？</h2><p>AsyncTask到底是什么呢？很简单，<strong>它不过是对线程池和Handler的封装</strong>；用线程池来处理后台任务，用Handler来处理与UI的交互。线程池使用的是<code>Executor</code>接口，我们先了解一下线程池的特性。</p><h2 id="线程池ThreadPoolExecutor"><a href="#线程池ThreadPoolExecutor" class="headerlink" title="线程池ThreadPoolExecutor"></a>线程池ThreadPoolExecutor</h2><p>JDK5带来的一大改进就是Java的并发能力，它提供了三种并发武器：并发框架Executor，并发集合类型如ConcurrentHashMap，并发控制类如CountDownLatch等；圣经《Effective Java》也说，尽量使用Exector而不是直接用Thread类进行并发编程。</p><p>AsyncTask内部也使用了线程池处理并发；线程池通过<code>ThreadPoolExector</code>类构造，这个构造函数参数比较多，它允许开发者对线程池进行定制，我们先看看这每个参数是什么意思，然后看看Android是以何种方式定制的。</p><p>ThreadPoolExecutor的其他构造函数最终都会调用如下的构造函数完成对象创建工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></div><div class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></div><div class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></div><div class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></div><div class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span></span></div></pre></td></tr></table></figure><ul><li>corePoolSize: 核心线程数目，即使线程池没有任务，核心线程也不会终止（除非设置了allowCoreThreadTimeOut参数）可以理解为“常驻线程”</li><li>maximumPoolSize: 线程池中允许的最大线程数目；一般来说，线程越多，线程调度开销越大；因此一般都有这个限制。</li><li>keepAliveTime: 当线程池中的线程数目比核心线程多的时候，如果超过这个keepAliveTime的时间，多余的线程会被回收；这些与核心线程相对的线程通常被称为缓存线程</li><li>unit: keepAliveTime的时间单位</li><li>workQueue: 任务执行前保存任务的队列；这个队列仅保存由execute提交的Runnable任务</li><li>threadFactory: 用来构造线程池的工厂；一般都是使用默认的；</li><li>handler: 当线程池由于线程数目和队列限制而导致后续任务阻塞的时候，线程池的处理方式。</li></ul><p>那么，当一个新的任务到达的时候，线程池中的线程是如何调度的呢？（别慌，讲这么一大段线程池的知识，是为了理解AsyncTask；Be Patient）</p><ol><li>如果线程池中线程的数目少于corePoolSize，就算线程池中有其他的没事做的核心线程，线程池还是会重新创建一个核心线程；直到核心线程数目到达corePoolSize（常驻线程就位）</li><li>如果线程池中线程的数目大于或者等于corePoolSize，但是工作队列workQueue没有满，那么新的任务会放在队列workQueue中，按照FIFO的原则依次等待执行；（当有核心线程处理完任务空闲出来后，会检查这个工作队列然后取出任务默默执行去）</li><li>如果线程池中线程数目大于等于corePoolSize，并且工作队列workQueue满了，但是总线程数目小于maximumPoolSize，那么直接创建一个线程处理被添加的任务。</li><li>如果工作队列满了，并且线程池中线程的数目到达了最大数目maximumPoolSize，那么就会用最后一个构造参数<code>handler</code>处理；<strong>默认的处理方式是直接丢掉任务，然后抛出一个异常。</strong></li></ol><p>总结起来，也即是说，当有新的任务要处理时，<strong>先看线程池中的线程数量是否大于 corePoolSize，再看缓冲队列 workQueue 是否满，最后看线程池中的线程数量是否大于 maximumPoolSize</strong>。另外，当线程池中的线程数量大于 corePoolSize 时，如果里面有线程的空闲时间超过了 keepAliveTime，就将其移除线程池，这样，可以动态地调整线程池中线程的数量。</p><p>我们以API 22为例，看一看AsyncTask里面的线程池是以什么参数构造的；AsyncTask里面有“两个”线程池；一个<code>THREAD_POOL_EXECUTOR</code>一个<code>SERIAL_EXECUTOR</code>；之所以打引号，是因为其实<code>SERIAL_EXECUTOR</code>也使用<code>THREAD_POOL_EXECUTOR</code>实现的，只不过加了一个队列弄成了串行而已，那么这个<code>THREAD_POOL_EXECUTOR</code>是如何构造的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = CPU_COUNT + <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE = <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</div><div class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR</div><div class="line">            = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</div><div class="line">                    TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</div></pre></td></tr></table></figure><p>可以看到，AsyncTask里面线程池是一个核心线程数为<code>CPU + 1</code>，最大线程数为<code>CPU * 2 + 1</code>，工作队列长度为<strong>128</strong>的线程池；并且没有传递<code>handler</code>参数，那么使用的就是默认的Handler（拒绝执行).</p><p>那么问题来了：</p><ol><li>如果任务过多，那么超过了工作队列以及线程数目的限制导致这个线程池发生阻塞，那么悲剧发生，默认的处理方式会直接抛出一个异常导致进程挂掉。假设你自己写一个异步图片加载的框架，然后用AsyncTask实现的话，当你快速滑动ListView的时候很容易发生这种异常；这也是为什么各大ImageLoader都是自己写线程池和Handlder的原因。</li><li>这个线程池是一个静态变量；那么在同一个进程之内，所有地方使用到的AsyncTask默认构造函数构造出来的AsyncTask都使用的是同一个线程池，如果App模块比较多并且不加控制的话，很容易满足第一条的崩溃条件；如果你不幸在不同的AsyncTask的doInBackgroud里面访问了共享资源，那么就会发生各种并发编程问题。</li><li>在AsyncTask全部执行完毕之后，进程中还是会常驻corePoolSize个线程；在Android 4.4 （API 19）以下，这个corePoolSize是hardcode的，数值是5；API 19改成了<code>cpu + 1</code>；也就是说，在Android 4.4以前；如果你执行了超过五个AsyncTask；然后啥也不干了，进程中还是会有5个AsyncTask线程；不信，你看：</li></ol><p><img src="/images/asynctask.png" alt="img"></p><h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><p>AsyncTask里面的handler很简单，如下（API 22代码）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InternalHandler sHandler = <span class="keyword">new</span> InternalHandler();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意，这里直接用的主线程的Looper；如果去看API 22以下的代码，会发现它没有这个构造函数，而是使用默认的；默认情况下，Handler会使用当前线程的Looper，如果你的AsyncTask是在子线程创建的，那么很不幸，你的<code>onPreExecute</code>和<code>onPostExecute</code>并非在UI线程执行，而是被Handler post到创建它的那个线程执行；如果你在这两个线程更新了UI，那么直接导致崩溃。这也是大家口口相传的<strong>AsyncTask必须在主线程创建</strong>的原因。</p><p>另外，AsyncTask里面的这个Handler是一个静态变量，也就是说它是在类加载的时候创建的；如果在你的APP进程里面，以前从来没有使用过AsyncTask，然后在子线程使用AsyncTask的相关变量，那么导致静态Handler初始化，如果在API 16以下，那么会出现上面同样的问题；这就是<strong>AsyncTask必须在主线程初始化</strong> 的原因。</p><p>事实上，在Android 4.1(API 16)以后，在APP主线程ActivityThread的main函数里面，直接调用了<code>AscynTask.init</code>函数确保这个类是在主线程初始化的；另外，init这个函数里面获取了<code>InternalHandler</code>的Looper，由于是在主线程执行的，因此，AsyncTask的Handler用的也是主线程的Looper。这个问题从而得到彻底的解决。</p><h2 id="AsyncTask是并行执行的吗？"><a href="#AsyncTask是并行执行的吗？" class="headerlink" title="AsyncTask是并行执行的吗？"></a>AsyncTask是并行执行的吗？</h2><p>现在知道AsyncTask内部有一个线程池，那么派发给AsyncTask的任务是并行执行的吗？</p><p>答案是不确定。在Android 1.5刚引入的时候，AsyncTask的<code>execute</code>是串行执行的；到了Android 1.6直到Android 2.3.2，又被修改为并行执行了，这个执行任务的线程池就是<code>THREAD_POOL_EXECUTOR</code>，因此在一个进程内，所有的AsyncTask都是并行执行的；但是在Android 3.0以后，如果你使用<code>execute</code>函数直接执行AsyncTask，那么<strong>这些任务是串行执行的</strong>；（你说蛋疼不）源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个<code>sDefaultExecutor</code>就是用来执行任务的线程池，那么它的值是什么呢？继续看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</div></pre></td></tr></table></figure><p>因此结论就来了：<strong>Android 3.0以上，AsyncTask默认并不是并行执行的</strong>；</p><h3 id="为什么默认不并行执行？"><a href="#为什么默认不并行执行？" class="headerlink" title="为什么默认不并行执行？"></a>为什么默认不并行执行？</h3><p>也许你不理解，为什么AsyncTask默认把它设计为串行执行的呢？</p><p>由于一个进程内所有的AsyncTask都是使用的同一个线程池执行任务；如果同时有几个AsyncTask一起并行执行的话，恰好AysncTask的使用者在<code>doInbackgroud</code>里面访问了相同的资源，但是自己没有处理同步问题；那么就有可能导致灾难性的后果！</p><p>由于开发者通常不会意识到需要对他们创建的所有的AsyncTask对象里面的<code>doInbackgroud</code>做同步处理，因此，API的设计者为了避免这种无意中访问并发资源的问题，干脆把这个API设置为默认所有串行执行的了。如果你明确知道自己需要并行处理任务，那么你需要使用<code>executeOnExecutor(Executor exec,Params... params)</code>这个函数来指定你用来执行任务的线程池，同时为自己的行为负责。（处理同步问题）</p><p>实际上《Effective Java》里面有一条原则说的就是这种情况：不要在同步块里面调用不可信的外来函数。这里明显违背了这个原则：AsyncTask这个类并不知道使用者会在<code>doInBackgroud</code>这个函数里面做什么，但是对它的行为做了某种假设。</p><h3 id="如何让AsyncTask并行执行？"><a href="#如何让AsyncTask并行执行？" class="headerlink" title="如何让AsyncTask并行执行？"></a>如何让AsyncTask并行执行？</h3><p>正如上面所说，如果你确定自己做好了同步处理，或者你没有在不同的AsyncTask里面访问共享资源，需要AsyncTask能够并行处理任务的话，你可以用带有两个参数的<code>executeOnExecutor</code>执行任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> AsyncTask&lt;Void, Void, Vo</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);</div></pre></td></tr></table></figure><h2 id="更好的AsyncTask"><a href="#更好的AsyncTask" class="headerlink" title="更好的AsyncTask"></a>更好的AsyncTask</h2><p>从上面的分析得知，AsyncTask有如下问题：</p><ol><li>默认的AsyncTask如果处理的任务过多，会导致程序直接崩溃；</li><li>AsyncTask类必须在主线程初始化，必须在主线程创建，不然在API 16以下很大概率崩溃。</li><li>如果你曾经使用过AsyncTask，以后不用了；在Android 4.4以下，进程内也默认有5个AsyncTask线程；在Android 4.4以上，默认有<code>CPU + 1</code>个线程。</li><li>Android 3.0以上的AsyncTask默认是串行执行任务的；如果要并行执行需要调用低版本没有的API，处理麻烦。</li></ol><p>因此我们对系统的AsyncTask做了一些修改，在不同Android版本提供一致的行为，并且提高了使用此类的安全性，主要改动如下：</p><ol><li>添加对于任务过多导致崩溃的异常保护；在这里进行必要的数据统计上报工作；如果出现这个问题，说明AsyncTask不适合这种场景了，需要考虑重构；</li><li>移植API 22对于Handler的处理；这样就算在线程创建异步任务，也不会有任何问题；</li><li>提供串行执行和并行执行的<code>execute</code>方法；默认串行执行，如果明确知道自己在干什么，可以使用<code>executeParallel</code>并行执行。</li><li>在<code>doInbackgroud</code>里面频繁崩溃的地方加上<code>try..catch</code>；自己处理数据上报工作。</li></ol><p>完整代码见gist，<a href="https://gist.github.com/tiann/8860bcc514f067ab4291" target="_blank" rel="external">BetterAsyncTask</a></p><blockquote><p>原文地址：<a href="http://weishu.me/2016/01/18/dive-into-asynctask/" target="_blank" rel="external">http://weishu.me/2016/01/18/dive-into-asynctask/</a></p></blockquote><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ViewDragHelper源码解析</title>
    <link href="https://github.com/itgoyo/2017/07/26/ViewDragHelper%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/ViewDragHelper源码解析.html</id>
    <published>2017-07-26T12:08:18.000Z</published>
    <updated>2017-11-23T13:11:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><h2 id="ViewDragHelper源码解析"><a href="#ViewDragHelper源码解析" class="headerlink" title="ViewDragHelper源码解析"></a>ViewDragHelper源码解析</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>我们了解了<code>ViewDragHelper</code>是可以帮助我们处理各种拖拽事件的类.使用好<code>ViewDragHelper</code>能帮助我们做出各种酷炫的交互,今天我们就来分析一下<code>ViewDragHelper</code>的使用与实现</p><h3 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h3><p>我们这里就以<a href="http://blog.csdn.net/lmj623565791/article/details/46858663" target="_blank" rel="external">翔总的这篇文章</a>中的例子来介绍一下<code>ViewDragHelper</code>的使用.另外,本文中的demo可以在<a href="https://github.com/Skykai521/ViewDragHelperDemo">这里找到</a></p><p>首先我们创建一个<code>DragLayout</code>类并继承自<code>LinearLayout</code>,然后我们准备在<code>DragLayout</code>放置三个<code>View</code>第一个用来被我们拖动然后停止在松手的位置,第二个可以被我们拖动,松手的时候滑动到指定位置,第三个只可以通过触摸边缘来进行拖动,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DragLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ViewDragHelper mDragger;</div><div class="line">    <span class="keyword">private</span> View mDragView;</div><div class="line">    <span class="keyword">private</span> View mAutoBackView;</div><div class="line">    <span class="keyword">private</span> View mEdgeTrackerView;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Point mAutoBackOriginPos = <span class="keyword">new</span> Point();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DragLayout</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DragLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DragLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        initViewDragHelper();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViewDragHelper</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDragger = ViewDragHelper.create(<span class="keyword">this</span>,myCallback);</div><div class="line">        mDragger.setEdgeTrackingEnabled(ViewDragHelper.EDGE_ALL);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ViewDragHelper.Callback myCallback = <span class="keyword">new</span> ViewDragHelper.Callback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="comment">//child为当前触摸区域下的View,如果返回true,就可以拖拽.</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> child == mDragView || child == mAutoBackView;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//松手时的回调</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (releasedChild == mAutoBackView) &#123;</div><div class="line">                mDragger.settleCapturedViewAt(mAutoBackOriginPos.x, mAutoBackOriginPos.y);</div><div class="line">                invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//边缘触摸开始时的回调</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeDragStarted</span><span class="params">(<span class="keyword">int</span> edgeFlags, <span class="keyword">int</span> pointerId)</span> </span>&#123;</div><div class="line">            mDragger.captureChildView(mEdgeTrackerView, pointerId);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//获取水平方向允许拖拽的区域,这里是父布局的宽-子控件的宽</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewHorizontalDragRange</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> getMeasuredWidth() - child.getMeasuredWidth();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//获取垂直方向允许拖拽的范围</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewVerticalDragRange</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> getMeasuredHeight() - child.getMeasuredHeight();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//left为child即将移动到的水平位置的值,但是返回值会最终决定移动到的值</span></div><div class="line">        <span class="comment">//这里直接返回了left</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> left;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//同上只是这里是垂直方向</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> top;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mDragger.continueSettling(<span class="keyword">true</span>)) &#123;</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDragger.shouldInterceptTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        mDragger.processTouchEvent(event);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onFinishInflate();</div><div class="line">        mDragView = getChildAt(<span class="number">0</span>);</div><div class="line">        mAutoBackView = getChildAt(<span class="number">1</span>);</div><div class="line">        mEdgeTrackerView = getChildAt(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onLayout(changed, l, t, r, b);</div><div class="line">        mAutoBackOriginPos.x = mAutoBackView.getLeft();</div><div class="line">        mAutoBackOriginPos.y = mAutoBackView.getTop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>我们首先在构造方法里传入了当前类的对象和我们定义的<code>ViewDragHelper.Callback</code>对象初始化了我们的<code>ViewDragHelper</code>,然后我们希望所有的边缘触摸都能触发<code>mEdgeTrackerView</code>的拖动,所以我们紧接着调用了<code>mDragger.setEdgeTrackingEnabled(ViewDragHelper.EDGE_ALL);</code>方法.</li><li>在我们定义的<code>Callback</code>中,有多个回调方法,每个回调方法都有它的作用,在代码里注释比较清楚了，我们下面也会解析每一个<code>Callback</code>中回调方法的作用.</li><li>第三步我们需要在<code>onInterceptTouchEvent()</code>方法和<code>onTouchEvent()</code>将事件委托给<code>ViewDragHelper</code>去处理,这样<code>ViewDragHelper</code>才能根据响应的事件并回调我们自己编写的<code>Callback</code>接口来进行响应的处理,</li><li>由于<code>ViewDragHelper</code>中的滑动是交给<code>Srcoller</code>类来处理的所以这里我们要重写<code>computeScroll()</code>方法,配合<code>Scroller</code>完成滚动动画.</li><li>最后在<code>onFinishInflate()</code>里获取到我们的<code>View</code>对象即可.</li></ul><h3 id="3-类关系图"><a href="#3-类关系图" class="headerlink" title="3. 类关系图"></a>3. 类关系图</h3><p>由于就一个类类图我们就不画了,但是作为一个强迫症患者,这个标题必须有…</p><h3 id="4-源码分析"><a href="#4-源码分析" class="headerlink" title="4. 源码分析"></a>4. 源码分析</h3><h4 id="4-1-ViewDragHelper-Callback的实现"><a href="#4-1-ViewDragHelper-Callback的实现" class="headerlink" title="4.1 ViewDragHelper.Callback的实现"></a>4.1 ViewDragHelper.Callback的实现</h4><p>在分析<code>ViewDragHelper</code>之前,我们先来分析一下<code>Callback</code>的定义,看看<code>Callback</code>都定义了哪些方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Callback</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//当View的拖拽状态改变时回调,state为STATE_IDLE,STATE_DRAGGING,STATE_SETTLING的一种</span></div><div class="line">    <span class="comment">//STATE_IDLE:　当前未被拖拽</span></div><div class="line">    <span class="comment">//STATE_DRAGGING：正在被拖拽</span></div><div class="line">    <span class="comment">//STATE_SETTLING:　被拖拽后需要被安放到一个位置中的状态</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDragStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">//当View被拖拽位置发生改变时回调</span></div><div class="line">    <span class="comment">//changedView ：被拖拽的View</span></div><div class="line">    <span class="comment">//left : 被拖拽后View的left边缘坐标</span></div><div class="line">    <span class="comment">//top : 被拖拽后View的top边缘坐标</span></div><div class="line">    <span class="comment">//dx : 拖动的x偏移量</span></div><div class="line">    <span class="comment">//dy : 拖动的y偏移量</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewPositionChanged</span><span class="params">(View changedView, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">//当一个View被捕获到准备开始拖动时回调,</span></div><div class="line">    <span class="comment">//capturedChild : 捕获的View</span></div><div class="line">    <span class="comment">//activePointerId : 对应的PointerId</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCaptured</span><span class="params">(View capturedChild, <span class="keyword">int</span> activePointerId)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">//当被捕获拖拽的View被释放是回调</span></div><div class="line">    <span class="comment">//releasedChild : 被释放的View</span></div><div class="line">    <span class="comment">//xvel : 释放View的x方向上的加速度</span></div><div class="line">    <span class="comment">//yvel : 释放View的y方向上的加速度</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果parentView订阅了边缘触摸,则如果有边缘触摸就回调的接口</span></div><div class="line">    <span class="comment">//edgeFlags : 当前触摸的flag 有: EDGE_LEFT,EDGE_TOP,EDGE_RIGHT,EDGE_BOTTOM</span></div><div class="line">    <span class="comment">//pointerId : 用来描述边缘触摸操作的id</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeTouched</span><span class="params">(<span class="keyword">int</span> edgeFlags, <span class="keyword">int</span> pointerId)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">//是否锁定该边缘的触摸,默认返回false,返回true表示锁定</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onEdgeLock</span><span class="params">(<span class="keyword">int</span> edgeFlags)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//边缘触摸开始时回调</span></div><div class="line">    <span class="comment">//edgeFlags : 当前触摸的flag 有: EDGE_LEFT,EDGE_TOP,EDGE_RIGHT,EDGE_BOTTOM</span></div><div class="line">    <span class="comment">//pointerId : 用来描述边缘触摸操作的id</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeDragStarted</span><span class="params">(<span class="keyword">int</span> edgeFlags, <span class="keyword">int</span> pointerId)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">//在寻找当前触摸点下的子View时会调用此方法，寻找到的View会提供给tryCaptureViewForDrag()来尝试捕获。</span></div><div class="line">    <span class="comment">//如果需要改变子View的遍历查询顺序可改写此方法，例如让下层的View优先于上层的View被选中。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrderedChildIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> index;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取被拖拽View child 的水平拖拽范围,返回0表示无法被水平拖拽</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewHorizontalDragRange</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取被拖拽View child 的垂直拖拽范围,返回0表示无法被水平拖拽</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewVerticalDragRange</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//尝试捕获被拖拽的View</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//决定拖拽View在水平方向上应该移动到的位置</span></div><div class="line">    <span class="comment">//child : 被拖拽的View</span></div><div class="line">    <span class="comment">//left : 期望移动到位置的View的left值</span></div><div class="line">    <span class="comment">//dx : 移动的水平距离</span></div><div class="line">    <span class="comment">//返回值 : 直接决定View在水平方向的位置</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//决定拖拽View在垂直方向上应该移动到的位置</span></div><div class="line">    <span class="comment">//child : 被拖拽的View</span></div><div class="line">    <span class="comment">//top : 期望移动到位置的View的top值</span></div><div class="line">    <span class="comment">//dy : 移动的垂直距离</span></div><div class="line">    <span class="comment">//返回值 : 直接决定View在垂直方向的位置</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>想必注释已经很清楚了,正是这些回调方法,再结合<code>ViewDragHelper</code>中的各种方法,来帮助我们实现各种各样的拖拽的效果。</p><h4 id="4-2-shouldInterceptTouchEvent-方法的实现"><a href="#4-2-shouldInterceptTouchEvent-方法的实现" class="headerlink" title="4.2 shouldInterceptTouchEvent()方法的实现"></a>4.2 shouldInterceptTouchEvent()方法的实现</h4><p>在这里我们假设大家都清楚了<code>Android</code>的事件分发机制,如果不清楚请看<a href="http://blog.csdn.net/guolin_blog/article/details/9097463" target="_blank" rel="external">这里</a>,要想处理触摸事件,我们需要在<code>onInterceptTouchEvent(MotionEvent ev)</code>方法里判断是否需要拦截这次触摸事件,如果此方法返回<code>true</code>则触摸事件将会交给<code>onTouchEvent(MotionEvent event)</code>处理,这样我们就能处理触摸事件了,所以我们在上面的使用方法里会这样写:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mDragger.shouldInterceptTouchEvent(ev);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    mDragger.processTouchEvent(event);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样就将是否拦截触摸事件,以及处理触摸事件委托给<code>ViewDragHelper</code>来处理了,所以我们先来看看<code>ViewDragHelper</code>中<code>shouldInterceptTouchEvent();</code>方法的实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="comment">//获取action</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(ev);</div><div class="line">    <span class="comment">//获取action对应的index</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = MotionEventCompat.getActionIndex(ev);</div><div class="line"></div><div class="line">    <span class="comment">//如果是按下的action则重置一些信息,包括各种事件点的数组</span></div><div class="line">    <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">        <span class="comment">// Reset things for a new event stream, just in case we didn't get</span></div><div class="line">        <span class="comment">// the whole previous stream.</span></div><div class="line">        cancel();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//初始化mVelocityTracker</span></div><div class="line">    <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</div><div class="line">        mVelocityTracker = VelocityTracker.obtain();</div><div class="line">    &#125;</div><div class="line">    mVelocityTracker.addMovement(ev);</div><div class="line"></div><div class="line">    <span class="comment">//根据action来做相应的处理</span></div><div class="line">    <span class="keyword">switch</span> (action) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY();</div><div class="line">            <span class="comment">//获取这个事件对应的pointerId,一般情况下只有一个手指触摸时为0</span></div><div class="line">            <span class="comment">//两个手指触摸时第二个手指触摸返回的pointerId为1，以此类推</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, <span class="number">0</span>);</div><div class="line">            <span class="comment">//保存点的数据</span></div><div class="line">            <span class="comment">//TODO (1)</span></div><div class="line">            saveInitialMotion(x, y, pointerId);</div><div class="line">            <span class="comment">//获取当前触摸点下最顶层的子View</span></div><div class="line">            <span class="comment">//TODO (2)</span></div><div class="line">            <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</div><div class="line"></div><div class="line">            <span class="comment">//如果toCapture是已经捕获的View,而且正在处于被释放状态</span></div><div class="line">            <span class="comment">//那么就重新捕获</span></div><div class="line">            <span class="keyword">if</span> (toCapture == mCapturedView &amp;&amp; mDragState == STATE_SETTLING) &#123;</div><div class="line">                tryCaptureViewForDrag(toCapture, pointerId);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//如果触摸了边缘,回调callback的onEdgeTouched()方法</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> edgesTouched = mInitialEdgesTouched[pointerId];</div><div class="line">            <span class="keyword">if</span> ((edgesTouched &amp; mTrackingEdges) != <span class="number">0</span>) &#123;</div><div class="line">                mCallback.onEdgeTouched(edgesTouched &amp; mTrackingEdges, pointerId);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//当又有一个手指触摸时</span></div><div class="line">        <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_DOWN: &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, actionIndex);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, actionIndex);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, actionIndex);</div><div class="line"></div><div class="line">            <span class="comment">//保存触摸信息</span></div><div class="line">            saveInitialMotion(x, y, pointerId);</div><div class="line"></div><div class="line">            <span class="comment">//因为同一时间ViewDragHelper只能操控一个View,所以当有新的手指触摸时</span></div><div class="line">            <span class="comment">//只讨论当无触摸发生时,回调边缘触摸的callback</span></div><div class="line">            <span class="comment">//或者正在处于释放状态时重新捕获View</span></div><div class="line">            <span class="keyword">if</span> (mDragState == STATE_IDLE) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> edgesTouched = mInitialEdgesTouched[pointerId];</div><div class="line">                <span class="keyword">if</span> ((edgesTouched &amp; mTrackingEdges) != <span class="number">0</span>) &#123;</div><div class="line">                    mCallback.onEdgeTouched(edgesTouched &amp; mTrackingEdges, pointerId);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mDragState == STATE_SETTLING) &#123;</div><div class="line">                <span class="comment">// Catch a settling view if possible.</span></div><div class="line">                <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</div><div class="line">                <span class="keyword">if</span> (toCapture == mCapturedView) &#123;</div><div class="line">                    tryCaptureViewForDrag(toCapture, pointerId);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//当手指移动时</span></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">            <span class="keyword">if</span> (mInitialMotionX == <span class="keyword">null</span> || mInitialMotionY == <span class="keyword">null</span>) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="comment">// First to cross a touch slop over a draggable view wins. Also report edge drags.</span></div><div class="line">            <span class="comment">//得到触摸点的数量,并循环处理,只处理第一个发生了拖拽的事件</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> pointerCount = MotionEventCompat.getPointerCount(ev);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, i);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, i);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, i);</div><div class="line">                <span class="comment">//获得拖拽偏移量</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">float</span> dx = x - mInitialMotionX[pointerId];</div><div class="line">                <span class="keyword">final</span> <span class="keyword">float</span> dy = y - mInitialMotionY[pointerId];</div><div class="line">                <span class="comment">//获取当前触摸点下最顶层的子View</span></div><div class="line">                <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</div><div class="line">                <span class="comment">//如果找到了最顶层View,并且产生了拖动(checkTouchSlop()返回true)</span></div><div class="line">                <span class="comment">//TODO (3)</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> pastSlop = toCapture != <span class="keyword">null</span> &amp;&amp; checkTouchSlop(toCapture, dx, dy);</div><div class="line">                <span class="keyword">if</span> (pastSlop) &#123;</div><div class="line">                    <span class="comment">//根据callback的四个方法getView[Horizontal|Vertical]DragRange和</span></div><div class="line">                    <span class="comment">//clampViewPosition[Horizontal|Vertical]来检查是否可以拖动</span></div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> oldLeft = toCapture.getLeft();</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> targetLeft = oldLeft + (<span class="keyword">int</span>) dx;</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> newLeft = mCallback.clampViewPositionHorizontal(toCapture,</div><div class="line">                            targetLeft, (<span class="keyword">int</span>) dx);</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> oldTop = toCapture.getTop();</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> targetTop = oldTop + (<span class="keyword">int</span>) dy;</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> newTop = mCallback.clampViewPositionVertical(toCapture, targetTop,</div><div class="line">                            (<span class="keyword">int</span>) dy);</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> horizontalDragRange = mCallback.getViewHorizontalDragRange(</div><div class="line">                            toCapture);</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> verticalDragRange = mCallback.getViewVerticalDragRange(toCapture);</div><div class="line">                    <span class="comment">//如果都不允许移动则跳出循环</span></div><div class="line">                    <span class="keyword">if</span> ((horizontalDragRange == <span class="number">0</span> || horizontalDragRange &gt; <span class="number">0</span></div><div class="line">                            &amp;&amp; newLeft == oldLeft) &amp;&amp; (verticalDragRange == <span class="number">0</span></div><div class="line">                            || verticalDragRange &gt; <span class="number">0</span> &amp;&amp; newTop == oldTop)) &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//记录并回调是否有边缘触摸</span></div><div class="line">                reportNewEdgeDrags(dx, dy, pointerId);</div><div class="line">                <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</div><div class="line">                    <span class="comment">// Callback might have started an edge drag</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//如果产生了拖动则调用tryCaptureViewForDrag()</span></div><div class="line">                <span class="comment">//TODO (4)</span></div><div class="line">                <span class="keyword">if</span> (pastSlop &amp;&amp; tryCaptureViewForDrag(toCapture, pointerId)) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//保存触摸点的信息</span></div><div class="line">            saveLastMotion(ev);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//当有一个手指抬起时,清除这个手指的触摸数据</span></div><div class="line">        <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_UP: &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, actionIndex);</div><div class="line">            clearMotionHistory(pointerId);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//清除所有触摸数据</span></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL: &#123;</div><div class="line">            cancel();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果mDragState等于正在拖拽则返回true</span></div><div class="line">    <span class="keyword">return</span> mDragState == STATE_DRAGGING;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面就是整个<code>shouldInterceptTouchEvent()</code>的实现,上面的注释也足够清楚了,我们这里就先不分析某一种触摸事件,大家可以看到我上面留了几个TODO,下文会一起分析,这里我假设大家都已经对触摸事件分发处理都有充分的理解了,我们下面就直接看<code>ViewDragHelper</code>里<code>processTouchEvent()</code>方法的实现.</p><h4 id="4-3-processTouchEvent-方法的实现"><a href="#4-3-processTouchEvent-方法的实现" class="headerlink" title="4.3 processTouchEvent()方法的实现"></a>4.3 processTouchEvent()方法的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(ev);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = MotionEventCompat.getActionIndex(ev);</div><div class="line"></div><div class="line">    ...（省去部分代码）</div><div class="line">    <span class="keyword">switch</span> (action) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class="line">            ...（省去部分代码）</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_DOWN: &#123;</div><div class="line">            ...（省去部分代码）</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">            <span class="comment">//如果现在已经是拖拽状态</span></div><div class="line">            <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> index = MotionEventCompat.findPointerIndex(ev, mActivePointerId);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, index);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, index);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> idx = (<span class="keyword">int</span>) (x - mLastMotionX[mActivePointerId]);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> idy = (<span class="keyword">int</span>) (y - mLastMotionY[mActivePointerId]);</div><div class="line"></div><div class="line">                <span class="comment">//拖拽至指定位置</span></div><div class="line">                <span class="comment">//TODO (5)</span></div><div class="line">                dragTo(mCapturedView.getLeft() + idx, mCapturedView.getTop() + idy, idx, idy);</div><div class="line"></div><div class="line">                saveLastMotion(ev);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Check to see if any pointer is now over a draggable view.</span></div><div class="line">                <span class="comment">//如果还不是拖拽状态,就检测是否经过了一个View</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> pointerCount = MotionEventCompat.getPointerCount(ev);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, i);</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, i);</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, i);</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> dx = x - mInitialMotionX[pointerId];</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> dy = y - mInitialMotionY[pointerId];</div><div class="line"></div><div class="line">                    reportNewEdgeDrags(dx, dy, pointerId);</div><div class="line">                    <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</div><div class="line">                        <span class="comment">// Callback might have started an edge drag.</span></div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</div><div class="line">                    <span class="keyword">if</span> (checkTouchSlop(toCapture, dx, dy) &amp;&amp;</div><div class="line">                            tryCaptureViewForDrag(toCapture, pointerId)) &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                saveLastMotion(ev);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//当多个手指中的一个手机松开时</span></div><div class="line">        <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_UP: &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, actionIndex);</div><div class="line">            <span class="comment">//如果当前点正在被拖拽,则再剩余还在触摸的点钟寻找是否正在View上</span></div><div class="line">            <span class="keyword">if</span> (mDragState == STATE_DRAGGING &amp;&amp; pointerId == mActivePointerId) &#123;</div><div class="line">                <span class="comment">// Try to find another pointer that's still holding on to the captured view.</span></div><div class="line">                <span class="keyword">int</span> newActivePointer = INVALID_POINTER;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> pointerCount = MotionEventCompat.getPointerCount(ev);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> id = MotionEventCompat.getPointerId(ev, i);</div><div class="line">                    <span class="keyword">if</span> (id == mActivePointerId) &#123;</div><div class="line">                        <span class="comment">// This one's going away, skip.</span></div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, i);</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, i);</div><div class="line">                    <span class="keyword">if</span> (findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y) == mCapturedView &amp;&amp;</div><div class="line">                            tryCaptureViewForDrag(mCapturedView, id)) &#123;</div><div class="line">                        newActivePointer = mActivePointerId;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (newActivePointer == INVALID_POINTER) &#123;</div><div class="line">                    <span class="comment">// We didn't find another pointer still touching the view, release it.</span></div><div class="line">                    <span class="comment">//如果没找到则释放View</span></div><div class="line">                    <span class="comment">//TODO (6)</span></div><div class="line">                    releaseViewForPointerUp();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            clearMotionHistory(pointerId);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</div><div class="line">            <span class="comment">//如果是拖拽状态的释放则调用</span></div><div class="line">            <span class="comment">//releaseViewForPointerUp()</span></div><div class="line">            <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</div><div class="line">                releaseViewForPointerUp();</div><div class="line">            &#125;</div><div class="line">            cancel();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL: &#123;</div><div class="line">            <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</div><div class="line">                dispatchViewReleased(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            cancel();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面就是<code>processTouchEvent()</code>方法的实现,我们省去了部分大致与<code>shouldInterceptTouchEvent()</code>相同的逻辑代码,通过事件传递机制我们知道,如果程序已经进入到<code>processTouchEvent()</code>中,也就意味着触摸事件就不会再向下传递,都会交给此方法处理,所以在这里我们就需要处理拖拽事件了,通过上面的注释,我们也看到了在<code>MotionEvent.ACTION_MOVE</code>,<code>MotionEventCompat.ACTION_POINTER_UP</code>,<code>MotionEvent.ACTION_UP</code>和<code>MotionEvent.ACTION_CANCEL</code>都分别进行了处理    ,我们知道触摸事件大致的流程是:</p><pre><code>ACTION_DOWN -&gt; ACTION_MOVE -&gt; ... -&gt; ACTION_MOVE -&gt; ACTION_UP</code></pre><p>再配合事件的分发机制,我们就能很清晰的分析出一次完整的事件调用过程,所以整个<code>ViewDragHelper</code>的拖拽过程也能很清晰的分为三个步骤:</p><pre><code>捕获拖拽目标View -&gt; 拖拽目标View -&gt; 处理目标View释放操作</code></pre><p>最后我们再分析上面两段代码的6个TODO:</p><h4 id="4-4-saveInitialMotion-方法"><a href="#4-4-saveInitialMotion-方法" class="headerlink" title="4.4 saveInitialMotion()方法"></a>4.4 saveInitialMotion()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveInitialMotion</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">int</span> pointerId)</span> </span>&#123;</div><div class="line">    <span class="comment">//确保各个数组的大小足够存放数据</span></div><div class="line">    ensureMotionHistorySizeForId(pointerId);</div><div class="line">    <span class="comment">//保存x坐标</span></div><div class="line">    mInitialMotionX[pointerId] = mLastMotionX[pointerId] = x;</div><div class="line">    <span class="comment">//保存y坐标</span></div><div class="line">    mInitialMotionY[pointerId] = mLastMotionY[pointerId] = y;</div><div class="line">    <span class="comment">//保存是否触摸到边缘</span></div><div class="line">    mInitialEdgesTouched[pointerId] = getEdgesTouched((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</div><div class="line">    <span class="comment">//保存当前id是否在触摸,用于后续验证</span></div><div class="line">    mPointersDown |= <span class="number">1</span> &lt;&lt; pointerId;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="4-5-findTopChildUnder-方法"><a href="#4-5-findTopChildUnder-方法" class="headerlink" title="4.5 findTopChildUnder()方法"></a>4.5 findTopChildUnder()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">findTopChildUnder</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = mParentView.getChildCount();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">final</span> View child = mParentView.getChildAt(mCallback.getOrderedChildIndex(i));</div><div class="line">        <span class="keyword">if</span> (x &gt;= child.getLeft() &amp;&amp; x &lt; child.getRight() &amp;&amp;</div><div class="line">                y &gt;= child.getTop() &amp;&amp; y &lt; child.getBottom()) &#123;</div><div class="line">            <span class="keyword">return</span> child;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码很简单就是根据<code>x</code>和<code>y</code>坐标和来找到指定<code>View</code>,注意这里回调了<code>callback</code>中的<code>getOrderedChildIndex()</code>方法,所以我们可以在这里返回指定的<code>View</code>的<code>index</code>.</p><h4 id="4-6-checkTouchSlop-方法"><a href="#4-6-checkTouchSlop-方法" class="headerlink" title="4.6 checkTouchSlop()方法"></a>4.6 checkTouchSlop()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkTouchSlop</span><span class="params">(View child, <span class="keyword">float</span> dx, <span class="keyword">float</span> dy)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> checkHorizontal = mCallback.getViewHorizontalDragRange(child) &gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> checkVertical = mCallback.getViewVerticalDragRange(child) &gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (checkHorizontal &amp;&amp; checkVertical) &#123;</div><div class="line">        <span class="keyword">return</span> dx * dx + dy * dy &gt; mTouchSlop * mTouchSlop;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkHorizontal) &#123;</div><div class="line">        <span class="keyword">return</span> Math.abs(dx) &gt; mTouchSlop;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkVertical) &#123;</div><div class="line">        <span class="keyword">return</span> Math.abs(dy) &gt; mTouchSlop;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用来根据<code>mTouchSlop</code>最小拖动的距离来判断是否属于拖动,<code>mTouchSlop</code>根据我们设定的灵敏度决定.</p><h4 id="4-7-tryCaptureViewForDrag-方法"><a href="#4-7-tryCaptureViewForDrag-方法" class="headerlink" title="4.7 tryCaptureViewForDrag()方法"></a>4.7 tryCaptureViewForDrag()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryCaptureViewForDrag</span><span class="params">(View toCapture, <span class="keyword">int</span> pointerId)</span> </span>&#123;</div><div class="line">    <span class="comment">//如果已经捕获该View 直接返回true</span></div><div class="line">    <span class="keyword">if</span> (toCapture == mCapturedView &amp;&amp; mActivePointerId == pointerId) &#123;</div><div class="line">        <span class="comment">// Already done!</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//根据mCallback.tryCaptureView()方法来最终决定是否可以捕获View</span></div><div class="line">    <span class="keyword">if</span> (toCapture != <span class="keyword">null</span> &amp;&amp; mCallback.tryCaptureView(toCapture, pointerId)) &#123;</div><div class="line">        mActivePointerId = pointerId;</div><div class="line">        <span class="comment">//如果可以则调用captureChildView(),并返回true</span></div><div class="line">        captureChildView(toCapture, pointerId);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到如果可以捕获<code>View</code>则调用了<code>captureChildView()</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">captureChildView</span><span class="params">(View childView, <span class="keyword">int</span> activePointerId)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (childView.getParent() != mParentView) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"captureChildView: parameter must be a descendant "</span> +</div><div class="line">                <span class="string">"of the ViewDragHelper's tracked parent view ("</span> + mParentView + <span class="string">")"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//赋值mCapturedView</span></div><div class="line">    mCapturedView = childView;</div><div class="line">    mActivePointerId = activePointerId;</div><div class="line">    <span class="comment">//回调callback</span></div><div class="line">    mCallback.onViewCaptured(childView, activePointerId);</div><div class="line">    <span class="comment">//设定mDragState的状态为STATE_DRAGGING</span></div><div class="line">    setDragState(STATE_DRAGGING);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果程序执行到这里,就证明<code>View</code>已经处于拖拽状态了,后续的触摸操作,将直接根据<code>mDragState</code>为<code>STATE_DRAGGING</code>的状态处理.</p><h4 id="4-8-dragTo-方法的实现"><a href="#4-8-dragTo-方法的实现" class="headerlink" title="4.8 dragTo()方法的实现"></a>4.8 dragTo()方法的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dragTo</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> clampedX = left;</div><div class="line">    <span class="keyword">int</span> clampedY = top;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> oldLeft = mCapturedView.getLeft();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> oldTop = mCapturedView.getTop();</div><div class="line">    <span class="keyword">if</span> (dx != <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//回调callback来决定View最终被拖拽的x方向上的偏移量</span></div><div class="line">        clampedX = mCallback.clampViewPositionHorizontal(mCapturedView, left, dx);</div><div class="line">        <span class="comment">//移动View</span></div><div class="line">        ViewCompat.offsetLeftAndRight(mCapturedView, clampedX - oldLeft);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dy != <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//回调callback来决定View最终被拖拽的y方向上的偏移量</span></div><div class="line">        clampedY = mCallback.clampViewPositionVertical(mCapturedView, top, dy);</div><div class="line">        <span class="comment">//移动View</span></div><div class="line">        ViewCompat.offsetTopAndBottom(mCapturedView, clampedY - oldTop);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (dx != <span class="number">0</span> || dy != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> clampedDx = clampedX - oldLeft;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> clampedDy = clampedY - oldTop;</div><div class="line">        <span class="comment">//回调callback</span></div><div class="line">        mCallback.onViewPositionChanged(mCapturedView, clampedX, clampedY,</div><div class="line">                clampedDx, clampedDy);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为<code>dragTo()</code>方法是在<code>processTouchEvent()</code>中的<code>MotionEvent.ACTION_MOVE case</code>被调用所以当程序运行到这里时<code>View</code>就会不断的被拖动了。如果一旦手指释放则最终会调用<code>releaseViewForPointerUp()</code>方法</p><h4 id="4-8-releaseViewForPointerUp-方法的实现"><a href="#4-8-releaseViewForPointerUp-方法的实现" class="headerlink" title="4.8 releaseViewForPointerUp()方法的实现"></a>4.8 releaseViewForPointerUp()方法的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">releaseViewForPointerUp</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//计算出当前x和y方向上的加速度</span></div><div class="line">    mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>, mMaxVelocity);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> xvel = clampMag(</div><div class="line">            VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),</div><div class="line">            mMinVelocity, mMaxVelocity);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> yvel = clampMag(</div><div class="line">            VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId),</div><div class="line">            mMinVelocity, mMaxVelocity);</div><div class="line">    dispatchViewReleased(xvel, yvel);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>计算完加速度后就调用了<code>dispatchViewReleased()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchViewReleased</span><span class="params">(<span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;</div><div class="line">    <span class="comment">//设定当前正处于释放阶段</span></div><div class="line">    mReleaseInProgress = <span class="keyword">true</span>;</div><div class="line">    <span class="comment">//回调callback的onViewReleased()方法</span></div><div class="line">    mCallback.onViewReleased(mCapturedView, xvel, yvel);</div><div class="line">    mReleaseInProgress = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">//设定状态</span></div><div class="line">    <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</div><div class="line">        <span class="comment">// onViewReleased didn't call a method that would have changed this. Go idle.</span></div><div class="line">        <span class="comment">//如果onViewReleased()中没有调用任何方法,则状态设定为STATE_IDLE</span></div><div class="line">        setDragState(STATE_IDLE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以最后释放后的处理交给了<code>callback</code>中的<code>onViewReleased()</code>方法,如果我们什么都不做,那么这个被拖拽的<code>View</code>就是停止在当前位置,或者我们可以调用<code>ViewDragHelper</code>提供给我们的这几个方法:</p><ul><li>settleCapturedViewAt(int finalLeft, int finalTop)<br>以松手前的滑动速度为初速动，让捕获到的View自动滚动到指定位置。只能在Callback的onViewReleased()中调用。</li><li>flingCapturedView(int minLeft, int minTop, int maxLeft, int maxTop)<br>以松手前的滑动速度为初速动，让捕获到的View在指定范围内fling。只能在Callback的onViewReleased()中调用。</li><li>smoothSlideViewTo(View child, int finalLeft, int finalTop)<br>指定某个View自动滚动到指定的位置，初速度为0，可在任何地方调用。</li></ul><p>引用自<a href="http://www.cnphp6.com/archives/87727" target="_blank" rel="external">这篇文章</a>,具体释放后的原理我们就不分析了,其实就是配合<code>Scroller</code>这个类来实现,具体也可以参照上面这篇文章。好,我们关于<code>ViewDragHelper</code>的源码分析就到这里.</p><h3 id="5-开源项目中的使用"><a href="#5-开源项目中的使用" class="headerlink" title="5. 开源项目中的使用"></a>5. 开源项目中的使用</h3><p><code>ViewDragHelper</code>在各种关于拖拽和各种手势动画的开源库中使用广泛,我这里就简要列出一些,大家可以多去看看是如何使用<code>ViewDragHelper</code>的:</p><ul><li><a href="https://github.com/ikew0ng/SwipeBackLayout">SwipeBackLayout</a></li><li><a href="https://github.com/xmuSistone/android-card-slide-panel">android-card-slide-panel</a></li><li><a href="https://github.com/mxn21/FlowingDrawer">FlowingDrawer</a></li></ul><h3 id="6-个人评价"><a href="#6-个人评价" class="headerlink" title="6. 个人评价"></a>6. 个人评价</h3><p><code>ViewDragHelper</code>的出现,大大简化了我们开发相关触摸和拖拽功能的复杂度和代码量,帮助我们比较容易的实现各种效果,让我们开发酷炫的交互更加容易了。但是从一些开源项目中发现,<code>ViewDragHelper</code>中还是有一些不足之处,比如给<code>Scroller</code>提供了一个固定的<code>Interpolator</code>,导致如果我们想实现例如反弹效果的话,还要把<code>ViewDragHelper</code>的代码拷贝一份并修改<code>Interpolator</code>,这样做肯定是不太好的.当然建议我们自己修改一个<code>ViewDragHelper</code>后如果项目里有多处使用,可以包装成一个提供给我们自己项目的模块使用,防止出现更多的多余代码</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>TextView源码解析</title>
    <link href="https://github.com/itgoyo/2017/07/26/TextView%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/TextView源码解析.html</id>
    <published>2017-07-26T12:07:19.000Z</published>
    <updated>2017-11-23T13:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><h1 id="TextView源码解析"><a href="#TextView源码解析" class="headerlink" title="TextView源码解析"></a>TextView源码解析</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><blockquote><p>TextView作为Android系统上显示和排版文字以及提供对文字的增删改查、图文混排等功能的控件，内部是相对比较复杂的。这么一个复杂的控件自然需要依赖于一些其他的辅助类，例如：Layout以及Layout的相关子类、Span相关的类、MovementMethod接口、TransformationMethod接口等。这篇文章主要介绍TextView的结构和内部处理文字的流程以及TextView相关的辅助类在TextView处理文字过程中的作用。</p></blockquote><h2 id="2-TextView的内部结构和辅助类"><a href="#2-TextView的内部结构和辅助类" class="headerlink" title="2.TextView的内部结构和辅助类"></a>2.TextView的内部结构和辅助类</h2><p>TextView内部除了继承自View的相关属性和measure、layout、draw步骤，还包括：</p><ul><li><strong>Layout</strong>: TextView的文字排版、折行策略以及文本绘制都是在Layout里面完成的，TextView的自身测量也受Layout的影响。Layout是TextView执行setText方法后，由TextView内部创建的实例，并不能由外部提供。可以用getLayout()方法获取。</li><li><strong>TransformationMethod</strong>: 用来处理最终的显示结果的类，例如显示密码的时候把密码转换成圆点。这个类并不直接影响TextView内部储存的Text，只影响显示的结果。</li><li><strong>MovementMethod</strong>: 用来处理TextView内部事件响应的类，可以针对TextView内文本的某一个区域做软键盘输入或者触摸事件的响应。</li><li><strong>Drawables</strong>: TextView的静态内部类，用来处理和储存TextView的CompoundDrawables,包括TextView的上下左右的Drawable以及错误提示的Drawable。</li><li><strong>Spans</strong>: Spans并不是特定的某一个类或者实现了某一个接口的类。它可以是任意类型，Spans实际上做的事情是在TextView的内部的text的某一个区域做标记。其中有部分Spans可以影响TextView的绘制和测量，如ImageSpan、BackgroundColorSpan、AbsoluteSizeSpan。还有可以响应点击事件的ClickableSpan。</li><li><strong>Editor</strong>: TextView作为可编辑文本控件的时候(EditText)，使用Editor来处理文本的区域选择处理和判断、拼写检查、弹出文本菜单等。</li><li><strong>InputConnection</strong>: EditText的文本输入部分是在TextView中完成的。而InputConnection是软键盘和TextView之间的桥梁，所有的软键盘的输入文字、修改文字和删除文字都是通过InputConnection传递给TextView的。</li></ul><h2 id="3-TextView的onTouchEvent处理"><a href="#3-TextView的onTouchEvent处理" class="headerlink" title="3.TextView的onTouchEvent处理"></a>3.TextView的onTouchEvent处理</h2><p>TextView内部能处理触摸事件的，包括自身的触摸处理、Editor的onTouchEvent、MovementMethod的onTouchEvent。Editor的onTouchEvent主要处理出于编辑状态下的触摸事件，比如点击选中、长按等。MovementMethod则主要负责文本内部有Span的时候的相关处理，比较常见的就是LinkMovementMethod处理ClickableSpan的点击事件。我们来看一下TextView内部对这些触摸事件的处理和优先级的分配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> action = event.getActionMasked();</div><div class="line"></div><div class="line">        <span class="comment">//当Editor不为空的时候，给Editor的双击事件预设值</span></div><div class="line">        <span class="keyword">if</span> (mEditor != <span class="keyword">null</span> &amp;&amp; action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            <span class="keyword">if</span> (mFirstTouch &amp;&amp; (SystemClock.uptimeMillis() - mLastTouchUpTime) &lt;=</div><div class="line">                    ViewConfiguration.getDoubleTapTimeout()) &#123;</div><div class="line">                mEditor.mDoubleTap = <span class="keyword">true</span>;</div><div class="line">                mFirstTouch = <span class="keyword">false</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mEditor.mDoubleTap = <span class="keyword">false</span>;</div><div class="line">                mFirstTouch = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</div><div class="line">            mLastTouchUpTime = SystemClock.uptimeMillis();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//当Editor不为空，优先处理Editor的触摸事件</span></div><div class="line">        <span class="keyword">if</span> (mEditor != <span class="keyword">null</span>) &#123;</div><div class="line">            mEditor.onTouchEvent(event);</div><div class="line"></div><div class="line">            <span class="comment">//由于Editor内部onTouchEvent实际上交给了mSelectionModifierCursorController处理，所以这边判断mSelectionModifierCursorController是否需要处理接下来的一系列事件，如果是则直接返回跳过下面的步骤</span></div><div class="line">            <span class="keyword">if</span> (mEditor.mSelectionModifierCursorController != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                    mEditor.mSelectionModifierCursorController.isDragAcceleratorActive()) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> superResult = <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line"></div><div class="line">        <span class="comment">//处理API 23新加入的InsertionActinoMode</span></div><div class="line">        <span class="keyword">if</span> (mEditor != <span class="keyword">null</span> &amp;&amp; mEditor.mDiscardNextActionUp &amp;&amp; action == MotionEvent.ACTION_UP) &#123;</div><div class="line">            mEditor.mDiscardNextActionUp = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mEditor.mIsInsertionActionModeStartPending) &#123;</div><div class="line">                mEditor.startInsertionActionMode();</div><div class="line">                mEditor.mIsInsertionActionModeStartPending = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> superResult;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> touchIsFinished = (action == MotionEvent.ACTION_UP) &amp;&amp;</div><div class="line">                (mEditor == <span class="keyword">null</span> || !mEditor.mIgnoreActionUpEvent) &amp;&amp; isFocused();</div><div class="line"></div><div class="line">         <span class="keyword">if</span> ((mMovement != <span class="keyword">null</span> || onCheckIsTextEditor()) &amp;&amp; isEnabled()</div><div class="line">                &amp;&amp; mText <span class="keyword">instanceof</span> Spannable &amp;&amp; mLayout != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">            <span class="comment">//MovementMethod的触摸时间处理，如果MovementMethod类型是LinkMovementMethod则会处理文本内的所有ClickableSpan的点击</span></div><div class="line">            <span class="keyword">if</span> (mMovement != <span class="keyword">null</span>) &#123;</div><div class="line">                handled |= mMovement.onTouchEvent(<span class="keyword">this</span>, (Spannable) mText, event);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> textIsSelectable = isTextSelectable();</div><div class="line">            <span class="keyword">if</span> (touchIsFinished &amp;&amp; mLinksClickable &amp;&amp; mAutoLinkMask != <span class="number">0</span> &amp;&amp; textIsSelectable) &#123;</div><div class="line"></div><div class="line">                <span class="comment">//在文本可选择的情况下，默认是没有LinkMovementMethod来处理ClickableSpan相关的点击的，所以在文本可选择情况，TextView对所有的ClickableSpan进行统一处理</span></div><div class="line">                ClickableSpan[] links = ((Spannable) mText).getSpans(getSelectionStart(),</div><div class="line">                        getSelectionEnd(), ClickableSpan.class);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (links.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                    links[<span class="number">0</span>].onClick(<span class="keyword">this</span>);</div><div class="line">                    handled = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (touchIsFinished &amp;&amp; (isTextEditable() || textIsSelectable)) &#123;</div><div class="line">                <span class="keyword">final</span> InputMethodManager imm = InputMethodManager.peekInstance();</div><div class="line">                viewClicked(imm);</div><div class="line">                <span class="keyword">if</span> (!textIsSelectable &amp;&amp; mEditor.mShowSoftInputOnFocus) &#123;</div><div class="line">                    handled |= imm != <span class="keyword">null</span> &amp;&amp; imm.showSoftInput(<span class="keyword">this</span>, <span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                mEditor.onTouchUpEvent(event);</div><div class="line"></div><div class="line">                handled = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (handled) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> superResult;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="4-TextView的创建Layout的过程"><a href="#4-TextView的创建Layout的过程" class="headerlink" title="4.TextView的创建Layout的过程"></a>4.TextView的创建Layout的过程</h2><p>TextView内部并不仅仅只有一个用来显示文本内容的Layout，在设置了hint的时候，还需要有一个mHintLayout来处理hint的内容。如果设置了Ellipsize类型为Marquee时，还会有一个mSavedMarqueeModeLayout专门用来显示marquee效果。这些Layout都是通过内部的makeNewLayout方法来创建的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">makeNewLayout</span><span class="params">(<span class="keyword">int</span> wantWidth, <span class="keyword">int</span> hintWidth</span></span></div><div class="line"><span class="function"><span class="params">                                 BoringLayout.Metrics boring,</span></span></div><div class="line"><span class="function"><span class="params">                                 BoringLayout.Metrics hintBoring,</span></span></div><div class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> ellipsisWidth, <span class="keyword">boolean</span> bringIntoView)</span> </span>&#123;</div><div class="line">        <span class="comment">//如果当前有marquee动画，则先停止动画</span></div><div class="line">        stopMarquee();</div><div class="line"></div><div class="line">        mOldMaximum = mMaximum;</div><div class="line">        mOldMaxMode = mMaxMode;</div><div class="line"></div><div class="line">        mHighlightPathBogus = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (wantWidth &lt; <span class="number">0</span>) &#123;</div><div class="line">            wantWidth = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (hintWidth &lt; <span class="number">0</span>) &#123;</div><div class="line">            hintWidth = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//文本对齐方式</span></div><div class="line">        Layout.Alignment alignment = getLayoutAlignment();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> testDirChange = mSingleLine &amp;&amp; mLayout != <span class="keyword">null</span> &amp;&amp;</div><div class="line">            (alignment == Layout.Alignment.ALIGN_NORMAL ||</div><div class="line">             alignment == Layout.Alignment.ALIGN_OPPOSITE);</div><div class="line">        <span class="keyword">int</span> oldDir = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (testDirChange) oldDir = mLayout.getParagraphDirection(<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">//检测是否设置了ellipsize</span></div><div class="line">        <span class="keyword">boolean</span> shouldEllipsize = mEllipsize != <span class="keyword">null</span> &amp;&amp; getKeyListener() == <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> switchEllipsize = mEllipsize == TruncateAt.MARQUEE &amp;&amp;</div><div class="line">                mMarqueeFadeMode != MARQUEE_FADE_NORMAL;</div><div class="line">        TruncateAt effectiveEllipsize = mEllipsize;</div><div class="line">        <span class="keyword">if</span> (mEllipsize == TruncateAt.MARQUEE &amp;&amp;</div><div class="line">                mMarqueeFadeMode == MARQUEE_FADE_SWITCH_SHOW_ELLIPSIS) &#123;</div><div class="line">            effectiveEllipsize = TruncateAt.END_SMALL;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//文本方向</span></div><div class="line">        <span class="keyword">if</span> (mTextDir == <span class="keyword">null</span>) &#123;</div><div class="line">            mTextDir = getTextDirectionHeuristic();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//创建主Layout</span></div><div class="line">        mLayout = makeSingleLayout(wantWidth, boring, ellipsisWidth, alignment, shouldEllipsize,</div><div class="line">                effectiveEllipsize, effectiveEllipsize == mEllipsize);</div><div class="line"></div><div class="line">        <span class="comment">//非常规的Marquee模式下，需要创建mSavedMarqueeModeLayout来保存marquee动画时所用的Layout，并且在动画期间把它和TextView的主Layout对换</span></div><div class="line">        <span class="keyword">if</span> (switchEllipsize) &#123;</div><div class="line">            TruncateAt oppositeEllipsize = effectiveEllipsize == TruncateAt.MARQUEE ?</div><div class="line">                    TruncateAt.END : TruncateAt.MARQUEE;</div><div class="line">            mSavedMarqueeModeLayout = makeSingleLayout(wantWidth, boring, ellipsisWidth, alignment,</div><div class="line">                    shouldEllipsize, oppositeEllipsize, effectiveEllipsize != mEllipsize);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        shouldEllipsize = mEllipsize != <span class="keyword">null</span>;</div><div class="line">        mHintLayout = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">//判断是否需要创建hintLayout</span></div><div class="line">        <span class="keyword">if</span> (mHint != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (shouldEllipsize) hintWidth = wantWidth;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (hintBoring == UNKNOWN_BORING) &#123;</div><div class="line">                hintBoring = BoringLayout.isBoring(mHint, mTextPaint, mTextDir,</div><div class="line">                                                   mHintBoring);</div><div class="line">                <span class="keyword">if</span> (hintBoring != <span class="keyword">null</span>) &#123;</div><div class="line">                    mHintBoring = hintBoring;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//判断是否为boring，如果是则创建BoringLayout</span></div><div class="line">            <span class="keyword">if</span> (hintBoring != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (hintBoring.width &lt;= hintWidth &amp;&amp;</div><div class="line">                    (!shouldEllipsize || hintBoring.width &lt;= ellipsisWidth)) &#123;</div><div class="line">                    <span class="keyword">if</span> (mSavedHintLayout != <span class="keyword">null</span>) &#123;</div><div class="line">                        mHintLayout = mSavedHintLayout.</div><div class="line">                                replaceOrMake(mHint, mTextPaint,</div><div class="line">                                hintWidth, alignment, mSpacingMult, mSpacingAdd,</div><div class="line">                                hintBoring, mIncludePad);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mHintLayout = BoringLayout.make(mHint, mTextPaint,</div><div class="line">                                hintWidth, alignment, mSpacingMult, mSpacingAdd,</div><div class="line">                                hintBoring, mIncludePad);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    mSavedHintLayout = (BoringLayout) mHintLayout;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shouldEllipsize &amp;&amp; hintBoring.width &lt;= hintWidth) &#123;</div><div class="line">                    <span class="keyword">if</span> (mSavedHintLayout != <span class="keyword">null</span>) &#123;</div><div class="line">                        mHintLayout = mSavedHintLayout.</div><div class="line">                                replaceOrMake(mHint, mTextPaint,</div><div class="line">                                hintWidth, alignment, mSpacingMult, mSpacingAdd,</div><div class="line">                                hintBoring, mIncludePad, mEllipsize,</div><div class="line">                                ellipsisWidth);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mHintLayout = BoringLayout.make(mHint, mTextPaint,</div><div class="line">                                hintWidth, alignment, mSpacingMult, mSpacingAdd,</div><div class="line">                                hintBoring, mIncludePad, mEllipsize,</div><div class="line">                                ellipsisWidth);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//不是boring的状态下，用StaticLayout来创建</span></div><div class="line">            <span class="keyword">if</span> (mHintLayout == <span class="keyword">null</span>) &#123;</div><div class="line">                StaticLayout.Builder builder = StaticLayout.Builder.obtain(mHint, <span class="number">0</span>,</div><div class="line">                        mHint.length(), mTextPaint, hintWidth)</div><div class="line">                        .setAlignment(alignment)</div><div class="line">                        .setTextDirection(mTextDir)</div><div class="line">                        .setLineSpacing(mSpacingAdd, mSpacingMult)</div><div class="line">                        .setIncludePad(mIncludePad)</div><div class="line">                        .setBreakStrategy(mBreakStrategy)</div><div class="line">                        .setHyphenationFrequency(mHyphenationFrequency);</div><div class="line">                <span class="keyword">if</span> (shouldEllipsize) &#123;</div><div class="line">                    builder.setEllipsize(mEllipsize)</div><div class="line">                            .setEllipsizedWidth(ellipsisWidth)</div><div class="line">                            .setMaxLines(mMaxMode == LINES ? mMaximum : Integer.MAX_VALUE);</div><div class="line">                &#125;</div><div class="line">                mHintLayout = builder.build();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (bringIntoView || (testDirChange &amp;&amp; oldDir != mLayout.getParagraphDirection(<span class="number">0</span>))) &#123;</div><div class="line">            registerForPreDraw();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//判断是否需要开始Marquee动画</span></div><div class="line">        <span class="keyword">if</span> (mEllipsize == TextUtils.TruncateAt.MARQUEE) &#123;</div><div class="line">            <span class="keyword">if</span> (!compressText(ellipsisWidth)) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> height = mLayoutParams.height;</div><div class="line">                <span class="keyword">if</span> (height != LayoutParams.WRAP_CONTENT &amp;&amp; height != LayoutParams.MATCH_PARENT) &#123;</div><div class="line">                    startMarquee();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mRestartMarquee = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mEditor != <span class="keyword">null</span>) mEditor.prepareCursorControllers();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>TextView的布局创建过程涉及到一个boring的概念，boring是指布局所用的文本里面不包含任何Span，所有的文本方向都是从左到右的布局，并且仅需一行就能显示完全的布局。这种情况下，TextView会使用BoringLayout类来创建相关的布局，以节省不必要的文本测量以及文本折行、Span宽度、文本方向等的计算。下面我们来看一下makeNewLayout中使用频率比较高的makeSingleLayout的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Layout <span class="title">makeSingleLayout</span><span class="params">(<span class="keyword">int</span> wantWidth, BoringLayout.Metrics boring, <span class="keyword">int</span> ellipsisWidth,</span></span></div><div class="line"><span class="function"><span class="params">            Layout.Alignment alignment, <span class="keyword">boolean</span> shouldEllipsize, TruncateAt effectiveEllipsize,</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> useSaved)</span> </span>&#123;</div><div class="line">        Layout result = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">//判断是否Spannable，如果是则用DynamicLayout类来创建布局，DynamicLayout内部实际也是使用StaticLayout来做文本的测量绘制，并在StaticLayout的基础上增加了文本或者Span改变时的监听，及时对文本或者Span的变化做出反应。</span></div><div class="line">        <span class="keyword">if</span> (mText <span class="keyword">instanceof</span> Spannable) &#123;</div><div class="line">            result = <span class="keyword">new</span> DynamicLayout(mText, mTransformed, mTextPaint, wantWidth,</div><div class="line">                    alignment, mTextDir, mSpacingMult, mSpacingAdd, mIncludePad,</div><div class="line">                    mBreakStrategy, mHyphenationFrequency,</div><div class="line">                    getKeyListener() == <span class="keyword">null</span> ? effectiveEllipsize : <span class="keyword">null</span>, ellipsisWidth);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//如果boring是未知状态，则重新判断一次是否boring</span></div><div class="line">            <span class="keyword">if</span> (boring == UNKNOWN_BORING) &#123;</div><div class="line">                boring = BoringLayout.isBoring(mTransformed, mTextPaint, mTextDir, mBoring);</div><div class="line">                <span class="keyword">if</span> (boring != <span class="keyword">null</span>) &#123;</div><div class="line">                    mBoring = boring;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//根据boring的属性来创建对应的布局，如果有mSavedLayout则从mSavedLayout创建</span></div><div class="line">            <span class="keyword">if</span> (boring != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (boring.width &lt;= wantWidth &amp;&amp;</div><div class="line">                        (effectiveEllipsize == <span class="keyword">null</span> || boring.width &lt;= ellipsisWidth)) &#123;</div><div class="line">                    <span class="keyword">if</span> (useSaved &amp;&amp; mSavedLayout != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="comment">//从之前保存的Layout中创建</span></div><div class="line">                        result = mSavedLayout.replaceOrMake(mTransformed, mTextPaint,</div><div class="line">                                wantWidth, alignment, mSpacingMult, mSpacingAdd,</div><div class="line">                                boring, mIncludePad);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">//创建新的Layout</span></div><div class="line">                        result = BoringLayout.make(mTransformed, mTextPaint,</div><div class="line">                                wantWidth, alignment, mSpacingMult, mSpacingAdd,</div><div class="line">                                boring, mIncludePad);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (useSaved) &#123;</div><div class="line">                        mSavedLayout = (BoringLayout) result;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shouldEllipsize &amp;&amp; boring.width &lt;= wantWidth) &#123;</div><div class="line">                    <span class="keyword">if</span> (useSaved &amp;&amp; mSavedLayout != <span class="keyword">null</span>) &#123;</div><div class="line">                        result = mSavedLayout.replaceOrMake(mTransformed, mTextPaint,</div><div class="line">                                wantWidth, alignment, mSpacingMult, mSpacingAdd,</div><div class="line">                                boring, mIncludePad, effectiveEllipsize,</div><div class="line">                                ellipsisWidth);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        result = BoringLayout.make(mTransformed, mTextPaint,</div><div class="line">                                wantWidth, alignment, mSpacingMult, mSpacingAdd,</div><div class="line">                                boring, mIncludePad, effectiveEllipsize,</div><div class="line">                                ellipsisWidth);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//如果没有创建BoringLayout, 则使用StaticLayout类来创建布局</span></div><div class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">            StaticLayout.Builder builder = StaticLayout.Builder.obtain(mTransformed,</div><div class="line">                    <span class="number">0</span>, mTransformed.length(), mTextPaint, wantWidth)</div><div class="line">                    .setAlignment(alignment)</div><div class="line">                    .setTextDirection(mTextDir)</div><div class="line">                    .setLineSpacing(mSpacingAdd, mSpacingMult)</div><div class="line">                    .setIncludePad(mIncludePad)</div><div class="line">                    .setBreakStrategy(mBreakStrategy)</div><div class="line">                    .setHyphenationFrequency(mHyphenationFrequency);</div><div class="line">            <span class="keyword">if</span> (shouldEllipsize) &#123;</div><div class="line">                builder.setEllipsize(effectiveEllipsize)</div><div class="line">                        .setEllipsizedWidth(ellipsisWidth)</div><div class="line">                        .setMaxLines(mMaxMode == LINES ? mMaximum : Integer.MAX_VALUE);</div><div class="line">            &#125;</div><div class="line">            result = builder.build();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="5-TextView的文字处理和绘制"><a href="#5-TextView的文字处理和绘制" class="headerlink" title="5.TextView的文字处理和绘制"></a>5.TextView的文字处理和绘制</h2><p>TextView主要的文字排版和渲染并不是在TextView里面完成的，而是由Layout类来处理文字排版工作。在单纯地使用TextView来展示静态文本的时候，这件事情则是由Layout的子类StaticLayout来完成的。</p><p>StaticLayout接收到字符串后，首先做的事情是根据字符串里面的换行符对字符串进行拆分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> paraStart = bufStart; paraStart &lt;= bufEnd; paraStart = paraEnd) &#123;</div><div class="line">            paraEnd = TextUtils.indexOf(source, CHAR_NEW_LINE, paraStart, bufEnd);</div><div class="line">            <span class="keyword">if</span> (paraEnd &lt; <span class="number">0</span>)</div><div class="line">                paraEnd = bufEnd;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                paraEnd++;</div></pre></td></tr></table></figure><p>拆分后的段落(Paragraph)被分配给辅助类MeasuredText进行测量得到每个字符的宽度以及每个段落的FontMetric。并通过LineBreaker进行折行的判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//把段落载入到MeasuredText中，并分配对应的缓存空间</span></div><div class="line">measured.setPara(source, paraStart, paraEnd, textDir, b);</div><div class="line">            <span class="keyword">char</span>[] chs = measured.mChars;</div><div class="line">            <span class="keyword">float</span>[] widths = measured.mWidths;</div><div class="line">            <span class="keyword">byte</span>[] chdirs = measured.mLevels;</div><div class="line">            <span class="keyword">int</span> dir = measured.mDir;</div><div class="line">            <span class="keyword">boolean</span> easy = measured.mEasy;</div></pre></td></tr></table></figure><pre><code>//把相关属性传给JNI层的LineBreakernSetupParagraph(b.mNativePtr, chs, paraEnd - paraStart,        firstWidth, firstWidthLineCount, restWidth,        variableTabStops, TAB_INCREMENT, b.mBreakStrategy, b.mHyphenationFrequency);</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">int fmCacheCount = 0;</div><div class="line">int spanEndCacheCount = 0;</div><div class="line">for (int spanStart = paraStart, spanEnd; spanStart &lt; paraEnd; spanStart = spanEnd) &#123;</div><div class="line">    if (fmCacheCount * 4 &gt;= fmCache.length) &#123;</div><div class="line">        int[] grow = new int[fmCacheCount * 4 * 2];</div><div class="line">        System.arraycopy(fmCache, 0, grow, 0, fmCacheCount * 4);</div><div class="line">        fmCache = grow;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (spanEndCacheCount &gt;= spanEndCache.length) &#123;</div><div class="line">        int[] grow = new int[spanEndCacheCount * 2];</div><div class="line">        System.arraycopy(spanEndCache, 0, grow, 0, spanEndCacheCount);</div><div class="line">        spanEndCache = grow;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (spanned == null) &#123;</div><div class="line">        spanEnd = paraEnd;</div><div class="line">        int spanLen = spanEnd - spanStart;</div><div class="line">        //段落没有Span的情况下，把整个段落交给MeasuredText计算每个字符的宽度和FontMetric</div><div class="line">        measured.addStyleRun(paint, spanLen, fm);</div><div class="line">    &#125; else &#123;</div><div class="line">        spanEnd = spanned.nextSpanTransition(spanStart, paraEnd,</div><div class="line">                MetricAffectingSpan.class);</div><div class="line">        int spanLen = spanEnd - spanStart;</div><div class="line">        MetricAffectingSpan[] spans =</div><div class="line">                spanned.getSpans(spanStart, spanEnd, MetricAffectingSpan.class);</div><div class="line">        spans = TextUtils.removeEmptySpans(spans, spanned, MetricAffectingSpan.class);</div><div class="line">        //把对排版有影响的Span交给MeasuredText测量宽度并计算FontMetric</div><div class="line">        measured.addStyleRun(paint, spans, spanLen, fm);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //把测量后的FontMetric缓存下来方便后面使用</div><div class="line">    fmCache[fmCacheCount * 4 + 0] = fm.top;</div><div class="line">    fmCache[fmCacheCount * 4 + 1] = fm.bottom;</div><div class="line">    fmCache[fmCacheCount * 4 + 2] = fm.ascent;</div><div class="line">    fmCache[fmCacheCount * 4 + 3] = fm.descent;</div><div class="line">    fmCacheCount++;</div><div class="line"></div><div class="line">    spanEndCache[spanEndCacheCount] = spanEnd;</div><div class="line">    spanEndCacheCount++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">nGetWidths(b.mNativePtr, widths);</div><div class="line">//计算段落中需要折行的位置，并返回折行的数量</div><div class="line">int breakCount = nComputeLineBreaks(b.mNativePtr, lineBreaks, lineBreaks.breaks,</div><div class="line">        lineBreaks.widths, lineBreaks.flags, lineBreaks.breaks.length);</div></pre></td></tr></table></figure><p>计算完每一行的测量相关信息、Span宽高以及折行位置，就可以开始按照最终的行数一行一行地保存下来，以供后面绘制和获取对应文本信息的时候使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> spanStart = paraStart, spanEnd; spanStart &lt; paraEnd; spanStart = spanEnd) &#123;</div><div class="line">                spanEnd = spanEndCache[spanEndCacheIndex++];</div><div class="line"></div><div class="line">                <span class="comment">// 获取之前缓存的FontMetric信息</span></div><div class="line">                fm.top = fmCache[fmCacheIndex * <span class="number">4</span> + <span class="number">0</span>];</div><div class="line">                fm.bottom = fmCache[fmCacheIndex * <span class="number">4</span> + <span class="number">1</span>];</div><div class="line">                fm.ascent = fmCache[fmCacheIndex * <span class="number">4</span> + <span class="number">2</span>];</div><div class="line">                fm.descent = fmCache[fmCacheIndex * <span class="number">4</span> + <span class="number">3</span>];</div><div class="line">                fmCacheIndex++;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (fm.top &lt; fmTop) &#123;</div><div class="line">                    fmTop = fm.top;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (fm.ascent &lt; fmAscent) &#123;</div><div class="line">                    fmAscent = fm.ascent;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (fm.descent &gt; fmDescent) &#123;</div><div class="line">                    fmDescent = fm.descent;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (fm.bottom &gt; fmBottom) &#123;</div><div class="line">                    fmBottom = fm.bottom;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">while</span> (breakIndex &lt; breakCount &amp;&amp; paraStart + breaks[breakIndex] &lt; spanStart) &#123;</div><div class="line">                    breakIndex++;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">while</span> (breakIndex &lt; breakCount &amp;&amp; paraStart + breaks[breakIndex] &lt;= spanEnd) &#123;</div><div class="line">                    <span class="keyword">int</span> endPos = paraStart + breaks[breakIndex];</div><div class="line"></div><div class="line">                    <span class="keyword">boolean</span> moreChars = (endPos &lt; bufEnd);</div><div class="line"></div><div class="line">                    <span class="comment">//逐行把相关信息储存下来</span></div><div class="line">                    v = out(source, here, endPos,</div><div class="line">                            fmAscent, fmDescent, fmTop, fmBottom,</div><div class="line">                            v, spacingmult, spacingadd, chooseHt, chooseHtv, fm, flags[breakIndex],</div><div class="line">                            needMultiply, chdirs, dir, easy, bufEnd, includepad, trackpad,</div><div class="line">                            chs, widths, paraStart, ellipsize, ellipsizedWidth,</div><div class="line">                            lineWidths[breakIndex], paint, moreChars);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (endPos &lt; spanEnd) &#123;</div><div class="line">                        fmTop = fm.top;</div><div class="line">                        fmBottom = fm.bottom;</div><div class="line">                        fmAscent = fm.ascent;</div><div class="line">                        fmDescent = fm.descent;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        fmTop = fmBottom = fmAscent = fmDescent = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    here = endPos;</div><div class="line">                    breakIndex++;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (mLineCount &gt;= mMaximumVisibleLineCount) &#123;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure><p>这样StaticLayout的排版过程就完成了。文本的绘制则是交给父类Layout来做的，Layout的绘制分为两大部分，drawBackground和drawText。drawBackground做的事情是如果文本内有LineBackgroundSpan则绘制所有的LineBackgroundSpan，然后判断是否有高亮背景(文本选中的背景)，如果有则绘制高亮背景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBackground</span><span class="params">(Canvas canvas, Path highlight, Paint highlightPaint,</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">int</span> cursorOffsetVertical, <span class="keyword">int</span> firstLine, <span class="keyword">int</span> lastLine)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//判断并绘制LineBackgroundSpan</span></div><div class="line">        <span class="keyword">if</span> (mSpannedText) &#123;</div><div class="line">            <span class="keyword">if</span> (mLineBackgroundSpans == <span class="keyword">null</span>) &#123;</div><div class="line">                mLineBackgroundSpans = <span class="keyword">new</span> SpanSet&lt;LineBackgroundSpan&gt;(LineBackgroundSpan.class);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Spanned buffer = (Spanned) mText;</div><div class="line">            <span class="keyword">int</span> textLength = buffer.length();</div><div class="line">            mLineBackgroundSpans.init(buffer, <span class="number">0</span>, textLength);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mLineBackgroundSpans.numberOfSpans &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">int</span> previousLineBottom = getLineTop(firstLine);</div><div class="line">                <span class="keyword">int</span> previousLineEnd = getLineStart(firstLine);</div><div class="line">                ParagraphStyle[] spans = NO_PARA_SPANS;</div><div class="line">                <span class="keyword">int</span> spansLength = <span class="number">0</span>;</div><div class="line">                TextPaint paint = mPaint;</div><div class="line">                <span class="keyword">int</span> spanEnd = <span class="number">0</span>;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> width = mWidth;</div><div class="line">                <span class="comment">//逐行绘制LineBackgroundSpan</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = firstLine; i &lt;= lastLine; i++) &#123;</div><div class="line">                    <span class="keyword">int</span> start = previousLineEnd;</div><div class="line">                    <span class="keyword">int</span> end = getLineStart(i + <span class="number">1</span>);</div><div class="line">                    previousLineEnd = end;</div><div class="line"></div><div class="line">                    <span class="keyword">int</span> ltop = previousLineBottom;</div><div class="line">                    <span class="keyword">int</span> lbottom = getLineTop(i + <span class="number">1</span>);</div><div class="line">                    previousLineBottom = lbottom;</div><div class="line">                    <span class="keyword">int</span> lbaseline = lbottom - getLineDescent(i);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (start &gt;= spanEnd) &#123;</div><div class="line">                        spanEnd = mLineBackgroundSpans.getNextTransition(start, textLength);</div><div class="line"></div><div class="line">                        spansLength = <span class="number">0</span>;</div><div class="line">                        <span class="keyword">if</span> (start != end || start == <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">//排除不在绘制范围内的LineBackgroundSpan</span></div><div class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mLineBackgroundSpans.numberOfSpans; j++) &#123;</div><div class="line">                                <span class="keyword">if</span> (mLineBackgroundSpans.spanStarts[j] &gt;= end ||</div><div class="line">                                        mLineBackgroundSpans.spanEnds[j] &lt;= start) <span class="keyword">continue</span>;</div><div class="line">                                spans = GrowingArrayUtils.append(</div><div class="line">                                        spans, spansLength, mLineBackgroundSpans.spans[j]);</div><div class="line">                                spansLength++;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//对当前行内的LineBackgroundSpan进行绘制</span></div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; spansLength; n++) &#123;</div><div class="line">                        LineBackgroundSpan lineBackgroundSpan = (LineBackgroundSpan) spans[n];</div><div class="line">                        lineBackgroundSpan.drawBackground(canvas, paint, <span class="number">0</span>, width,</div><div class="line">                                ltop, lbaseline, lbottom,</div><div class="line">                                buffer, start, end, i);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            mLineBackgroundSpans.recycle();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//判断并绘制高亮背景(即选中的文本)</span></div><div class="line">        <span class="keyword">if</span> (highlight != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (cursorOffsetVertical != <span class="number">0</span>) canvas.translate(<span class="number">0</span>, cursorOffsetVertical);</div><div class="line">            canvas.drawPath(highlight, highlightPaint);</div><div class="line">            <span class="keyword">if</span> (cursorOffsetVertical != <span class="number">0</span>) canvas.translate(<span class="number">0</span>, -cursorOffsetVertical);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>drawText用来逐行绘制Layout的文本、影响显示效果的Span、以及Emoji表情等。当有Emoji或者Span的时候，实际绘制工作交给TextLine类来完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span><span class="params">(Canvas canvas, <span class="keyword">int</span> firstLine, <span class="keyword">int</span> lastLine)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> previousLineBottom = getLineTop(firstLine);</div><div class="line">        <span class="keyword">int</span> previousLineEnd = getLineStart(firstLine);</div><div class="line">        ParagraphStyle[] spans = NO_PARA_SPANS;</div><div class="line">        <span class="keyword">int</span> spanEnd = <span class="number">0</span>;</div><div class="line">        TextPaint paint = mPaint;</div><div class="line">        CharSequence buf = mText;</div><div class="line"></div><div class="line">        Alignment paraAlign = mAlignment;</div><div class="line">        TabStops tabStops = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">boolean</span> tabStopsIsInitialized = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="comment">//获取TextLine实例</span></div><div class="line">        TextLine tl = TextLine.obtain();</div><div class="line"></div><div class="line">        <span class="comment">//逐行绘制文本</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> lineNum = firstLine; lineNum &lt;= lastLine; lineNum++) &#123;</div><div class="line">            <span class="keyword">int</span> start = previousLineEnd;</div><div class="line">            previousLineEnd = getLineStart(lineNum + <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> end = getLineVisibleEnd(lineNum, start, previousLineEnd);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> ltop = previousLineBottom;</div><div class="line">            <span class="keyword">int</span> lbottom = getLineTop(lineNum + <span class="number">1</span>);</div><div class="line">            previousLineBottom = lbottom;</div><div class="line">            <span class="keyword">int</span> lbaseline = lbottom - getLineDescent(lineNum);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> dir = getParagraphDirection(lineNum);</div><div class="line">            <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> right = mWidth;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mSpannedText) &#123;</div><div class="line">                Spanned sp = (Spanned) buf;</div><div class="line">                <span class="keyword">int</span> textLength = buf.length();</div><div class="line">                <span class="comment">//检测是否段落的第一行</span></div><div class="line">                <span class="keyword">boolean</span> isFirstParaLine = (start == <span class="number">0</span> || buf.charAt(start - <span class="number">1</span>) == <span class="string">'\n'</span>);</div><div class="line"></div><div class="line">                <span class="comment">//获得所有的段落风格相关的Span</span></div><div class="line">                <span class="keyword">if</span> (start &gt;= spanEnd &amp;&amp; (lineNum == firstLine || isFirstParaLine)) &#123;</div><div class="line">                    spanEnd = sp.nextSpanTransition(start, textLength,</div><div class="line">                                                    ParagraphStyle.class);</div><div class="line">                    spans = getParagraphSpans(sp, start, spanEnd, ParagraphStyle.class);</div><div class="line"></div><div class="line">                    paraAlign = mAlignment;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> n = spans.length - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</div><div class="line">                        <span class="keyword">if</span> (spans[n] <span class="keyword">instanceof</span> AlignmentSpan) &#123;</div><div class="line">                            paraAlign = ((AlignmentSpan) spans[n]).getAlignment();</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    tabStopsIsInitialized = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">//获取影响行缩进的Span</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> length = spans.length;</div><div class="line">                <span class="keyword">boolean</span> useFirstLineMargin = isFirstParaLine;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; length; n++) &#123;</div><div class="line">                    <span class="keyword">if</span> (spans[n] <span class="keyword">instanceof</span> LeadingMarginSpan2) &#123;</div><div class="line">                        <span class="keyword">int</span> count = ((LeadingMarginSpan2) spans[n]).getLeadingMarginLineCount();</div><div class="line">                        <span class="keyword">int</span> startLine = getLineForOffset(sp.getSpanStart(spans[n]));</div><div class="line">                        <span class="keyword">if</span> (lineNum &lt; startLine + count) &#123;</div><div class="line">                            useFirstLineMargin = <span class="keyword">true</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; length; n++) &#123;</div><div class="line">                    <span class="keyword">if</span> (spans[n] <span class="keyword">instanceof</span> LeadingMarginSpan) &#123;</div><div class="line">                        LeadingMarginSpan margin = (LeadingMarginSpan) spans[n];</div><div class="line">                        <span class="keyword">if</span> (dir == DIR_RIGHT_TO_LEFT) &#123;</div><div class="line">                            margin.drawLeadingMargin(canvas, paint, right, dir, ltop,</div><div class="line">                                                     lbaseline, lbottom, buf,</div><div class="line">                                                     start, end, isFirstParaLine, <span class="keyword">this</span>);</div><div class="line">                            right -= margin.getLeadingMargin(useFirstLineMargin);</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            margin.drawLeadingMargin(canvas, paint, left, dir, ltop,</div><div class="line">                                                     lbaseline, lbottom, buf,</div><div class="line">                                                     start, end, isFirstParaLine, <span class="keyword">this</span>);</div><div class="line">                            left += margin.getLeadingMargin(useFirstLineMargin);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">boolean</span> hasTabOrEmoji = getLineContainsTab(lineNum);</div><div class="line">            <span class="keyword">if</span> (hasTabOrEmoji &amp;&amp; !tabStopsIsInitialized) &#123;</div><div class="line">                <span class="keyword">if</span> (tabStops == <span class="keyword">null</span>) &#123;</div><div class="line">                    tabStops = <span class="keyword">new</span> TabStops(TAB_INCREMENT, spans);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    tabStops.reset(TAB_INCREMENT, spans);</div><div class="line">                &#125;</div><div class="line">                tabStopsIsInitialized = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//判断当前行的第五方式</span></div><div class="line">            Alignment align = paraAlign;</div><div class="line">            <span class="keyword">if</span> (align == Alignment.ALIGN_LEFT) &#123;</div><div class="line">                align = (dir == DIR_LEFT_TO_RIGHT) ?</div><div class="line">                    Alignment.ALIGN_NORMAL : Alignment.ALIGN_OPPOSITE;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (align == Alignment.ALIGN_RIGHT) &#123;</div><div class="line">                align = (dir == DIR_LEFT_TO_RIGHT) ?</div><div class="line">                    Alignment.ALIGN_OPPOSITE : Alignment.ALIGN_NORMAL;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> x;</div><div class="line">            <span class="keyword">if</span> (align == Alignment.ALIGN_NORMAL) &#123;</div><div class="line">                <span class="keyword">if</span> (dir == DIR_LEFT_TO_RIGHT) &#123;</div><div class="line">                    x = left + getIndentAdjust(lineNum, Alignment.ALIGN_LEFT);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    x = right + getIndentAdjust(lineNum, Alignment.ALIGN_RIGHT);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> max = (<span class="keyword">int</span>)getLineExtent(lineNum, tabStops, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">if</span> (align == Alignment.ALIGN_OPPOSITE) &#123;</div><div class="line">                    <span class="keyword">if</span> (dir == DIR_LEFT_TO_RIGHT) &#123;</div><div class="line">                        x = right - max + getIndentAdjust(lineNum, Alignment.ALIGN_RIGHT);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        x = left - max + getIndentAdjust(lineNum, Alignment.ALIGN_LEFT);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// Alignment.ALIGN_CENTER</span></div><div class="line">                    max = max &amp; ~<span class="number">1</span>;</div><div class="line">                    x = ((right + left - max) &gt;&gt; <span class="number">1</span>) +</div><div class="line">                            getIndentAdjust(lineNum, Alignment.ALIGN_CENTER);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            paint.setHyphenEdit(getHyphen(lineNum));</div><div class="line">            Directions directions = getLineDirections(lineNum);</div><div class="line">            <span class="keyword">if</span> (directions == DIRS_ALL_LEFT_TO_RIGHT &amp;&amp; !mSpannedText &amp;&amp; !hasTabOrEmoji) &#123;</div><div class="line">                <span class="comment">//没有任何Emoji或者span的时候，直接调用Canvas来绘制文本</span></div><div class="line">                canvas.drawText(buf, start, end, x, lbaseline, paint);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//当有Emoji或者Span的时候，交给TextLine类来绘制</span></div><div class="line">                tl.set(paint, buf, start, end, dir, directions, hasTabOrEmoji, tabStops);</div><div class="line">                tl.draw(canvas, x, ltop, lbaseline, lbottom);</div><div class="line">            &#125;</div><div class="line">            paint.setHyphenEdit(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        TextLine.recycle(tl);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>我们下面再来看看TextLine是如何绘制有特殊情况的文本的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas c, <span class="keyword">float</span> x, <span class="keyword">int</span> top, <span class="keyword">int</span> y, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断是否有Tab或者Emoji</span></div><div class="line">        <span class="keyword">if</span> (!mHasTabs) &#123;</div><div class="line">            <span class="keyword">if</span> (mDirections == Layout.DIRS_ALL_LEFT_TO_RIGHT) &#123;</div><div class="line">                drawRun(c, <span class="number">0</span>, mLen, <span class="keyword">false</span>, x, top, y, bottom, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (mDirections == Layout.DIRS_ALL_RIGHT_TO_LEFT) &#123;</div><div class="line">                drawRun(c, <span class="number">0</span>, mLen, <span class="keyword">true</span>, x, top, y, bottom, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">float</span> h = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] runs = mDirections.mDirections;</div><div class="line">        RectF emojiRect = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> lastRunIndex = runs.length - <span class="number">2</span>;</div><div class="line">        <span class="comment">//逐个绘制</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; runs.length; i += <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">int</span> runStart = runs[i];</div><div class="line">            <span class="keyword">int</span> runLimit = runStart + (runs[i+<span class="number">1</span>] &amp; Layout.RUN_LENGTH_MASK);</div><div class="line">            <span class="keyword">if</span> (runLimit &gt; mLen) &#123;</div><div class="line">                runLimit = mLen;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">boolean</span> runIsRtl = (runs[i+<span class="number">1</span>] &amp; Layout.RUN_RTL_FLAG) != <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> segstart = runStart;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = mHasTabs ? runStart : runLimit; j &lt;= runLimit; j++) &#123;</div><div class="line">                <span class="keyword">int</span> codept = <span class="number">0</span>;</div><div class="line">                Bitmap bm = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (mHasTabs &amp;&amp; j &lt; runLimit) &#123;</div><div class="line">                    codept = mChars[j];</div><div class="line">                    <span class="keyword">if</span> (codept &gt;= <span class="number">0xd800</span> &amp;&amp; codept &lt; <span class="number">0xdc00</span> &amp;&amp; j + <span class="number">1</span> &lt; runLimit) &#123;</div><div class="line">                        codept = Character.codePointAt(mChars, j);</div><div class="line">                        <span class="keyword">if</span> (codept &gt;= Layout.MIN_EMOJI &amp;&amp; codept &lt;= Layout.MAX_EMOJI) &#123;</div><div class="line">                            <span class="comment">//获取Emoji对应的图像</span></div><div class="line">                            bm = Layout.EMOJI_FACTORY.getBitmapFromAndroidPua(codept);</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (codept &gt; <span class="number">0xffff</span>) &#123;</div><div class="line">                            ++j;</div><div class="line">                            <span class="keyword">continue</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (j == runLimit || codept == <span class="string">'\t'</span> || bm != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">//绘制文字</span></div><div class="line">                    h += drawRun(c, segstart, j, runIsRtl, x+h, top, y, bottom,</div><div class="line">                            i != lastRunIndex || j != mLen);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (codept == <span class="string">'\t'</span>) &#123;</div><div class="line">                        h = mDir * nextTab(h * mDir);</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bm != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">float</span> bmAscent = ascent(j);</div><div class="line">                        <span class="keyword">float</span> bitmapHeight = bm.getHeight();</div><div class="line">                        <span class="keyword">float</span> scale = -bmAscent / bitmapHeight;</div><div class="line">                        <span class="keyword">float</span> width = bm.getWidth() * scale;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (emojiRect == <span class="keyword">null</span>) &#123;</div><div class="line">                            emojiRect = <span class="keyword">new</span> RectF();</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//调整emoji图像绘制矩形</span></div><div class="line">                        emojiRect.set(x + h, y + bmAscent,</div><div class="line">                                x + h + width, y);</div><div class="line">                        <span class="comment">//绘制Emoji图像</span></div><div class="line">                        c.drawBitmap(bm, <span class="keyword">null</span>, emojiRect, mPaint);</div><div class="line">                        h += width;</div><div class="line">                        j++;</div><div class="line">                    &#125;</div><div class="line">                    segstart = j + <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>这样就完成了文本的绘制工作，简单地总结就是：分析整体文本—&gt;拆分为段落—&gt;计算整体段落的文本包括Span的测量信息—&gt;对文本进行折行—&gt;根据最终行数把文本测量信息保存—&gt;绘制文本的行背景—&gt;判断并获取文本种的Span和Emoji图像—&gt;绘制最终的文本和图像。当然我们省略了一部分内容，比如段落文本方向，单行的文本排版方向的计算，实际的处理要更为复杂。</p><p>接下来我们来看一下在测量过程中出现的FontMetrics，这是一个Paint的静态内部类。主要用来储存文字排版的Y轴相关信息。内部仅包含ascent、descent、top、bottom、leading五个数值。如下图:</p><p> <img src="https://raw.githubusercontent.com/7heaven/AndroidSdkSourceAnalysis/master/article/images/fontmetrics.gif" alt="1339061786_4121"></p><p>除了leading以外，其他的数值都是相对于每一行的baseline的，也就是说其他的数值需要加上对应行的baseline才能得到最终真实的坐标。</p><h2 id="6-TextView接收软键盘输入"><a href="#6-TextView接收软键盘输入" class="headerlink" title="6.TextView接收软键盘输入"></a>6.TextView接收软键盘输入</h2><p>Android上的标准文本编辑控件是EditText，而EditText对软键盘输入的处理，却是在TextView内部实现的。Android为所有的View预留了一个接收软键盘输入的接口类，叫InputConnection。软键盘以InputConnection为桥梁把文字输入、文字修改、文字删除等传递给View。任意View只要重写onCheckIsTextEditor()并返回true，然后重写onCreateInputConnection(EditorInfo outAttrs)返回一个InputConnection的实例，便可以接收软键盘的输入。TextView的软键盘输入接收，是通过EditableInputConnection类来实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> InputConnection <span class="title">onCreateInputConnection</span><span class="params">(EditorInfo outAttrs)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断是否处于可编辑状态</span></div><div class="line">        <span class="keyword">if</span> (onCheckIsTextEditor() &amp;&amp; isEnabled()) &#123;</div><div class="line">            mEditor.createInputMethodStateIfNeeded();</div><div class="line"></div><div class="line">            <span class="comment">//设置输入法相关的信息</span></div><div class="line">            outAttrs.inputType = getInputType();</div><div class="line">            <span class="keyword">if</span> (mEditor.mInputContentType != <span class="keyword">null</span>) &#123;</div><div class="line">                outAttrs.imeOptions = mEditor.mInputContentType.imeOptions;</div><div class="line">                outAttrs.privateImeOptions = mEditor.mInputContentType.privateImeOptions;</div><div class="line">                outAttrs.actionLabel = mEditor.mInputContentType.imeActionLabel;</div><div class="line">                outAttrs.actionId = mEditor.mInputContentType.imeActionId;</div><div class="line">                outAttrs.extras = mEditor.mInputContentType.extras;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                outAttrs.imeOptions = EditorInfo.IME_NULL;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (focusSearch(FOCUS_DOWN) != <span class="keyword">null</span>) &#123;</div><div class="line">                outAttrs.imeOptions |= EditorInfo.IME_FLAG_NAVIGATE_NEXT;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (focusSearch(FOCUS_UP) != <span class="keyword">null</span>) &#123;</div><div class="line">                outAttrs.imeOptions |= EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ((outAttrs.imeOptions&amp;EditorInfo.IME_MASK_ACTION)</div><div class="line">                    == EditorInfo.IME_ACTION_UNSPECIFIED) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> ((outAttrs.imeOptions&amp;EditorInfo.IME_FLAG_NAVIGATE_NEXT) != <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">//把软键盘的enter设为下一步</span></div><div class="line">                    outAttrs.imeOptions |= EditorInfo.IME_ACTION_NEXT;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//把软键盘的enter设为完成</span></div><div class="line">                    outAttrs.imeOptions |= EditorInfo.IME_ACTION_DONE;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!shouldAdvanceFocusOnEnter()) &#123;</div><div class="line">                    outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (isMultilineInputType(outAttrs.inputType)) &#123;</div><div class="line">                outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_ENTER_ACTION;</div><div class="line">            &#125;</div><div class="line">            outAttrs.hintText = mHint;</div><div class="line"></div><div class="line">            <span class="comment">//判断TextView内部文本是否可编辑</span></div><div class="line">            <span class="keyword">if</span> (mText <span class="keyword">instanceof</span> Editable) &#123;</div><div class="line">                <span class="comment">//返回EditableInputConnection实例</span></div><div class="line">                InputConnection ic = <span class="keyword">new</span> EditableInputConnection(<span class="keyword">this</span>);</div><div class="line">                outAttrs.initialSelStart = getSelectionStart();</div><div class="line">                outAttrs.initialSelEnd = getSelectionEnd();</div><div class="line">                outAttrs.initialCapsMode = ic.getCursorCapsMode(getInputType());</div><div class="line">                <span class="keyword">return</span> ic;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>我们再来看一下EditableInputConnection里面的几个主要的方法：</p><p>首先是commitText方法，这个方法接收输入法输入的字符并提交给TextView。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">commitText</span><span class="params">(CharSequence text, <span class="keyword">int</span> newCursorPosition)</span> </span>&#123;</div><div class="line">        <span class="comment">//判断TextView是否为空</span></div><div class="line">        <span class="keyword">if</span> (mTextView == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.commitText(text, newCursorPosition);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//判断文本是否Span，来自输入法的Span一般只有SuggestionSpan，SuggestionSpan携带了输入法的错别字修正的词</span></div><div class="line">        <span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spanned) &#123;</div><div class="line">            Spanned spanned = ((Spanned) text);</div><div class="line">            SuggestionSpan[] spans = spanned.getSpans(<span class="number">0</span>, text.length(), SuggestionSpan.class);</div><div class="line">            mIMM.registerSuggestionSpansForNotification(spans);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mTextView.resetErrorChangedFlag();</div><div class="line">        <span class="comment">//提交字符</span></div><div class="line">        <span class="keyword">boolean</span> success = <span class="keyword">super</span>.commitText(text, newCursorPosition);</div><div class="line">        mTextView.hideErrorIfUnchanged();</div><div class="line">        <span class="comment">//返回是否成功</span></div><div class="line">        <span class="keyword">return</span> success;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>getEditable方法，这个方法并不是InputConnection接口的一部分，而是EditableInputConnection的父类BaseInputConnection的方法，用来获取一个可编辑对象，EditableInputConnection里面的所有修改都针对这个可编辑对象来做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Editable <span class="title">getEditable</span><span class="params">()</span> </span>&#123;</div><div class="line">        TextView tv = mTextView;</div><div class="line">        <span class="keyword">if</span> (tv != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//返回TextView的可编辑对象</span></div><div class="line">            <span class="keyword">return</span> tv.getEditableText();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>deleteSurroundingText方法，这个方法用来删除光标前后的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteSurroundingText</span><span class="params">(<span class="keyword">int</span> beforeLength, <span class="keyword">int</span> afterLength)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"deleteSurroundingText "</span> + beforeLength</div><div class="line">                + <span class="string">" / "</span> + afterLength);</div><div class="line">        <span class="keyword">final</span> Editable content = getEditable();</div><div class="line">        <span class="keyword">if</span> (content == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="comment">//批量删除标记</span></div><div class="line">        beginBatchEdit();</div><div class="line"></div><div class="line">        <span class="comment">//获取当前已选择的文本的位置</span></div><div class="line">        <span class="keyword">int</span> a = Selection.getSelectionStart(content);</div><div class="line">        <span class="keyword">int</span> b = Selection.getSelectionEnd(content);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (a &gt; b) &#123;</div><div class="line">            <span class="keyword">int</span> tmp = a;</div><div class="line">            a = b;</div><div class="line">            b = tmp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ca = getComposingSpanStart(content);</div><div class="line">        <span class="keyword">int</span> cb = getComposingSpanEnd(content);</div><div class="line">        <span class="keyword">if</span> (cb &lt; ca) &#123;</div><div class="line">            <span class="keyword">int</span> tmp = ca;</div><div class="line">            ca = cb;</div><div class="line">            cb = tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (ca != -<span class="number">1</span> &amp;&amp; cb != -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (ca &lt; a) a = ca;</div><div class="line">            <span class="keyword">if</span> (cb &gt; b) b = cb;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> deleted = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">//删除光标之前的文本</span></div><div class="line">        <span class="keyword">if</span> (beforeLength &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> start = a - beforeLength;</div><div class="line">            <span class="keyword">if</span> (start &lt; <span class="number">0</span>) start = <span class="number">0</span>;</div><div class="line">            content.delete(start, a);</div><div class="line">            deleted = a - start;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//删除光标之后的文本</span></div><div class="line">        <span class="keyword">if</span> (afterLength &gt; <span class="number">0</span>) &#123;</div><div class="line">            b = b - deleted;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> end = b + afterLength;</div><div class="line">            <span class="keyword">if</span> (end &gt; content.length()) end = content.length();</div><div class="line"></div><div class="line">            content.delete(b, end);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//结束批量编辑</span></div><div class="line">        endBatchEdit();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>commitCompletion和commitCorrection方法，即是用来补全单词和修正错别字的方法，这两个方法内部都是调用TextView对应的方法来实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">commitCompletion</span><span class="params">(CompletionInfo text)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"commitCompletion "</span> + text);</div><div class="line">        mTextView.beginBatchEdit();</div><div class="line">        mTextView.onCommitCompletion(text);</div><div class="line">        mTextView.endBatchEdit();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">commitCorrection</span><span class="params">(CorrectionInfo correctionInfo)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"commitCorrection"</span> + correctionInfo);</div><div class="line">        mTextView.beginBatchEdit();</div><div class="line">        mTextView.onCommitCorrection(correctionInfo);</div><div class="line">        mTextView.endBatchEdit();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h2><p>一个展示文本+文本编辑器功能的控件需要做的事情很多，要对文本进行排版、处理不同的段落风格、处理段落内的不同emoji和span、进行折行计算，然后还需要做文本编辑、文本选择等。而TextView把这些事情明确分工给不同的类。这样不仅仅把复杂问题拆分成了一个个简单的小功能，同时也大大增加了可扩展性。</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>TabLayout源码解析</title>
    <link href="https://github.com/itgoyo/2017/07/26/TabLayout%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/TabLayout源码解析.html</id>
    <published>2017-07-26T12:06:13.000Z</published>
    <updated>2017-11-23T13:15:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><h1 id="TabLayout-源码解析"><a href="#TabLayout-源码解析" class="headerlink" title="TabLayout 源码解析"></a>TabLayout 源码解析</h1><h2 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1. 功能介绍"></a>1. 功能介绍</h2><h3 id="1-1-TabLayout"><a href="#1-1-TabLayout" class="headerlink" title="1.1 TabLayout"></a>1.1 TabLayout</h3><p>Tabs跟随Actionbar在Android 3.0进入大家的视线，是一个很经典的设计。它也是Material Design 规范中提及的<code>Component</code>之一。Tabs or Bottom navigation？相信不少Android开发者与产品都撕过，就连微信在其中也有过抉择。Google在Google+以及Google Photo中相继采用Bottom navigation的设计把剧情推到向高潮，一度轰动整个社区。Google继而在Material Design 规范加入了Bottom navigation，表明了态度，也给这起争论画上了圆满的句号。</p><p>在 support desgin lib 发布前，大家基本都采用<a href="https://github.com/astuetz/PagerSlidingTabStrip">PagerSlidingTabStrip</a>来实现tab效果。其实<code>TabLayout</code>在实现上和<code>PagerSlidingTabStrip</code>十分相似，今天我们来分析<code>TabLayout</code>。</p><h3 id="1-2-TabLayout使用"><a href="#1-2-TabLayout使用" class="headerlink" title="1.2 TabLayout使用"></a>1.2 TabLayout使用</h3><p><code>TabLayout</code>使用比较简单。既可以单独使用，也可以与<code>ViewPager</code>配合使用。</p><h4 id="1-2-1-TabLayout单独使用"><a href="#1-2-1-TabLayout单独使用" class="headerlink" title="1.2.1 TabLayout单独使用"></a>1.2.1 TabLayout单独使用</h4><p>在java代码中添加Tabs<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TabLayout tabLayout = (TabLayout) findViewById(R.id.tabLayout);</div><div class="line">tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"Tab 1"</span>));</div><div class="line">tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"Tab 2"</span>));</div><div class="line">tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"Tab 3"</span>));</div></pre></td></tr></table></figure></p><p>也可以在xml中添加Tabs<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/tab_text"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_android"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="1-2-2-与ViewPager搭配使用"><a href="#1-2-2-与ViewPager搭配使用" class="headerlink" title="1.2.2 与ViewPager搭配使用"></a>1.2.2 与ViewPager搭配使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// find view</span></div><div class="line">TabLayout tabLayout = ...;</div><div class="line">ViewPager viewPager = ...;</div><div class="line"></div><div class="line">PagerAdapter adapter = <span class="keyword">new</span> PagerAdapter()&#123;</div><div class="line">    <span class="comment">// ...Override some methods</span></div><div class="line">    <span class="comment">// TabLayout调用这个方法获取Tab的title</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Tab 1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">viewPager.setAdapter(adapter);</div><div class="line">tabLayout.setupWithViewPager(viewPager);</div></pre></td></tr></table></figure><h2 id="2-总体设计"><a href="#2-总体设计" class="headerlink" title="2. 总体设计"></a>2. 总体设计</h2><ul><li><p><code>TabLayout</code>继承<code>HorizontalScrollView</code>天生就是一个可以横向滚动的<code>ViewGroup</code>. 我们知道, <code>HorizontalScrollView</code>与<code>ScrollView</code>一样, 最多只能包含一个子View.</p></li><li><p><code>SlidingTabStrip</code>继承于<code>LinearLayout</code>，是<code>TabLayout</code>的内部类。它是<code>TabLayout</code>唯一的子View. 所有的<code>TabView</code>都是它的子View.</p></li><li><p><code>TabView</code>继承于<code>LinearLayout</code>,以<code>Tab</code>为数据源，来展示Tab的样式。最终用for循环被add进<code>SlidingTabStrip</code>.</p></li><li><p><code>Tab</code>是一个简单的View Model实体类，控制<code>TabView</code>的title, icon, custom layout id等属性。</p></li><li><p><code>TabItem</code>继承于View. 用于在layout xml中来描述Tab. 需要注意的是，它不会add到<code>SlidingTabStrip</code>中去。它的作用是从xml中获取到text，icon，custom layout id等属性。TabLayout inflate到<code>TabItem</code>并获取属性到装配到<code>Tab</code>中，最终add到<code>SlidingTabStrip</code>中的还是<code>TabView</code>.</p></li><li><p><code>OnTabSelectedListener</code>是TabLayout中的内部接口，用于监听<code>SlidingTabStrip</code>中子<code>TabView</code>选中状态的改变。</p></li><li><p><code>Mode</code>是TabLayout滚动模式的描述，一共有两种状态。<code>MODE_FIXED</code>不可滚动模式，以及<code>MODE_SCROLLABLE</code>可以滚动模式。</p></li><li><p><code>Gravity</code>是<code>TabView</code>在<code>SlidingTabStrip</code>中layout方式的描述。分为：GRAVITY_FILL，GRAVITY_CENTER.</p></li></ul><h2 id="3-详细设计"><a href="#3-详细设计" class="headerlink" title="3. 详细设计"></a>3. 详细设计</h2><h3 id="3-1-类关系图"><a href="#3-1-类关系图" class="headerlink" title="3.1 类关系图"></a>3.1 类关系图</h3><p><img src="../assets/tablayout.png" alt="TabLayout"></p><h3 id="3-2-分析"><a href="#3-2-分析" class="headerlink" title="3.2 分析"></a>3.2 分析</h3><h4 id="3-2-1-TabLayout子View唯一性保证"><a href="#3-2-1-TabLayout子View唯一性保证" class="headerlink" title="3.2.1 TabLayout子View唯一性保证"></a>3.2.1 TabLayout子View唯一性保证</h4><p>前面介绍<code>TabLayout</code>继承于<code>HorizontalScrollView</code>最多只能有1个子View. 但<code>TabLayout</code>可以在layout中添加多个子View节点. 这是怎么回事呢？<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/tab_text"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.TabItem</span></span></div><div class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_android"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></div></pre></td></tr></table></figure></p><p>看过<code>LayoutInflater</code>源码的同学可能会知道这个过程：先inflate到生成View对象，再调用<code>ViewGroup#addView(...)</code>系列方法把view添加到ViewGroup中。我们发现TabLayout的<code>addView(...)</code>系列方法，都删去super调用，且调用了共同的一个方法，<code>addViewInternal(View view)</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private void addViewInternal(final View child) &#123;</div><div class="line">    if (child instanceof TabItem) &#123;</div><div class="line">        addTabFromItemView((TabItem) child);</div><div class="line">    &#125; else &#123;</div><div class="line">        throw new IllegalArgumentException("Only TabItem instances can be added to TabLayout");</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可见，若child非<code>TabItem</code>对象会抛出异常。所以xml中给TabLayout添加tab时，只能添加<code>TabItem</code>对象。若想添加其它View类型怎么办？TabItem有<code>android:customView</code>这个属性。我们继续来看。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTabFromItemView</span><span class="params">(@NonNull TabItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Tab tab = newTab();</div><div class="line">    <span class="keyword">if</span> (item.mText != <span class="keyword">null</span>) &#123;</div><div class="line">        tab.setText(item.mText);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (item.mIcon != <span class="keyword">null</span>) &#123;</div><div class="line">        tab.setIcon(item.mIcon);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (item.mCustomLayout != <span class="number">0</span>) &#123;</div><div class="line">        tab.setCustomView(item.mCustomLayout);</div><div class="line">    &#125;</div><div class="line">    addTab(tab);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Tab <span class="title">newTab</span><span class="params">()</span> </span>&#123;</div><div class="line">    Tab tab = sTabPool.acquire();</div><div class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span>) &#123;</div><div class="line">        tab = <span class="keyword">new</span> Tab();</div><div class="line">    &#125;</div><div class="line">    tab.mParent = <span class="keyword">this</span>;</div><div class="line">    tab.mView = createTabView(tab);</div><div class="line">    <span class="keyword">return</span> tab;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> TabView <span class="title">createTabView</span><span class="params">(@NonNull <span class="keyword">final</span> Tab tab)</span> </span>&#123;</div><div class="line">    TabView tabView = mTabViewPool != <span class="keyword">null</span> ? mTabViewPool.acquire() : <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (tabView == <span class="keyword">null</span>) &#123;</div><div class="line">        tabView = <span class="keyword">new</span> TabView(getContext());</div><div class="line">    &#125;</div><div class="line">    tabView.setTab(tab);</div><div class="line">    tabView.setFocusable(<span class="keyword">true</span>);</div><div class="line">    tabView.setMinimumWidth(getTabMinWidth());</div><div class="line">    <span class="keyword">return</span> tabView;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里调<code>newTab()</code>方法创建了一个tab对象，并且用对象池把创建的tab对象缓存起来。然后将<code>TabItem</code>对象的属性都赋值给tab对象。在<code>createTabView(Tab tab)</code>这个方法中，首先从<code>TabView</code>池中获取<code>TabView</code>对象，如果不存在，则实例化一个对象，并调用<code>tabView.setTab(tab)</code>方法来进行了数据绑定。 <code>addTab(...)</code>有三个重载方法，最终都会调用如下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTab</span><span class="params">(@NonNull Tab tab, <span class="keyword">boolean</span> setSelected)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tab.mParent != <span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Tab belongs to a different TabLayout."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    addTabView(tab, setSelected);</div><div class="line">    configureTab(tab, mTabs.size());</div><div class="line">    <span class="keyword">if</span> (setSelected) &#123;</div><div class="line">        tab.select();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTabView</span><span class="params">(Tab tab, <span class="keyword">int</span> position, <span class="keyword">boolean</span> setSelected)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> TabView tabView = tab.mView;</div><div class="line">    mTabStrip.addView(tabView, position, createLayoutParamsForTabs());</div><div class="line">    <span class="keyword">if</span> (setSelected) &#123;</div><div class="line">        tabView.setSelected(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureTab</span><span class="params">(Tab tab, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    tab.setPosition(position);</div><div class="line">    mTabs.add(position, tab);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = mTabs.size();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = position + <span class="number">1</span>; i &lt; count; i++) &#123;</div><div class="line">        mTabs.get(i).setPosition(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在<code>addView(Tab, int, boolean)</code>方法中，把<code>TabView</code>对象add进了<code>SlidingTabStrip</code>这个<code>ViewGroup</code>中。实际上<code>SlidingTabStrip</code>的对象<code>mTabStrip</code>才是<code>TabLayout</code>的唯一子View.在<code>TabLayout</code>的构造方法中:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TabLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    <span class="comment">// 禁用横向滑动条</span></div><div class="line">    setHorizontalScrollBarEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <span class="comment">// new 一个'SlidingTabStrip'的实例，并作为唯一的子View add进'TabLayout'.</span></div><div class="line">    mTabStrip = <span class="keyword">new</span> SlidingTabStrip(context);</div><div class="line">    <span class="keyword">super</span>.addView(mTabStrip, <span class="number">0</span>, <span class="keyword">new</span> HorizontalScrollView.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT));</div><div class="line"></div><div class="line">    <span class="comment">// 省略下面的无关代码...</span></div><div class="line">｝</div></pre></td></tr></table></figure></p><p>至此，我们就明白了<code>TabLayout</code>中子View的一致性是如何保证的。也明白了<code>TabView</code>其实才是亲生的，<code>TabItem</code>其实是后娘养的! 这些代码都很简单，不过我们可以从中学习到很多有用的思想。</p><p>至此，一个清晰的<code>View</code>层级图应该就出现在了各位同学的眼前。<br><img src="../assets/hierarchy.png" alt="TabLayout Hierarchy"></p><h4 id="3-2-2-与ViewPager搭配使用"><a href="#3-2-2-与ViewPager搭配使用" class="headerlink" title="3.2.2 与ViewPager搭配使用"></a>3.2.2 与ViewPager搭配使用</h4><p>有了上面的的基础，我们再来看看<code>TabLayout</code>是如何和它的好基友<code>ViewPager</code>搭配使用的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupWithViewPager</span><span class="params">(@Nullable <span class="keyword">final</span> ViewPager viewPager)</span> </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="comment">//为理解简单起见，删掉边角性干扰代码，主要来看核心逻辑</span></div><div class="line"></div><div class="line">    mViewPager = viewPager;</div><div class="line"></div><div class="line">    <span class="comment">// Add our custom OnPageChangeListener to the ViewPager</span></div><div class="line">    <span class="keyword">if</span> (mPageChangeListener == <span class="keyword">null</span>) &#123;</div><div class="line">        mPageChangeListener = <span class="keyword">new</span> TabLayoutOnPageChangeListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    mPageChangeListener.reset();</div><div class="line">    viewPager.addOnPageChangeListener(mPageChangeListener);</div><div class="line"></div><div class="line">    <span class="comment">// Now we'll add a tab selected listener to set ViewPager's current item</span></div><div class="line">    setOnTabSelectedListener(<span class="keyword">new</span> ViewPagerOnTabSelectedListener(viewPager));</div><div class="line"></div><div class="line">    <span class="comment">// Now we'll populate ourselves from the pager adapter</span></div><div class="line">    setPagerAdapter(adapter, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnTabSelectedListener</span><span class="params">(OnTabSelectedListener onTabSelectedListener)</span> </span>&#123;</div><div class="line">    mOnTabSelectedListener = onTabSelectedListener;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPagerAdapter</span><span class="params">(@Nullable <span class="keyword">final</span> PagerAdapter adapter, <span class="keyword">final</span> <span class="keyword">boolean</span> addObserver)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mPagerAdapter != <span class="keyword">null</span> &amp;&amp; mPagerAdapterObserver != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// If we already have a PagerAdapter, unregister our observer</span></div><div class="line">        mPagerAdapter.unregisterDataSetObserver(mPagerAdapterObserver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mPagerAdapter = adapter;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (addObserver &amp;&amp; adapter != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Register our observer on the new adapter</span></div><div class="line">        <span class="keyword">if</span> (mPagerAdapterObserver == <span class="keyword">null</span>) &#123;</div><div class="line">            mPagerAdapterObserver = <span class="keyword">new</span> PagerAdapterObserver();</div><div class="line">        &#125;</div><div class="line">        adapter.registerDataSetObserver(mPagerAdapterObserver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Finally make sure we reflect the new adapter</span></div><div class="line">    populateFromPagerAdapter();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里的<code>TabLayoutOnPageChangeListener</code>实现了<code>ViewPager.OnPageChangeListener</code>. 首先调用<code>ViewPager</code>对象<code>addOnPageChangeListener(OnPageChangeListener)</code>来监听<code>ViewPager</code>的滑动以及当前也的选中。然后设置<code>ViewPagerOnTabSelectedListener</code>对象，保证ViewPager的页面和TabLayout的item的选中状态保持一致，以及滚动的协同性。这里的监听在3.2.3中详细讲解。</p><p>我们一般调用<code>viewPager.getAdapter().notifyDataSetChanged()</code>来进行ViewPager的刷新. 现在我们在ViewPager的adapter中注册一个监听器，监听<code>ViewPager</code>的刷新行为。目的是为了刷新<code>ViewPager</code>的同时也可以刷新TabLayout. 我们来看看<code>PagerAdapterObserver</code>这个监听器是如何刷新TabLayout的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PagerAdapterObserver</span> <span class="keyword">extends</span> <span class="title">DataSetObserver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">        populateFromPagerAdapter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInvalidated</span><span class="params">()</span> </span>&#123;</div><div class="line">        populateFromPagerAdapter();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">populateFromPagerAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">    removeAllTabs();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mPagerAdapter != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> adapterCount = mPagerAdapter.getCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; adapterCount; i++) &#123;</div><div class="line">            addTab(newTab().setText(mPagerAdapter.getPageTitle(i)), <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure we reflect the currently set ViewPager item</span></div><div class="line">        <span class="keyword">if</span> (mViewPager != <span class="keyword">null</span> &amp;&amp; adapterCount &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> curItem = mViewPager.getCurrentItem();</div><div class="line">            <span class="keyword">if</span> (curItem != getSelectedTabPosition() &amp;&amp; curItem &lt; getTabCount()) &#123;</div><div class="line">                selectTab(getTabAt(curItem));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        removeAllTabs();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAllTabs</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Remove all the views</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mTabStrip.getChildCount() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        removeTabViewAt(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> Iterator&lt;Tab&gt; i = mTabs.iterator(); i.hasNext();) &#123;</div><div class="line">        <span class="keyword">final</span> Tab tab = i.next();</div><div class="line">        i.remove();</div><div class="line">        tab.reset();</div><div class="line">        sTabPool.release(tab);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mSelectedTab = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>刷新方式很简单粗暴，从<code>SlidingTabStrip</code>对象中移除所有的<code>TabView</code>，继而从View Model<code>mTabs</code>中移除所有<code>Tab</code>对象。然后从adapter中获取tab信息，循环调用<code>addTab(Tab, boolean)</code>方法重新添加<code>TabView</code>。最后调用<code>ViewPager</code>对象的<code>getCurrentItem()</code>方法，获取当前位置，然后调用selectTab(int position)恢复<code>TabView</code>的选中状态（针对TabView的选中，3.2.4中有详细介绍)。</p><h4 id="3-2-3-ViewPager与TabLayout的Tab及indicaotr协同滚动"><a href="#3-2-3-ViewPager与TabLayout的Tab及indicaotr协同滚动" class="headerlink" title="3.2.3 ViewPager与TabLayout的Tab及indicaotr协同滚动"></a>3.2.3 ViewPager与TabLayout的Tab及indicaotr协同滚动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TabLayoutOnPageChangeListener</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">OnPageChangeListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;TabLayout&gt; mTabLayoutRef;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPreviousScrollState;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mScrollState;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TabLayoutOnPageChangeListener</span><span class="params">(TabLayout tabLayout)</span> </span>&#123;</div><div class="line">        mTabLayoutRef = <span class="keyword">new</span> WeakReference&lt;&gt;(tabLayout);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line">        mPreviousScrollState = mScrollState;</div><div class="line">        mScrollState = state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> TabLayout tabLayout = mTabLayoutRef.get();</div><div class="line">        <span class="keyword">if</span> (tabLayout != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// Only update the text selection if we're not settling, or we are settling after</span></div><div class="line">            <span class="comment">// being dragged</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> updateText = mScrollState != SCROLL_STATE_SETTLING ||</div><div class="line">                    mPreviousScrollState == SCROLL_STATE_DRAGGING;</div><div class="line">            <span class="comment">// Update the indicator if we're not settling after being idle. This is caused</span></div><div class="line">            <span class="comment">// from a setCurrentItem() call and will be handled by an animation from</span></div><div class="line">            <span class="comment">// onPageSelected() instead.</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> updateIndicator = !(mScrollState == SCROLL_STATE_SETTLING</div><div class="line">                    &amp;&amp; mPreviousScrollState == SCROLL_STATE_IDLE);</div><div class="line">            tabLayout.setScrollPosition(position, positionOffset, updateText, updateIndicator);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> TabLayout tabLayout = mTabLayoutRef.get();</div><div class="line">        <span class="keyword">if</span> (tabLayout != <span class="keyword">null</span> &amp;&amp; tabLayout.getSelectedTabPosition() != position) &#123;</div><div class="line">            <span class="comment">// Select the tab, only updating the indicator if we're not being dragged/settled</span></div><div class="line">            <span class="comment">// (since onPageScrolled will handle that).</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> updateIndicator = mScrollState == SCROLL_STATE_IDLE</div><div class="line">                    || (mScrollState == SCROLL_STATE_SETTLING</div><div class="line">                    &amp;&amp; mPreviousScrollState == SCROLL_STATE_IDLE);</div><div class="line">            tabLayout.selectTab(tabLayout.getTabAt(position), updateIndicator);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPreviousScrollState = mScrollState = SCROLL_STATE_IDLE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用过<code>ViewPager</code>的同学对<code>OnPageChangeListener</code>不会陌生，不多赘述。<code>TabLayoutOnPageChangeListener</code>实现了<code>OnPageChangeListener</code>, 在<code>onPageScrolled(...)</code>方法中做协同滚动处理。滚动的条件是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> updateIndicator = !(mScrollState == SCROLL_STATE_SETTLING &amp;&amp; mPreviousScrollState == SCROLL_STATE_IDLE);</div></pre></td></tr></table></figure></p><p>调用<code>TabLayout的setScrollPosition(...)</code>方法来控制<code>TabLayout</code>中<code>TabView</code>和indocator的协同滚动。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setScrollPosition</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">boolean</span> updateSelectedText, <span class="keyword">boolean</span> updateIndicatorPosition)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> roundedPosition = Math.round(position + positionOffset);</div><div class="line">    <span class="keyword">if</span> (roundedPosition &lt; <span class="number">0</span> || roundedPosition &gt;= mTabStrip.getChildCount()) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Set the indicator position, if enabled</span></div><div class="line">    <span class="keyword">if</span> (updateIndicatorPosition) &#123;</div><div class="line">        mTabStrip.setIndicatorPositionFromTabPosition(position, positionOffset);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Now update the scroll position, canceling any running animation</span></div><div class="line">    <span class="keyword">if</span> (mScrollAnimator != <span class="keyword">null</span> &amp;&amp; mScrollAnimator.isRunning()) &#123;</div><div class="line">        mScrollAnimator.cancel();</div><div class="line">    &#125;</div><div class="line">    scrollTo(calculateScrollXForTab(position, positionOffset), <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Update the 'selected state' view as we scroll, if enabled</span></div><div class="line">    <span class="keyword">if</span> (updateSelectedText) &#123;</div><div class="line">        setSelectedTabView(roundedPosition);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h5 id="3-2-3-1-TabLayout的Indicator协同滚动"><a href="#3-2-3-1-TabLayout的Indicator协同滚动" class="headerlink" title="3.2.3.1 TabLayout的Indicator协同滚动"></a>3.2.3.1 TabLayout的Indicator协同滚动</h5><p>indicator的滚动由SlidingTabStrip来处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Set the indicator position, if enabled</span></div><div class="line"><span class="keyword">if</span> (updateIndicatorPosition) &#123;</div><div class="line">    mTabStrip.setIndicatorPositionFromTabPosition(position, positionOffset);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里的<code>position</code>是当前选中的位置。<code>positionOffset</code>是: <code>距当前Tab滑动的距离</code>／<code>从当前tab滑动到下一个tab的总距离</code> 这样一个范围在［0，1］间的小数。</p><p>SlidingTabStrip#setIndicatorPositionFromTabPosition(int, float)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIndicatorPositionFromTabPosition</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mIndicatorAnimator != <span class="keyword">null</span> &amp;&amp; mIndicatorAnimator.isRunning()) &#123;</div><div class="line">        mIndicatorAnimator.cancel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mSelectedPosition = position;</div><div class="line">    mSelectionOffset = positionOffset;</div><div class="line">    updateIndicatorPosition();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>SlidingTabStrip#updateIndicatorPosition()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateIndicatorPosition</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> View selectedTitle = getChildAt(mSelectedPosition);</div><div class="line">    <span class="keyword">int</span> left, right;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (selectedTitle != <span class="keyword">null</span> &amp;&amp; selectedTitle.getWidth() &gt; <span class="number">0</span>) &#123;</div><div class="line">        left = selectedTitle.getLeft();</div><div class="line">        right = selectedTitle.getRight();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mSelectionOffset &gt; <span class="number">0f</span> &amp;&amp; mSelectedPosition &lt; getChildCount() - <span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">// Draw the selection partway between the tabs</span></div><div class="line">            View nextTitle = getChildAt(mSelectedPosition + <span class="number">1</span>);</div><div class="line">            left = (<span class="keyword">int</span>) (mSelectionOffset * nextTitle.getLeft() +</div><div class="line">                    (<span class="number">1.0f</span> - mSelectionOffset) * left);</div><div class="line">            right = (<span class="keyword">int</span>) (mSelectionOffset * nextTitle.getRight() +</div><div class="line">                    (<span class="number">1.0f</span> - mSelectionOffset) * right);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        left = right = -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setIndicatorPosition(left, right);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过<code>getChildAt(mSelectedPosition)</code>, 获取到到<code>mSelectedPosition</code>处的TabView。若滑动的<code>mSelectionOffset&gt;0f</code>且当前选中的位置<code>mSelectedPosition</code>不是最后一个TabView. 获取到下一个TabView，并计算出indicator的left和right。</p><p>SlidingTabStrip＃setIndicatorPosition(int, int)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setIndicatorPosition</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (left != mIndicatorLeft || right != mIndicatorRight) &#123;</div><div class="line">        <span class="comment">// If the indicator's left/right has changed, invalidate</span></div><div class="line">        mIndicatorLeft = left;</div><div class="line">        mIndicatorRight = right;</div><div class="line">        ViewCompat.postInvalidateOnAnimation(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>非常简单的代码，在调用<code>ViewCompat.postInvalidateOnAnimation(this)</code>重绘View之前，去掉一些重复绘制的帧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.draw(canvas);</div><div class="line"></div><div class="line">    <span class="comment">// Thick colored underline below the current selection</span></div><div class="line">    <span class="keyword">if</span> (mIndicatorLeft &gt;= <span class="number">0</span> &amp;&amp; mIndicatorRight &gt; mIndicatorLeft) &#123;</div><div class="line">        canvas.drawRect(mIndicatorLeft, getHeight() - mSelectedIndicatorHeight,</div><div class="line">                mIndicatorRight, getHeight(), mSelectedIndicatorPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>绘制逻辑很简单。调用<code>canvas.drawRect(float left, float top, float right, float bottom, Paint paint)</code>来绘制indicator.这里：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">left = mIndicatorLeft;</div><div class="line">top = getHeight() - mSelectedIndicatorHeight;</div><div class="line">right = mIndicatorRight;</div><div class="line">bottom = getHeight();</div></pre></td></tr></table></figure></p><h5 id="3-2-3-2-TabLayout的TabView协同滚动"><a href="#3-2-3-2-TabLayout的TabView协同滚动" class="headerlink" title="3.2.3.2 TabLayout的TabView协同滚动"></a>3.2.3.2 TabLayout的TabView协同滚动</h5><p>我们回头来看 3.2.3中<code>setScrollPosition(...)</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setScrollPosition</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">boolean</span> updateSelectedText, <span class="keyword">boolean</span> updateIndicatorPosition)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> roundedPosition = Math.round(position + positionOffset);</div><div class="line">    <span class="keyword">if</span> (roundedPosition &lt; <span class="number">0</span> || roundedPosition &gt;= mTabStrip.getChildCount()) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Set the indicator position, if enabled</span></div><div class="line">    <span class="keyword">if</span> (updateIndicatorPosition) &#123;</div><div class="line">        mTabStrip.setIndicatorPositionFromTabPosition(position, positionOffset);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Now update the scroll position, canceling any running animation</span></div><div class="line">    <span class="keyword">if</span> (mScrollAnimator != <span class="keyword">null</span> &amp;&amp; mScrollAnimator.isRunning()) &#123;</div><div class="line">        mScrollAnimator.cancel();</div><div class="line">    &#125;</div><div class="line">    scrollTo(calculateScrollXForTab(position, positionOffset), <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Update the 'selected state' view as we scroll, if enabled</span></div><div class="line">    <span class="keyword">if</span> (updateSelectedText) &#123;</div><div class="line">        setSelectedTabView(roundedPosition);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在3.2.3.1中我们知道indicator的滚动是通过<code>mTabStrip.setIndicatorPositionFromTabPosition(position, positionOffset)</code>实现的。那TabView的滚动呢？我们知道<code>TabLayout</code>是继承<code>HorizonScrollView</code>天生就是一个可以横行滚动的<code>View</code>，所以，我们只需要调用<code>scrollTo(int x, int y)</code>方法就可以实现横向滚动。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrollTo(calculateScrollXForTab(position, positionOffset), <span class="number">0</span>);</div></pre></td></tr></table></figure></p><p>这里x方向的偏移量调用<code>calculateScrollXForTab(position, positionOffset)</code>实时计算得出，y方向的偏移量为0。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calculateScrollXForTab</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mMode == MODE_SCROLLABLE) &#123;</div><div class="line">        <span class="keyword">final</span> View selectedChild = mTabStrip.getChildAt(position);</div><div class="line">        <span class="keyword">final</span> View nextChild = position + <span class="number">1</span> &lt; mTabStrip.getChildCount()</div><div class="line">                ? mTabStrip.getChildAt(position + <span class="number">1</span>)</div><div class="line">                : <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> selectedWidth = selectedChild != <span class="keyword">null</span> ? selectedChild.getWidth() : <span class="number">0</span>;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> nextWidth = nextChild != <span class="keyword">null</span> ? nextChild.getWidth() : <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> selectedChild.getLeft()</div><div class="line">                + ((<span class="keyword">int</span>) ((selectedWidth + nextWidth) * positionOffset * <span class="number">0.5f</span>))</div><div class="line">                + (selectedChild.getWidth() / <span class="number">2</span>)</div><div class="line">                - (getWidth() / <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>至此，我们就明白了<code>TabLayout</code>是如何随<code>ViewPager</code>的滚动而滚动的。</p><h3 id="3-2-4-Tab选中状态"><a href="#3-2-4-Tab选中状态" class="headerlink" title="3.2.4 Tab选中状态"></a>3.2.4 Tab选中状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSelectedTabView</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> tabCount = mTabStrip.getChildCount();</div><div class="line">    <span class="keyword">if</span> (position &lt; tabCount &amp;&amp; !mTabStrip.getChildAt(position).isSelected()) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tabCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = mTabStrip.getChildAt(i);</div><div class="line">            child.setSelected(i == position);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用View的<code>setSelected(boolean)</code>方法。</p><h2 id="4-开源项目中的使用"><a href="#4-开源项目中的使用" class="headerlink" title="4. 开源项目中的使用"></a>4. 开源项目中的使用</h2><p>开源项目中使用TabLayout的例子特别多, 这里给出我写的一个项目：</p><ul><li><a href="https://github.com/Aspsine/SwipeToLoadLayout">SwipeToLoadLayout</a>的demo</li></ul><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SwipeRefreshLayout源码分析</title>
    <link href="https://github.com/itgoyo/2017/07/26/SwipeRefreshLayout%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/SwipeRefreshLayout源码分析.html</id>
    <published>2017-07-26T12:04:43.000Z</published>
    <updated>2017-11-23T13:15:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://developer.android.com/intl/zh-cn/reference/android/support/v4/widget/SwipeRefreshLayout.html" target="_blank" rel="external">官方文档</a></p><p><code>SwipeRefreshLayout</code> 是一个下拉刷新控件，几乎可以包裹一个任何可以滚动的内容（ListView GridView ScrollView RecyclerView），可以自动识别垂直滚动手势。使用起来非常方便。</p><p><img src="images/SwipeRefreshLayout1" alt=""> <img src="images/SwipeRefreshLayout2" alt=""></p><p> 1.将需要下拉刷新的空间包裹起来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.SwipeRefreshLayout</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/recyclerView"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></div></pre></td></tr></table></figure><p> 2.设置刷新动画的触发回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置下拉出现小圆圈是否是缩放出现，出现的位置，最大的下拉位置</span></div><div class="line">mySwipeRefreshLayout.setProgressViewOffset(<span class="keyword">true</span>, <span class="number">50</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line"><span class="comment">//设置下拉圆圈的大小，两个值 LARGE， DEFAULT</span></div><div class="line">mySwipeRefreshLayout.setSize(SwipeRefreshLayout.LARGE);</div><div class="line"></div><div class="line"><span class="comment">// 设置下拉圆圈上的颜色，蓝色、绿色、橙色、红色</span></div><div class="line">mySwipeRefreshLayout.setColorSchemeResources(</div><div class="line">    android.R.color.holo_blue_bright,</div><div class="line">    android.R.color.holo_green_light,</div><div class="line">    android.R.color.holo_orange_light,</div><div class="line">    android.R.color.holo_red_light);</div><div class="line"></div><div class="line"><span class="comment">// 通过 setEnabled(false) 禁用下拉刷新</span></div><div class="line">mySwipeRefreshLayout.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设定下拉圆圈的背景</span></div><div class="line">mSwipeLayout.setProgressBackgroundColor(R.color.red);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 设置手势下拉刷新的监听</span></div><div class="line"><span class="comment"> */</span></div><div class="line">mySwipeRefreshLayout.setOnRefreshListener(</div><div class="line">    <span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 刷新动画开始后回调到此方法</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure><p>通过 <code>setRefreshing(false)</code> 和 <code>setRefreshing(true)</code> 来手动调用刷新的动画。</p><blockquote><p><code>onRefresh</code> 的回调只有在手势下拉的情况下才会触发，通过 <code>setRefreshing</code> 只能调用刷新的动画是否显示。<br>SwipeRefreshLayout 也可放在 CoordinatorLayout 内共同处理滑动冲突，有兴趣可以尝试。</p></blockquote><h2 id="SwipeRefreshLayout-源码分析"><a href="#SwipeRefreshLayout-源码分析" class="headerlink" title="SwipeRefreshLayout 源码分析"></a>SwipeRefreshLayout 源码分析</h2><blockquote><p>本文基于 v4 版本 <code>23.2.0</code></p></blockquote><p>extends <code>ViewGroup</code> implements <code>NestedScrollingParent</code> <code>NestedScrollingChild</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java.lang.Object</div><div class="line">   ↳android.view.View</div><div class="line">    ↳android.view.ViewGroup</div><div class="line">     ↳android.support.v4.widget.SwipeRefreshLayout</div></pre></td></tr></table></figure></p><p>SwipeRefreshLayout 的分析分为两个部分：<strong>自定义 ViewGroup 的部分</strong>，<strong>处理和子视图的嵌套滚动部分</strong>。</p><h3 id="SwipeRefreshLayout-extends-ViewGroup"><a href="#SwipeRefreshLayout-extends-ViewGroup" class="headerlink" title="SwipeRefreshLayout extends ViewGroup"></a>SwipeRefreshLayout extends ViewGroup</h3><p>其实就是一个自定义的 ViewGroup ，结合我们自己平时自定义 ViewGroup 的步骤：</p><ol><li>初始化变量</li><li>onMeasure</li><li>onLayout</li><li>处理交互 （<code>dispatchTouchEvent</code> <code>onInterceptTouchEvent</code> <code>onTouchEvent</code>）</li></ol><p>接下来就按照上面的步骤进行分析。</p><h4 id="1-初始化变量"><a href="#1-初始化变量" class="headerlink" title="1.初始化变量"></a>1.初始化变量</h4><p><code>SwipeRefreshLayout</code> 内部有 2 个 View，一个<code>圆圈（mCircleView）</code>，一个内部可滚动的<code>View（mTarget）</code>。除了 View，还包含一个 <code>OnRefreshListener</code> 接口，当刷新动画被触发时回调。</p><p> <img src="https://dn-coding-net-production-pp.qbox.me/8e02212d-b364-4df8-bfaa-47f3084f89e7.png" alt="图片"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Constructor that is called when inflating SwipeRefreshLayout from XML.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> context</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> attrs</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SwipeRefreshLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs);</div><div class="line"></div><div class="line">    <span class="comment">// 系统默认的最小滚动距离</span></div><div class="line">    mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();</div><div class="line"></div><div class="line">    <span class="comment">// 系统默认的动画时长</span></div><div class="line">    mMediumAnimationDuration = getResources().getInteger(</div><div class="line">            android.R.integer.config_mediumAnimTime);</div><div class="line"></div><div class="line">    setWillNotDraw(<span class="keyword">false</span>);</div><div class="line">    mDecelerateInterpolator = <span class="keyword">new</span> DecelerateInterpolator(DECELERATE_INTERPOLATION_FACTOR);</div><div class="line"></div><div class="line">    <span class="comment">// 获取 xml 中定义的属性</span></div><div class="line">    <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(attrs, LAYOUT_ATTRS);</div><div class="line">    setEnabled(a.getBoolean(<span class="number">0</span>, <span class="keyword">true</span>));</div><div class="line">    a.recycle();</div><div class="line"></div><div class="line">    <span class="comment">// 刷新的圆圈的大小，单位转换成 sp</span></div><div class="line">    <span class="keyword">final</span> DisplayMetrics metrics = getResources().getDisplayMetrics();</div><div class="line">    mCircleWidth = (<span class="keyword">int</span>) (CIRCLE_DIAMETER * metrics.density);</div><div class="line">    mCircleHeight = (<span class="keyword">int</span>) (CIRCLE_DIAMETER * metrics.density);</div><div class="line"></div><div class="line">    <span class="comment">// 创建刷新动画的圆圈</span></div><div class="line">    createProgressView();</div><div class="line"></div><div class="line">    ViewCompat.setChildrenDrawingOrderEnabled(<span class="keyword">this</span>, <span class="keyword">true</span>);</div><div class="line">    <span class="comment">// the absolute offset has to take into account that the circle starts at an offset</span></div><div class="line">    mSpinnerFinalOffset = DEFAULT_CIRCLE_TARGET * metrics.density;</div><div class="line">    <span class="comment">// 刷新动画的临界距离值</span></div><div class="line">    mTotalDragDistance = mSpinnerFinalOffset;</div><div class="line"></div><div class="line">    <span class="comment">// 通过 NestedScrolling 机制来处理嵌套滚动</span></div><div class="line">    mNestedScrollingParentHelper = <span class="keyword">new</span> NestedScrollingParentHelper(<span class="keyword">this</span>);</div><div class="line">    mNestedScrollingChildHelper = <span class="keyword">new</span> NestedScrollingChildHelper(<span class="keyword">this</span>);</div><div class="line">    setNestedScrollingEnabled(<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>// 创建刷新动画的圆圈<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createProgressView</span><span class="params">()</span> </span>&#123;</div><div class="line">    mCircleView = <span class="keyword">new</span> CircleImageView(getContext(), CIRCLE_BG_LIGHT, CIRCLE_DIAMETER/<span class="number">2</span>);</div><div class="line">    mProgress = <span class="keyword">new</span> MaterialProgressDrawable(getContext(), <span class="keyword">this</span>);</div><div class="line">    mProgress.setBackgroundColor(CIRCLE_BG_LIGHT);</div><div class="line">    mCircleView.setImageDrawable(mProgress);</div><div class="line">    mCircleView.setVisibility(View.GONE);</div><div class="line">    addView(mCircleView);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>初始化的时候创建一个出来一个 View （下拉刷新的圆圈）。可以看出使用背景圆圈是 v4 包里提供的 <code>CircleImageView</code> 控件，中间的是 <code>MaterialProgressDrawable</code> 进度条。<br>另一个 View 是在 xml 中包含的可滚动视图。</p><h4 id="2-onMeasure"><a href="#2-onMeasure" class="headerlink" title="2.onMeasure"></a>2.onMeasure</h4><p>onMeasure 确定子视图的大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    <span class="keyword">if</span> (mTarget == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 确定内部要滚动的View，如 RecycleView</span></div><div class="line">        ensureTarget();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mTarget == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测量子 View （mTarget）</span></div><div class="line">    mTarget.measure(MeasureSpec.makeMeasureSpec(</div><div class="line">            getMeasuredWidth() - getPaddingLeft() - getPaddingRight(),</div><div class="line">            MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(</div><div class="line">            getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), MeasureSpec.EXACTLY));</div><div class="line"></div><div class="line">    <span class="comment">// 测量刷新的圆圈 mCircleView</span></div><div class="line">    mCircleView.measure(MeasureSpec.makeMeasureSpec(mCircleWidth, MeasureSpec.EXACTLY),</div><div class="line">            MeasureSpec.makeMeasureSpec(mCircleHeight, MeasureSpec.EXACTLY));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!mUsingCustomStart &amp;&amp; !mOriginalOffsetCalculated) &#123;</div><div class="line">        mOriginalOffsetCalculated = <span class="keyword">true</span>;</div><div class="line">        mCurrentTargetOffsetTop = mOriginalOffsetTop = -mCircleView.getMeasuredHeight();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 计算 mCircleView 在 ViewGroup 中的索引</span></div><div class="line">    mCircleViewIndex = -<span class="number">1</span>;</div><div class="line">    <span class="comment">// Get the index of the circleview.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; getChildCount(); index++) &#123;</div><div class="line">        <span class="keyword">if</span> (getChildAt(index) == mCircleView) &#123;</div><div class="line">            mCircleViewIndex = index;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个步骤确定了 mCircleView 和 SwipeRefreshLayout 的子视图的大小。</p><h4 id="3-onLayout"><a href="#3-onLayout" class="headerlink" title="3.onLayout"></a>3.onLayout</h4><p>onLayout 主要负责确定各个子视图的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">   <span class="comment">// 获取 SwipeRefreshLayout 的宽高</span></div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> width = getMeasuredWidth();</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> height = getMeasuredHeight();</div><div class="line">   <span class="keyword">if</span> (getChildCount() == <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (mTarget == <span class="keyword">null</span>) &#123;</div><div class="line">       ensureTarget();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (mTarget == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 考虑到给控件设置 padding，去除 padding 的距离</span></div><div class="line">   <span class="keyword">final</span> View child = mTarget;</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> childLeft = getPaddingLeft();</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> childTop = getPaddingTop();</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> childWidth = width - getPaddingLeft() - getPaddingRight();</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> childHeight = height - getPaddingTop() - getPaddingBottom();</div><div class="line">   <span class="comment">// 设置 mTarget 的位置</span></div><div class="line">   child.layout(childLeft, childTop, childLeft + childWidth, childTop + childHeight);</div><div class="line">   <span class="keyword">int</span> circleWidth = mCircleView.getMeasuredWidth();</div><div class="line">   <span class="keyword">int</span> circleHeight = mCircleView.getMeasuredHeight();</div><div class="line">   <span class="comment">// 根据 mCurrentTargetOffsetTop 变量的值来设置 mCircleView 的位置</span></div><div class="line">   mCircleView.layout((width / <span class="number">2</span> - circleWidth / <span class="number">2</span>), mCurrentTargetOffsetTop,</div><div class="line">           (width / <span class="number">2</span> + circleWidth / <span class="number">2</span>), mCurrentTargetOffsetTop + circleHeight);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> <img src="https://dn-coding-net-production-pp.qbox.me/8df6d458-700b-4ec5-b731-c6b8c34cdddc.png" alt="图片"></p><p>在 onLayout 中放置了 mCircleView 的位置，注意 顶部位置是 mCurrentTargetOffsetTop ，mCurrentTargetOffsetTop 初始距离是<code>-mCircleView.getMeasuredHeight()</code>，所以是在 SwipeRefreshLayout 外。</p><blockquote><p>经过以上几个步骤，SwipeRefreshLayout 创建了子视图，确定他们的大小、位置，现在所有视图可以显示在界面了。</p></blockquote><h3 id="处理与子视图的滚动交互"><a href="#处理与子视图的滚动交互" class="headerlink" title="处理与子视图的滚动交互"></a>处理与子视图的滚动交互</h3><p>下拉刷新控件的主要功能是当子视图下拉到最顶部时，继续下拉可以出现刷新动画。而子视图可以滚动时需要将所有滚动事件都交给子视图。借助 Android 提供的 NestedScrolling 机制，使得 SwipeRefreshLayout 很轻松的解决了与子视图的滚动冲突问题。<br>SwipeRefreshLayout 通过实现 <code>NestedScrollingParent</code> 和 <code>NestedScrollingChild</code> 接口来处理滚动冲突。SwipeRefreshLayout 作为 Parent 嵌套一个可以滚动的子视图，那么就需要了解一下 NestedScrollingParent 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 当你希望自己的自定义布局支持嵌套子视图并且处理滚动操作，就可以实现该接口。</span></div><div class="line"><span class="comment"> 实现这个接口后可以创建一个 NestedScrollingParentHelper 字段，使用它来帮助你处理大部分的方法。</span></div><div class="line"><span class="comment"> 处理嵌套的滚动时应该使用  `ViewCompat`，`ViewGroupCompat`或`ViewParentCompat` 中的方法来处理，这是一些兼容库，</span></div><div class="line"><span class="comment"> 他们保证 Android 5.0之前的兼容性垫片的静态方法，这样可以兼容 Android 5.0 之前的版本。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NestedScrollingParent</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当子视图调用 startNestedScroll(View, int) 后调用该方法。返回 true 表示响应子视图的滚动。</span></div><div class="line"><span class="comment">     * 实现这个方法来声明支持嵌套滚动，如果返回 true，那么这个视图将要配合子视图嵌套滚动。当嵌套滚动结束时会调用到 onStopNestedScroll(View)。</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> child 可滚动的子视图</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> target NestedScrollingParent 的直接可滚动的视图，一般情况就是 child</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> nestedScrollAxes 包含 ViewCompat#SCROLL_AXIS_HORIZONTAL, ViewCompat#SCROLL_AXIS_VERTICAL 或者两个值都有。</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 true 表示响应子视图的滚动。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(View child, View target, <span class="keyword">int</span> nestedScrollAxes)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 如果 onStartNestedScroll 返回 true ，然后走该方法，这个方法里可以做一些初始化。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScrollAccepted</span><span class="params">(View child, View target, <span class="keyword">int</span> nestedScrollAxes)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子视图开始滚动前会调用这个方法。这时候父布局（也就是当前的 NestedScrollingParent 的实现类）可以通过这个方法来配合子视图同时处理滚动事件。</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> target 滚动的子视图</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> dx 绝对值为手指在x方向滚动的距离，dx&lt;0 表示手指在屏幕向右滚动</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> dy 绝对值为手指在y方向滚动的距离，dy&lt;0 表示手指在屏幕向下滚动</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> consumed 一个数组，值用来表示父布局消耗了多少距离，未消耗前为[0,0], 如果父布局想处理滚动事件，就可以在这个方法的实现中为consumed[0]，consumed[1]赋值。</span></div><div class="line"><span class="comment">     *                 分别表示x和y方向消耗的距离。如父布局想在竖直方向（y）完全拦截子视图，那么让 consumed[1] = dy，就把手指产生的触摸事件给拦截了，子视图便响应不到触摸事件了 。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(View target, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">     * 这个方法表示子视图正在滚动，并且把滚动距离回调用到该方法，前提是 onStartNestedScroll 返回了 true。</span></div><div class="line"><span class="comment">     * &lt;p&gt;Both the consumed and unconsumed portions of the scroll distance are reported to the</span></div><div class="line"><span class="comment">     * ViewParent. An implementation may choose to use the consumed portion to match or chase scroll</span></div><div class="line"><span class="comment">     * position of multiple child elements, for example. The unconsumed portion may be used to</span></div><div class="line"><span class="comment">     * allow continuous dragging of multiple scrolling or draggable elements, such as scrolling</span></div><div class="line"><span class="comment">     * a list within a vertical drawer where the drawer begins dragging once the edge of inner</span></div><div class="line"><span class="comment">     * scrolling content is reached.&lt;/p&gt;</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> target 滚动的子视图</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> dxConsumed 手指产生的触摸距离中，子视图消耗的x方向的距离</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> dyConsumed 手指产生的触摸距离中，子视图消耗的y方向的距离 ，如果 onNestedPreScroll 中 dy = 20， consumed[0] = 8，那么 dy = 12</span></div><div class="line"><span class="comment">      * <span class="doctag">@param</span> dxUnconsumed 手指产生的触摸距离中，未被子视图消耗的x方向的距离</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> dyUnconsumed 手指产生的触摸距离中，未被子视图消耗的y方向的距离</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed,<span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 响应嵌套滚动结束</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * 当一个嵌套滚动结束后（如MotionEvent#ACTION_UP， MotionEvent#ACTION_CANCEL）会调用该方法，在这里可有做一些收尾工作，比如变量重置</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopNestedScroll</span><span class="params">(View target)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 手指在屏幕快速滑触发Fling前回调，如果前面 onNestedPreScroll 中父布局消耗了事件，那么这个也会被触发</span></div><div class="line"><span class="comment">     * 返回true表示父布局完全处理 fling 事件</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> target 滚动的子视图</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> velocityX x方向的速度（px/s）</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> velocityY y方向的速度</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> true if this parent consumed the fling ahead of the target view</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNestedPreFling</span><span class="params">(View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 子视图fling 时回调，父布局可以选择监听子视图的 fling。</span></div><div class="line"><span class="comment">     * true 表示父布局处理 fling，false表示父布局监听子视图的fling</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> target View that initiated the nested scroll</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> velocityX Horizontal velocity in pixels per second</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> velocityY Vertical velocity in pixels per second</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> consumed true 表示子视图处理了fling</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNestedFling</span><span class="params">(View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY, <span class="keyword">boolean</span> consumed)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 返回当前 NestedScrollingParent 的滚动方向，</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span> ViewCompat#SCROLL_AXIS_HORIZONTAL</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span> ViewCompat#SCROLL_AXIS_VERTICAL</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span> ViewCompat#SCROLL_AXIS_NONE</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNestedScrollAxes</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看一下 SwipeRefreshLayout 实现 NestedScrollingParent 的相关方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NestedScrollingParent</span></div><div class="line"></div><div class="line"><span class="comment">// 子 View （NestedScrollingChild）开始滚动前回调此方法,返回 true 表示接 Parent 收嵌套滚动，然后调用 onNestedScrollAccepted</span></div><div class="line"><span class="comment">// 具体可以看 NestedScrollingChildHelper 的源码</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(View child, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class="line">    <span class="comment">// 子 View 回调，判断是否开始嵌套滚动 ，</span></div><div class="line">    <span class="keyword">return</span> isEnabled() &amp;&amp; !mReturningToStart &amp;&amp; !mRefreshing</div><div class="line">            &amp;&amp; (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScrollAccepted</span><span class="params">(View child, View target, <span class="keyword">int</span> axes)</span> </span>&#123;</div><div class="line">     <span class="comment">// Reset the counter of how much leftover scroll needs to be consumed.</span></div><div class="line">     mNestedScrollingParentHelper.onNestedScrollAccepted(child, target, axes);</div><div class="line"></div><div class="line">     <span class="comment">// ...省略代码</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><p>SwipeRefreshLayout 只接受竖直方向（Y轴）的滚动，并且在刷新动画进行中不接受滚动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NestedScrollingChild 在滚动的时候会触发， 看父类消耗了多少距离</span></div><div class="line"><span class="comment">//   * @param dx x 轴滚动的距离</span></div><div class="line"><span class="comment">//   * @param dy y 轴滚动的距离</span></div><div class="line"><span class="comment">//   * @param consumed 代表 父 View 消费的滚动距离</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(View target, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// dy &gt; 0 表示手指在屏幕向上移动</span></div><div class="line">    <span class="comment">//  mTotalUnconsumed 表示子视图Y轴未消费的距离</span></div><div class="line">    <span class="comment">// 现在表示</span></div><div class="line">    <span class="keyword">if</span> (dy &gt; <span class="number">0</span> &amp;&amp; mTotalUnconsumed &gt; <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dy &gt; mTotalUnconsumed) &#123;</div><div class="line">            consumed[<span class="number">1</span>] = dy - (<span class="keyword">int</span>) mTotalUnconsumed; <span class="comment">// SwipeRefreshLayout 就吧子视图位消费的距离全部消费了。</span></div><div class="line">            mTotalUnconsumed = <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mTotalUnconsumed -= dy; <span class="comment">// 消费的 y 轴的距离</span></div><div class="line">            consumed[<span class="number">1</span>] = dy;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 出现动画圆圈，并向上移动</span></div><div class="line">        moveSpinner(mTotalUnconsumed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... 省略代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// onStartNestedScroll 返回 true 才会调用此方法。此方法表示子View将滚动事件分发到父 View（SwipeRefreshLayout）</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(<span class="keyword">final</span> View target, <span class="keyword">final</span> <span class="keyword">int</span> dxConsumed, <span class="keyword">final</span> <span class="keyword">int</span> dyConsumed,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">final</span> <span class="keyword">int</span> dxUnconsumed, <span class="keyword">final</span> <span class="keyword">int</span> dyUnconsumed)</span> </span>&#123;</div><div class="line">    <span class="comment">// ... 省略代码</span></div><div class="line"></div><div class="line">    <span class="comment">// This is a bit of a hack. Nested scrolling works from the bottom up, and as we are</span></div><div class="line">    <span class="comment">// sometimes between two nested scrolling views, we need a way to be able to know when any</span></div><div class="line">    <span class="comment">// nested scrolling parent has stopped handling events. We do that by using the</span></div><div class="line">    <span class="comment">// 'offset in window 'functionality to see if we have been moved from the event.</span></div><div class="line">    <span class="comment">// This is a decent indication of whether we should take over the event stream or not.</span></div><div class="line">    <span class="comment">// 手指在屏幕上向下滚动，并且子视图不可以滚动</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> dy = dyUnconsumed + mParentOffsetInWindow[<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (dy &lt; <span class="number">0</span> &amp;&amp; !canChildScrollUp()) &#123;</div><div class="line">        mTotalUnconsumed += Math.abs(dy);</div><div class="line">        moveSpinner(mTotalUnconsumed);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>SwipeRefreshLayout 通过 NestedScrollingParent 接口完成了处理子视图的滚动的冲突，中间省略了一些 SwipeRefreshLayout作为 child 的相关代码，这种情况是为了兼容将 SwipeRefreshLayout 作为子视图放在知识嵌套滚动的父布局的情况，这里不做深入讨论。但是下拉刷新需要判断手指在屏幕的状态来进行一个刷新的动画，所以我们还需要处理触摸事件，判断手指在屏幕中的状态。</p><p>首先是 onInterceptTouchEvent，返回 true 表示拦截触摸事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    ensureTarget();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(ev);</div><div class="line"></div><div class="line">    <span class="comment">// 手指按下时恢复状态</span></div><div class="line">    <span class="keyword">if</span> (mReturningToStart &amp;&amp; action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">        mReturningToStart = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 控件可用 || 刷新事件刚结束正在恢复初始状态时 || 子 View 可滚动 || 正在刷新 || 父 View 正在滚动</span></div><div class="line">    <span class="keyword">if</span> (!isEnabled() || mReturningToStart || canChildScrollUp()</div><div class="line">            || mRefreshing || mNestedScrollInProgress) &#123;</div><div class="line">        <span class="comment">// Fail fast if we're not in a state where a swipe is possible</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (action) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            setTargetOffsetTopAndBottom(mOriginalOffsetTop - mCircleView.getTop(), <span class="keyword">true</span>);</div><div class="line">            mActivePointerId = MotionEventCompat.getPointerId(ev, <span class="number">0</span>);</div><div class="line">            mIsBeingDragged = <span class="keyword">false</span>;</div><div class="line">            <span class="comment">// 记录手指按下的位置，为了判断是否开始滚动</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> initialDownY = getMotionEventY(ev, mActivePointerId);</div><div class="line">            <span class="keyword">if</span> (initialDownY == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            mInitialDownY = initialDownY;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">            <span class="keyword">if</span> (mActivePointerId == INVALID_POINTER) &#123;</div><div class="line">                Log.e(LOG_TAG, <span class="string">"Got ACTION_MOVE event but don't have an active pointer id."</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> y = getMotionEventY(ev, mActivePointerId);</div><div class="line">            <span class="keyword">if</span> (y == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 判断当拖动距离大于最小距离时设置 mIsBeingDragged = true;</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> yDiff = y - mInitialDownY;</div><div class="line">            <span class="keyword">if</span> (yDiff &gt; mTouchSlop &amp;&amp; !mIsBeingDragged) &#123;</div><div class="line">                mInitialMotionY = mInitialDownY + mTouchSlop;</div><div class="line">                mIsBeingDragged = <span class="keyword">true</span>;</div><div class="line">                <span class="comment">// 正在拖动状态，更新圆圈的 progressbar 的 alpha 值</span></div><div class="line">                mProgress.setAlpha(STARTING_PROGRESS_ALPHA);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_UP:</div><div class="line">            onSecondaryPointerUp(ev);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">            mIsBeingDragged = <span class="keyword">false</span>;</div><div class="line">            mActivePointerId = INVALID_POINTER;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> mIsBeingDragged;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到源码也就是进行简单处理，DOWN 的时候记录一下位置，MOVE 时判断移动的距离，返回值 mIsBeingDragged 为 true 时， 即 onInterceptTouchEvent 返回true，SwipeRefreshLayout 拦截触摸事件，不分发给 mTarget，然后把 MotionEvent 传给 onTouchEvent 方法。其中有一个判断子View的是否还可以滚动的方法 <code>canChildScrollUp</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> Whether it is possible for the child view of this layout to</span></div><div class="line"><span class="comment"> *         scroll up. Override this if the child view is a custom view.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canChildScrollUp</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &lt; <span class="number">14</span>) &#123;</div><div class="line">        <span class="comment">// 判断 AbsListView 的子类 ListView 或者 GridView 等</span></div><div class="line">        <span class="keyword">if</span> (mTarget <span class="keyword">instanceof</span> AbsListView) &#123;</div><div class="line">            <span class="keyword">final</span> AbsListView absListView = (AbsListView) mTarget;</div><div class="line">            <span class="keyword">return</span> absListView.getChildCount() &gt; <span class="number">0</span></div><div class="line">                    &amp;&amp; (absListView.getFirstVisiblePosition() &gt; <span class="number">0</span> || absListView.getChildAt(<span class="number">0</span>)</div><div class="line">                            .getTop() &lt; absListView.getPaddingTop());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> ViewCompat.canScrollVertically(mTarget, -<span class="number">1</span>) || mTarget.getScrollY() &gt; <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> ViewCompat.canScrollVertically(mTarget, -<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当SwipeRefreshLayout 拦截了触摸事件之后（ mIsBeingDragged 为 true ），将 MotionEvent 交给 onTouchEvent 处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// ... 省略代码</span></div><div class="line">    <span class="keyword">switch</span> (action) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            <span class="comment">// 获取第一个按下的手指</span></div><div class="line">            mActivePointerId = MotionEventCompat.getPointerId(ev, <span class="number">0</span>);</div><div class="line">            mIsBeingDragged = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">            <span class="comment">// 处理多指触控</span></div><div class="line">            pointerIndex = MotionEventCompat.findPointerIndex(ev, mActivePointerId);</div><div class="line"></div><div class="line">            <span class="comment">// ... 省略代码</span></div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, pointerIndex);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> overscrollTop = (y - mInitialMotionY) * DRAG_RATE;</div><div class="line">            <span class="keyword">if</span> (mIsBeingDragged) &#123;</div><div class="line">                <span class="keyword">if</span> (overscrollTop &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// 正在拖动状态，更新圆圈的位置</span></div><div class="line">                    moveSpinner(overscrollTop);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// ... 省略代码</span></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</div><div class="line">            pointerIndex = MotionEventCompat.findPointerIndex(ev, mActivePointerId);</div><div class="line">            <span class="keyword">if</span> (pointerIndex &lt; <span class="number">0</span>) &#123;</div><div class="line">                Log.e(LOG_TAG, <span class="string">"Got ACTION_UP event but don't have an active pointer id."</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, pointerIndex);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> overscrollTop = (y - mInitialMotionY) * DRAG_RATE;</div><div class="line">            mIsBeingDragged = <span class="keyword">false</span>;</div><div class="line">            <span class="comment">// 手指松开，将圆圈移动到正确的位置</span></div><div class="line">            finishSpinner(overscrollTop);</div><div class="line">            mActivePointerId = INVALID_POINTER;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// ... 省略代码</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在手指滚动过程中通过判断 mIsBeingDragged 来移动刷新的圆圈（对应的是 moveSpinner ），手指松开将圆圈移动到正确位置（初始位置或者刷新动画的位置，对应的是 finishSpinner 方法）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 手指下拉过程中触发的圆圈的变化过程，透明度变化，渐渐出现箭头，大小的变化</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveSpinner</span><span class="params">(<span class="keyword">float</span> overscrollTop)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 设置为有箭头的 progress</span></div><div class="line">    mProgress.showArrow(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 进度转化成百分比</span></div><div class="line">    <span class="keyword">float</span> originalDragPercent = overscrollTop / mTotalDragDistance;</div><div class="line"></div><div class="line">    <span class="comment">// 避免百分比超过 100%</span></div><div class="line">    <span class="keyword">float</span> dragPercent = Math.min(<span class="number">1f</span>, Math.abs(originalDragPercent));</div><div class="line">    <span class="comment">// 调整拖动百分比，造成视差效果</span></div><div class="line">    <span class="keyword">float</span> adjustedPercent = (<span class="keyword">float</span>) Math.max(dragPercent - .<span class="number">4</span>, <span class="number">0</span>) * <span class="number">5</span> / <span class="number">3</span>;</div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">float</span> extraOS = Math.abs(overscrollTop) - mTotalDragDistance;</div><div class="line"></div><div class="line">    <span class="comment">// 这里mUsingCustomStart 为 true 代表用户自定义了起始出现的坐标</span></div><div class="line">    <span class="keyword">float</span> slingshotDist = mUsingCustomStart ? mSpinnerFinalOffset - mOriginalOffsetTop</div><div class="line">            : mSpinnerFinalOffset;</div><div class="line"></div><div class="line">    <span class="comment">// 弹性系数</span></div><div class="line">    <span class="keyword">float</span> tensionSlingshotPercent = Math.max(<span class="number">0</span>, Math.min(extraOS, slingshotDist * <span class="number">2</span>)</div><div class="line">            / slingshotDist);</div><div class="line">    <span class="keyword">float</span> tensionPercent = (<span class="keyword">float</span>) ((tensionSlingshotPercent / <span class="number">4</span>) - Math.pow(</div><div class="line">            (tensionSlingshotPercent / <span class="number">4</span>), <span class="number">2</span>)) * <span class="number">2f</span>;</div><div class="line">    <span class="keyword">float</span> extraMove = (slingshotDist) * tensionPercent * <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 因为有弹性系数，不同的手指滚动距离不同于view的移动距离</span></div><div class="line">    <span class="keyword">int</span> targetY = mOriginalOffsetTop + (<span class="keyword">int</span>) ((slingshotDist * dragPercent) + extraMove);</div><div class="line"></div><div class="line">    <span class="comment">// where 1.0f is a full circle</span></div><div class="line">    <span class="keyword">if</span> (mCircleView.getVisibility() != View.VISIBLE) &#123;</div><div class="line">        mCircleView.setVisibility(View.VISIBLE);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置的是否有缩放</span></div><div class="line">    <span class="keyword">if</span> (!mScale) &#123;</div><div class="line">        ViewCompat.setScaleX(mCircleView, <span class="number">1f</span>);</div><div class="line">        ViewCompat.setScaleY(mCircleView, <span class="number">1f</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置缩放进度</span></div><div class="line">    <span class="keyword">if</span> (mScale) &#123;</div><div class="line">        setAnimationProgress(Math.min(<span class="number">1f</span>, overscrollTop / mTotalDragDistance));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 移动距离未达到最大距离</span></div><div class="line">    <span class="keyword">if</span> (overscrollTop &lt; mTotalDragDistance) &#123;</div><div class="line">        <span class="keyword">if</span> (mProgress.getAlpha() &gt; STARTING_PROGRESS_ALPHA</div><div class="line">                &amp;&amp; !isAnimationRunning(mAlphaStartAnimation)) &#123;</div><div class="line">            <span class="comment">// Animate the alpha</span></div><div class="line">            startProgressAlphaStartAnimation();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mProgress.getAlpha() &lt; MAX_ALPHA &amp;&amp; !isAnimationRunning(mAlphaMaxAnimation)) &#123;</div><div class="line">            <span class="comment">// Animate the alpha</span></div><div class="line">            startProgressAlphaMaxAnimation();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 出现的进度，裁剪 mProgress</span></div><div class="line">    <span class="keyword">float</span> strokeStart = adjustedPercent * .<span class="number">8f</span>;</div><div class="line">    mProgress.setStartEndTrim(<span class="number">0f</span>, Math.min(MAX_PROGRESS_ANGLE, strokeStart));</div><div class="line">    mProgress.setArrowScale(Math.min(<span class="number">1f</span>, adjustedPercent));</div><div class="line"></div><div class="line">    <span class="comment">// 旋转</span></div><div class="line">    <span class="keyword">float</span> rotation = (-<span class="number">0.25f</span> + .<span class="number">4f</span> * adjustedPercent + tensionPercent * <span class="number">2</span>) * .<span class="number">5f</span>;</div><div class="line">    mProgress.setProgressRotation(rotation);</div><div class="line">    setTargetOffsetTopAndBottom(targetY - mCurrentTargetOffsetTop, <span class="keyword">true</span> <span class="comment">/* requires update */</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>刷新圆圈的移动过程也是有好几种状态，看上面的注释基本上就比较清楚了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishSpinner</span><span class="params">(<span class="keyword">float</span> overscrollTop)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (overscrollTop &gt; mTotalDragDistance) &#123;</div><div class="line">        <span class="comment">//移动距离超过了刷新的临界值，触发刷新动画</span></div><div class="line">        setRefreshing(<span class="keyword">true</span>, <span class="keyword">true</span> <span class="comment">/* notify */</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 取消刷新的圆圈，将圆圈移动到初始位置</span></div><div class="line">        mRefreshing = <span class="keyword">false</span>;</div><div class="line">        mProgress.setStartEndTrim(<span class="number">0f</span>, <span class="number">0f</span>);</div><div class="line">        <span class="comment">// ...省略代码</span></div><div class="line"></div><div class="line">        <span class="comment">// 移动到初始位置</span></div><div class="line">        animateOffsetToStartPosition(mCurrentTargetOffsetTop, listener);</div><div class="line">        <span class="comment">// 设置没有箭头</span></div><div class="line">        mProgress.showArrow(<span class="keyword">false</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到调用 setRefresh(true,true) 方法触发刷新动画并进行回调，但是这个方法是 private 的。前面提到我们自己调用 setRefresh(true) 只能产生动画，而不能回调刷新函数，那么我们就可以用反射调用 2 个参数的 setRefresh 函数。 或者手动调 setRefreshing(true)+ OnRefreshListener.onRefresh 方法。</p><h3 id="setRefresh"><a href="#setRefresh" class="headerlink" title="setRefresh"></a>setRefresh</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * 改变刷新动画的的圆圈刷新状态。Notify the widget that refresh state has changed. Do not call this when</span></div><div class="line"><span class="comment">  * refresh is triggered by a swipe gesture.</span></div><div class="line"><span class="comment">  *</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> refreshing 是否显示刷新的圆圈</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRefreshing</span><span class="params">(<span class="keyword">boolean</span> refreshing)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (refreshing &amp;&amp; mRefreshing != refreshing) &#123;</div><div class="line">         <span class="comment">// scale and show</span></div><div class="line">         mRefreshing = refreshing;</div><div class="line">         <span class="keyword">int</span> endTarget = <span class="number">0</span>;</div><div class="line">         <span class="keyword">if</span> (!mUsingCustomStart) &#123;</div><div class="line">             endTarget = (<span class="keyword">int</span>) (mSpinnerFinalOffset + mOriginalOffsetTop);</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             endTarget = (<span class="keyword">int</span>) mSpinnerFinalOffset;</div><div class="line">         &#125;</div><div class="line">         setTargetOffsetTopAndBottom(endTarget - mCurrentTargetOffsetTop,</div><div class="line">                 <span class="keyword">true</span> <span class="comment">/* requires update */</span>);</div><div class="line">         mNotify = <span class="keyword">false</span>;</div><div class="line">         startScaleUpAnimation(mRefreshListener);</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         setRefreshing(refreshing, <span class="keyword">false</span> <span class="comment">/* notify */</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>startScaleUpAnimation 开启一个动画，然后在动画结束后回调 onRefresh 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Animation.AnimationListener mRefreshListener = <span class="keyword">new</span> Animation.AnimationListener() &#123;</div><div class="line">   <span class="comment">// .. 省略代码</span></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mRefreshing) &#123;</div><div class="line">           mProgress.setAlpha(MAX_ALPHA); <span class="comment">//确保刷新圆圈中间的进度条是完全不透明了</span></div><div class="line">           mProgress.start();</div><div class="line">           <span class="keyword">if</span> (mNotify) &#123; <span class="comment">// 当 mNotify 为 true 时才会回调 onRefresh</span></div><div class="line">               <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="comment">// 回调 listener 的 onRefresh 方法</span></div><div class="line">                   mListener.onRefresh();</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           mCurrentTargetOffsetTop = mCircleView.getTop();</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           reset();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分析 SwipeRefreshLayout 的流程就是按照平时我们自定义 <code>ViewGroup</code> 的流程，但是其中也有好多需要我们借鉴的地方，如何使用 NestedScrolling相关机制 ，多点触控的处理，onMeasure 中减去了 padding，如何判断子 View 是否可滚动，如何确定 ViewGroup 中某一个 View 的索引等。<br>此外，一个好的下拉刷新框架不仅仅要兼容各种滚动的子控件，还要考虑自己要兼容 NestedScrollingChild 的情况，比如放到 CooCoordinatorLayout 的情况，目前大多数开源的下拉刷新好像都没有达到这个要求，一般都是只考虑了内部嵌套滚动子视图的情况，没有考虑自己作为滚动子视图的情况。</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SearchView源码解析</title>
    <link href="https://github.com/itgoyo/2017/07/26/SearchView%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/SearchView源码解析.html</id>
    <published>2017-07-26T11:59:27.000Z</published>
    <updated>2017-11-23T13:15:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><h1 id="SearchView源码解析"><a href="#SearchView源码解析" class="headerlink" title="SearchView源码解析"></a>SearchView源码解析</h1><p>SearchView是一个搜索框控件，样式也挺好看的。这次解析主要围绕<code>android.support.v7.widget</code>包下的SearchView（API &gt;= 7）,<code>android.widget.SearchView</code>支持API &gt;= 11，<br>另外有个<code>android.support.v4.widget.SearchViewCompat</code></p><p><img src="https://raw.githubusercontent.com/nukc/SearchViewAnalysis/master/art/searchview.mov.gif"></p><h2 id="1-源码解析"><a href="#1-源码解析" class="headerlink" title="1. 源码解析"></a>1. 源码解析</h2><p>v7版本：23.2.1</p><h3 id="1-1-继承关系"><a href="#1-1-继承关系" class="headerlink" title="1.1 继承关系"></a>1.1 继承关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">java.lang.Object</div><div class="line">↳ android.view.View</div><div class="line">↳ android.view.ViewGroup</div><div class="line">↳ android.support.v7.widget.LinearLayoutCompat</div><div class="line">↳ android.support.v7.widget.SearchView</div></pre></td></tr></table></figure><h3 id="1-2-主要组件"><a href="#1-2-主要组件" class="headerlink" title="1.2 主要组件"></a>1.2 主要组件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> SearchAutoComplete mSearchSrcTextView;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> View mSearchEditFrame;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> View mSearchPlate;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> View mSubmitArea;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ImageView mSearchButton;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ImageView mGoButton;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ImageView mCloseButton;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ImageView mVoiceButton;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> View mDropDownAnchor;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ImageView mCollapsedIcon;</div></pre></td></tr></table></figure><p>看命名也能大概知道控件各自充当了什么角色了。</p><h3 id="1-3-构造方法和自定义"><a href="#1-3-构造方法和自定义" class="headerlink" title="1.3 构造方法和自定义"></a>1.3 构造方法和自定义</h3><p>接下来看构造方法<code>public SearchView(Context context, AttributeSet attrs, int defStyleAttr)</code>,<code>v7</code>的<code>SearchView</code>并不是用<code>TypedArray</code>而是使用<code>TintTypedArray</code>，看了源码发现<code>TintTypedArray</code>里有个：<figure class="highlight plain"><figcaption><span>final TypedArray mWrapped; ```所以主要还是`TypedArray`，不同点是`getDrawable(int index)`和新加的`getDrawableIfKnown(int index)`方法，</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">并在满足条件下会调用`AppCompatDrawableManager.get().getDrawable(mContext, resourceId)`。</div><div class="line"></div><div class="line">为了能更好的自定义，`SearchView`的layout也是可以指定的，不过自定义的layout必须包括上面那些控件，同时id也是指定的，</div><div class="line">不然后面会报错，因为`findViewById(id)`无法找到各自控件，然后调用控件方法的时候就。。。</div><div class="line"></div><div class="line">构造方法最后是更新控件状态，`mIconifiedByDefault`默认是`true`的，`setIconifiedByDefault(boolean iconified)`改变值后也会执行如下方法：</div><div class="line"></div><div class="line">```java</div><div class="line">    public void setIconifiedByDefault(boolean iconified) &#123;</div><div class="line">        if (mIconifiedByDefault == iconified) return;</div><div class="line">        mIconifiedByDefault = iconified;</div><div class="line">        //更新组件</div><div class="line">        updateViewsVisibility(iconified);</div><div class="line">        updateQueryHint();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>所以<code>setIconifiedByDefault(false)</code>会让SearchView一直呈现展开状态，并且输入框内icon也会不显示。具体方法如下，该方法在<code>updateQueryHint()</code>中被调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> CharSequence <span class="title">getDecoratedHint</span><span class="params">(CharSequence hintText)</span> </span>&#123;</div><div class="line">    <span class="comment">//如果mIconifiedByDefault为false或者mSearchHintIcon为null</span></div><div class="line">    <span class="comment">//将不会添加搜索icon到提示hint中</span></div><div class="line">    <span class="keyword">if</span> (!mIconifiedByDefault || mSearchHintIcon == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> hintText;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> textSize = (<span class="keyword">int</span>) (mSearchSrcTextView.getTextSize() * <span class="number">1.25</span>);</div><div class="line">    mSearchHintIcon.setBounds(<span class="number">0</span>, <span class="number">0</span>, textSize, textSize);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> SpannableStringBuilder ssb = <span class="keyword">new</span> SpannableStringBuilder(<span class="string">"   "</span>);</div><div class="line">    ssb.setSpan(<span class="keyword">new</span> ImageSpan(mSearchHintIcon), <span class="number">1</span>, <span class="number">2</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">    ssb.append(hintText);</div><div class="line">    <span class="keyword">return</span> ssb;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="1-4-Listener"><a href="#1-4-Listener" class="headerlink" title="1.4 Listener"></a>1.4 Listener</h3><p>然后，我们来看看<code>SearchView</code>里面有哪些Listener：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//里面有2个方法：</span></div><div class="line">    <span class="comment">//onQueryTextSubmit(String query)：当用户提交查询的时候会调用</span></div><div class="line">    <span class="comment">//onQueryTextChange(String newText)：当查询文字改变的时候会调用</span></div><div class="line"><span class="keyword">private</span> OnQueryTextListener mOnQueryChangeListener;</div><div class="line"></div><div class="line"><span class="comment">//里面有1个方法：boolean onClose();</span></div><div class="line">    <span class="comment">//onClose()：当mCloseButton被点击和setIconified(true)会判断是否调用</span></div><div class="line">    <span class="comment">//是否调用是在onCloseClicked()里判断，后面会进行分析</span></div><div class="line"><span class="keyword">private</span> OnCloseListener mOnCloseListener;</div><div class="line"></div><div class="line"><span class="comment">//View类里定义的接口</span></div><div class="line"><span class="keyword">private</span> OnFocusChangeListener mOnQueryTextFocusChangeListener;</div><div class="line"></div><div class="line"><span class="comment">//里面有2个方法：</span></div><div class="line">    <span class="comment">//onSuggestionSelect(int position)：选择建议可选项（搜索框下方出现的）后触发</span></div><div class="line">    <span class="comment">//onSuggestionClick(int position)：点击建议可选项后触发</span></div><div class="line"><span class="keyword">private</span> OnSuggestionListener mOnSuggestionListener;</div><div class="line"></div><div class="line"><span class="comment">//View类里定义的接口</span></div><div class="line"><span class="keyword">private</span> OnClickListener mOnSearchClickListener;</div><div class="line"></div><div class="line"><span class="comment">//还有其他mOnClickListener，mTextKeyListener等</span></div></pre></td></tr></table></figure><p>我们看看OnQueryTextListener是怎样进行监听的：</p><ul><li>onQueryTextChange(String newText)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在构造方法里添加了监听</span></div><div class="line">mSearchSrcTextView.addTextChangedListener(mTextWatcher);</div></pre></td></tr></table></figure><p>然后在<code>mTextWatcher</code>的<code>onTextChanged()</code>方法里调用了SearchView的<code>onTextChanged(CharSequence newText)</code>方法，<br>也就是在这里进行了判断触发:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence newText)</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 省略代码,主要是更新组件</span></div><div class="line"><span class="comment">     */</span></div><div class="line"></div><div class="line">    <span class="comment">//当listener!=null和当文本不一样的时候会触发。</span></div><div class="line">    <span class="keyword">if</span> (mOnQueryChangeListener != <span class="keyword">null</span> &amp;&amp; !TextUtils.equals(newText, mOldQueryText)) &#123;</div><div class="line">        mOnQueryChangeListener.onQueryTextChange(newText.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//省略代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>onQueryTextSubmit(String query)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//同在构造方法里添加了监听</span></div><div class="line">mSearchSrcTextView.setOnEditorActionListener(mOnEditorActionListener);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OnEditorActionListener mOnEditorActionListener = <span class="keyword">new</span> OnEditorActionListener() &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Called when the input method default action key is pressed.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onEditorAction</span><span class="params">(TextView v, <span class="keyword">int</span> actionId, KeyEvent event)</span> </span>&#123;</div><div class="line">        onSubmitQuery();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onSubmitQuery</span><span class="params">()</span> </span>&#123;</div><div class="line">    CharSequence query = mSearchSrcTextView.getText();</div><div class="line">    <span class="keyword">if</span> (query != <span class="keyword">null</span> &amp;&amp; TextUtils.getTrimmedLength(query) &gt; <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//当监听OnQueryChangeListener了之后，</span></div><div class="line">        <span class="comment">//当onQueryTextSubmit() return true的话，是不会执行下面操作的</span></div><div class="line">        <span class="keyword">if</span> (mOnQueryChangeListener == <span class="keyword">null</span></div><div class="line">                || !mOnQueryChangeListener.onQueryTextSubmit(query.toString())) &#123;</div><div class="line"></div><div class="line">            <span class="comment">//设置了Searchable后，会startActivity到配置指定的Activity    </span></div><div class="line">            <span class="keyword">if</span> (mSearchable != <span class="keyword">null</span>) &#123;</div><div class="line">                launchQuerySearch(KeyEvent.KEYCODE_UNKNOWN, <span class="keyword">null</span>, query.toString());</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//设置键盘是否显示</span></div><div class="line">            setImeVisibility(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">            <span class="comment">//下拉可选项是用ListPopupWindow显示的，具体可看 AutoCompleteTextView 源码</span></div><div class="line">            <span class="comment">//搜索提交后，dismiss后就不会继续显示而挡住内容什么的</span></div><div class="line">            dismissSuggestions();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在if里加入<code>!mOnQueryChangeListener.onQueryTextSubmit(query.toString())</code>，这样做就可以让使用者自己决定是否完全自己处理，灵活性也更高。</p><p>其他Listener差不多也是这样，那接下来看看其他的。</p><h3 id="1-5-CollapsibleActionView接口"><a href="#1-5-CollapsibleActionView接口" class="headerlink" title="1.5 CollapsibleActionView接口"></a>1.5 CollapsibleActionView接口</h3><p>SearchView实现了CollapsibleActionView接口：onActionViewExpanded()和onActionViewCollapsed(),具体操作就是<br>设置键盘及控件，并使用全局变量<code>mExpandedInActionView</code>记录ActionView是否伸展。只有当SearchView作为MenuItem的时候才会触发，如果是使用v7包的话，想要通过menu获取SearchView就需要使用MenuItemCompat类，具体可以看demo。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MenuItemCompat.getActionView(android.view.MenuItem item);</div></pre></td></tr></table></figure></p><h3 id="1-6-状态的保存和恢复"><a href="#1-6-状态的保存和恢复" class="headerlink" title="1.6 状态的保存和恢复"></a>1.6 状态的保存和恢复</h3><p>SearchView覆写了onSaveInstanceState()和onRestoreInstanceState(Parcelable state)用来保存和恢复状态，为什么要覆写呢？<br>因为需要额外保存<code>boolean mIconified</code>，为此还建了个内部静态类SavedState用来保存mIconified。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//实现了Parcelable序列化</span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SavedState</span> <span class="keyword">extends</span> <span class="title">BaseSavedState</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> isIconified;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 省略其他代码</span></div><div class="line"><span class="comment">     */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-7-关于Suggestions和Searchable"><a href="#1-7-关于Suggestions和Searchable" class="headerlink" title="1.7 关于Suggestions和Searchable"></a>1.7 关于Suggestions和Searchable</h3><p>如果你使用了Suggestions，而且没有setSearchableInfo，那么当你点击建议可选项的时候会log：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">W/SearchView: Search suggestions cursor at row <span class="number">0</span> returned exception.</div><div class="line">              java.lang.NullPointerException</div><div class="line">                  at android.support.v7.widget.SearchView.createIntentFromSuggestion(SearchView.java:<span class="number">1620</span>)</div><div class="line">                  at android.support.v7.widget.SearchView.launchSuggestion(SearchView.java:<span class="number">1436</span>)</div><div class="line">                  at android.support.v7.widget.SearchView.onItemClicked(SearchView.java:<span class="number">1349</span>)</div><div class="line">                  at android.support.v7.widget.SearchView.access$<span class="number">1800</span>(SearchView.java:<span class="number">103</span>)</div><div class="line">                  at android.support.v7.widget.SearchView$<span class="number">10</span>.onItemClick(SearchView.java:<span class="number">1373</span>)</div><div class="line">                  ......</div></pre></td></tr></table></figure><p>定位到第1620行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Intent <span class="title">createIntentFromSuggestion</span><span class="params">(Cursor c, <span class="keyword">int</span> actionKey, String actionMsg)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">        <span class="comment">// use specific action if supplied, or default action if supplied, or fixed default</span></div><div class="line">        String action = getColumnString(c, SearchManager.SUGGEST_COLUMN_INTENT_ACTION);</div><div class="line"></div><div class="line">        <span class="comment">//在这里并没有检查mSearchable是否为null</span></div><div class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span> &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="number">8</span>) &#123;</div><div class="line">            action = mSearchable.getSuggestIntentAction();  <span class="comment">//第1620行</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         *省略部分代码</span></div><div class="line"><span class="comment">         */</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> createIntent(action, dataUri, extraData, query, actionKey, actionMsg);</div><div class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e ) &#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         *省略部分代码</span></div><div class="line"><span class="comment">         */</span></div><div class="line"></div><div class="line">        Log.w(LOG_TAG, <span class="string">"Search suggestions cursor at row "</span> + rowNum +</div><div class="line">                                <span class="string">" returned exception."</span>, e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>发现调用mSearchable的方法之前并没有检查mSearchable是否为null，其他地方是有判断的，由于做了catch所以不会crash，也不影响使用，另外，如果setOnSuggestionListener：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mSearchView.setOnQueryTextListener(<span class="keyword">new</span> SearchView.OnQueryTextListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onQueryTextSubmit</span><span class="params">(String query)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onQueryTextChange</span><span class="params">(String newText)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//返回true</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>onSuggestionClick(int position) 返回 true 就不会执行<code>createIntentFromSuggestion(~)</code>，<br>也就不会log了，但这样，键盘的隐藏和可选项pop的dismiss也不会执行，需要自己处理，使用SearchView的<code>clearFocus()</code>方法就能达到同样的效果。</p><p>那既然是报null，那就设置Searchable吧，设置后是会startActivity的(执行完createIntentFromSuggestion(~)后就会执行)。<br>然后效果就是当你点击了可选项就会startActivity，看需求做选择吧。。</p><h3 id="1-8-语音搜索功能"><a href="#1-8-语音搜索功能" class="headerlink" title="1.8 语音搜索功能"></a>1.8 语音搜索功能</h3><p>SearchView还有语音搜索功能(API &gt;= 8)，需要通过配置Searchable来开启，在xml配置文件中加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:voiceSearchMode="showVoiceSearchButton|launchRecognizer"</div></pre></td></tr></table></figure><p><code>showVoiceSearchButton</code>显示语音搜索按钮，<code>launchRecognizer</code>表示要启动一个语音识别器来转换成文字传给指定的searchable activity。<br>有个全局变量<code>boolean mVoiceButtonEnabled</code>表示是否启用，在<code>setSearchableInfo(~)</code>方法里进行了设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mVoiceButtonEnabled = IS_AT_LEAST_FROYO &amp;&amp; hasVoiceSearch();</div></pre></td></tr></table></figure><p>IS_AT_LEAST_FROYO是Build.VERSION.SDK_INT &gt;= 8，为了确保正确性，我试了下，结果并没有显示语言搜索按钮，<br>debug后发现在hasVoiceSearch()里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ResolveInfo ri = getContext().getPackageManager().resolveActivity(testIntent,</div><div class="line">        PackageManager.MATCH_DEFAULT_ONLY);</div><div class="line"><span class="keyword">return</span> ri != <span class="keyword">null</span>;</div></pre></td></tr></table></figure><p>在这里并没有resolve到Activity，结果return false，mVoiceButtonEnabled也就变成false了</p><p>终于知道为什么了，原来阉割版的系统都不会出现语音搜索按钮，华为/魅族/Genymotion试过都不行(没有试过全版本系统)，AS自带模拟器可以(有Google服务)，具体应该就是没有resolve到Google语音识别Activity。对语音识别有兴趣的同学可以搜索RecognizerIntent。</p><h3 id="1-9-AutoCompleteTextViewReflector"><a href="#1-9-AutoCompleteTextViewReflector" class="headerlink" title="1.9 AutoCompleteTextViewReflector"></a>1.9 AutoCompleteTextViewReflector</h3><p>v7包的SearchView使用了反射机制，通过反射拿到AutoCompleteTextView和InputMethodManager隐藏的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> AutoCompleteTextViewReflector HIDDEN_METHOD_INVOKER = <span class="keyword">new</span> AutoCompleteTextViewReflector();</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoCompleteTextViewReflector</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Method doBeforeTextChanged, doAfterTextChanged;</div><div class="line">    <span class="keyword">private</span> Method ensureImeVisible;</div><div class="line">    <span class="keyword">private</span> Method showSoftInputUnchecked;</div><div class="line"></div><div class="line">    AutoCompleteTextViewReflector() &#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 省略部分代码</span></div><div class="line"><span class="comment">         */</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            showSoftInputUnchecked = InputMethodManager.class.getMethod(</div><div class="line">                    <span class="string">"showSoftInputUnchecked"</span>, <span class="keyword">int</span>.class, ResultReceiver.class);</div><div class="line">            showSoftInputUnchecked.setAccessible(<span class="keyword">true</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">            <span class="comment">// Ah well.</span></div><div class="line">        &#125;</div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 省略部分代码</span></div><div class="line"><span class="comment">     */</span>        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showSoftInputUnchecked</span><span class="params">(InputMethodManager imm, View view, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (showSoftInputUnchecked != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                showSoftInputUnchecked.invoke(imm, flags, <span class="keyword">null</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//只有这个方法才有在if后面做处理</span></div><div class="line">        <span class="comment">// Hidden method failed, call public version instead</span></div><div class="line">        imm.showSoftInput(view, flags);</div><div class="line">    &#125;        </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-10-onMeasure-测量"><a href="#1-10-onMeasure-测量" class="headerlink" title="1.10 onMeasure 测量"></a>1.10 onMeasure 测量</h3><p>查看了下<code>onMeasure</code>，发现有个地方还是比较在意的。 当<code>isIconified()</code>返回<code>false</code>的时候，width的mode在最后都会被设置成<code>MeasureSpec.EXACTLY</code>。</p><p>在SearchView伸展收缩的时候，<code>onMeasure</code>会被执行多次，width根据其mode改变, 之后mode设置为EXACTLY再调用父类super方法进行测量。</p><p>设置为EXACTLY，这样父控件就能确切的决定view的大小，那为什么只对width而不对height进行设置呢?</p><p>通过查看默认的 <a href="https://github.com/nukc/SearchViewAnalysis/blob/master/app%2Fsrc%2Fmain%2Fres%2Flayout%2Flayout_search.xml">layout</a>，可以看到主要组件的layout_height的大多都是match_parent(对应EXACTLY模式)，而layout_width基本都是wrap_content(对应AT_MOST模式)。</p><p>另外，不是只有伸展收缩的时候，<code>onMeasure</code>才会被执行, 点击语音搜索按钮/输入框获取焦点的时候/…也会执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="comment">// Let the standard measurements take effect in iconified state.</span></div><div class="line">    <span class="keyword">if</span> (isIconified()) &#123;</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> width = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (widthMode) &#123;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">            <span class="comment">// If there is an upper limit, don't exceed maximum width (explicit or implicit)</span></div><div class="line">            <span class="keyword">if</span> (mMaxWidth &gt; <span class="number">0</span>) &#123;</div><div class="line">                width = Math.min(mMaxWidth, width);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                width = Math.min(getPreferredWidth(), width);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">            <span class="comment">// If an exact width is specified, still don't exceed any specified maximum width</span></div><div class="line">            <span class="keyword">if</span> (mMaxWidth &gt; <span class="number">0</span>) &#123;</div><div class="line">                width = Math.min(mMaxWidth, width);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">            <span class="comment">// Use maximum width, if specified, else preferred width</span></div><div class="line">            width = mMaxWidth &gt; <span class="number">0</span> ? mMaxWidth : getPreferredWidth();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    widthMode = MeasureSpec.EXACTLY;</div><div class="line">    <span class="keyword">super</span>.onMeasure(MeasureSpec.makeMeasureSpec(width, widthMode), heightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-展望未来"><a href="#2-展望未来" class="headerlink" title="2. 展望未来"></a>2. 展望未来</h2><p>在v7包的SearchView里，有一个声明并初始化了的变量，但并没有用到过:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> AppCompatDrawableManager mDrawableManager;</div><div class="line"></div><div class="line"><span class="comment">//在构造方法里初始化</span></div><div class="line">mDrawableManager = AppCompatDrawableManager.get();</div></pre></td></tr></table></figure><p>或许后续版本会用到吧! 抱着好奇的心去看了<code>AppCompatDrawableManager</code>源码，但并没有注释说明这个类是干什么用的，看名字只知道是管理Drawable的。</p><p>既然这样，那就来看下<code>AppCompatDrawableManager</code>能干些什么吧。</p><p>一步一步来，先看看它初始化的时候干了些什么，查看<code>get()</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppCompatDrawableManager <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//使用了懒汉式</span></div><div class="line">    <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</div><div class="line">        INSTANCE = <span class="keyword">new</span> AppCompatDrawableManager();</div><div class="line">        installDefaultInflateDelegates(INSTANCE);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> INSTANCE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">installDefaultInflateDelegates</span><span class="params">(@NonNull AppCompatDrawableManager manager)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sdk = Build.VERSION.SDK_INT;</div><div class="line">    <span class="comment">// 只在Android 5.0以下的系统</span></div><div class="line">    <span class="keyword">if</span> (sdk &lt; <span class="number">21</span>) &#123;</div><div class="line">        <span class="comment">// 在需要的时候使用 VectorDrawableCompat 进行自动处理</span></div><div class="line">        manager.addDelegate(<span class="string">"vector"</span>, <span class="keyword">new</span> VdcInflateDelegate());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (sdk &gt;= <span class="number">11</span>) &#123;</div><div class="line">            <span class="comment">// AnimatedVectorDrawableCompat 只能在 API v11+ 使用</span></div><div class="line">            manager.addDelegate(<span class="string">"animated-vector"</span>, <span class="keyword">new</span> AvdcInflateDelegate());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从这里, 我们可以看出跟<code>Vector</code>(矢量)有关。</p><ul><li><a href="https://github.com/android/platform_frameworks_base/blob/4535e11fb7010f2b104d3f8b3954407b9f330e0f/graphics/java/android/graphics/drawable/VectorDrawable.java">VectorDrawable</a><br>能创建一个基于xml描述的矢量图;</li><li><a href="https://github.com/android/platform_frameworks_base/blob/4535e11fb7010f2b104d3f8b3954407b9f330e0f/graphics/java/android/graphics/drawable/AnimatedVectorDrawable.java">AnimatedVectorDrawable</a><br>使用<code>ObjectAnimator</code>和<code>AnimatorSet</code>为VectorDrawable创建动画。</li></ul><p>然后我粗略的看了方法名，有几个关键词: <code>Tint</code>着色，<code>Cache</code>，……</p><p>有兴趣的同学可以搜下相关资料，这里就不再深入了。</p><p>如果我哪里分析错了，请大家及时纠正我，谢谢。</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Scroller源码解析</title>
    <link href="https://github.com/itgoyo/2017/07/26/Scroller%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/Scroller源码解析.html</id>
    <published>2017-07-26T11:58:31.000Z</published>
    <updated>2017-11-23T13:15:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><blockquote><p>本文分析版本: <strong>Android API 22</strong></p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><code>Android</code>开发中，如果我们希望使一个<code>View</code>滑动的话，除了使用属性动画外。我们还可以使用系统提供给我们的两个类<code>Scroller</code>和<code>OverScroller</code>用来实现弹性滑动。在我以前的一篇<a href="http://www.jianshu.com/p/07d717ef0b28" target="_blank" rel="external">ViewDragHelper源码分析</a>中我们有讲到过<code>Scroller</code>的作用。那么我们今天就来仔细分析一下<code>Scroller</code>的使用方法以及实现方式。</p><h2 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h2><p>在看<code>Scroller</code>的使用方法之前我们需要先了解一下<code>View</code>中的<code>scrollBy()</code>和<code>scrollTo()</code>方法，<code>scrollTo()</code>方法的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollTo</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"> <span class="comment">//如果当前偏移量变化</span></div><div class="line">     <span class="keyword">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class="line">         <span class="keyword">int</span> oldX = mScrollX;</div><div class="line">         <span class="keyword">int</span> oldY = mScrollY;</div><div class="line"><span class="comment">//赋值偏移量</span></div><div class="line">         mScrollX = x;</div><div class="line">         mScrollY = y;</div><div class="line">         invalidateParentCaches();</div><div class="line">         <span class="comment">//回调onScrollChanged方法</span></div><div class="line">         onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class="line">         <span class="keyword">if</span> (!awakenScrollBars()) &#123;</div><div class="line">             postInvalidateOnAnimation();</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p><code>scrollTo()</code>是指将当前视图内容横向偏移<code>x</code>距离，纵向偏移<code>y</code>距离。注意这里是<code>View</code>的内容的偏移，而不是<code>View</code>本身。而<code>scrollBy()</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollBy</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    scrollTo(mScrollX + x, mScrollY + y);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>scrollBy()</code>方法里直接调用了<code>scrollTo()</code>方法，表示在当前偏移量的基础上继续偏移<code>(x,y)</code>。现在我们来看看<code>Scroller</code>的用法。<a href="https://github.com/Skykai521/SkyScrollerDemo">SkyScrollerDemo</a>是我写的一个<code>Scroller</code>和<code>OverScroller</code>的使用<code>demo</code>。下面的用法都是来自于这个<code>demo</code>里，大家可以<code>clone</code>下来配合本文一起阅读。本文我们主要研究<code>Scroller</code>。对于<code>OverScroller</code>我在<code>demo</code>里也写了相关的使用方法，在本文的最后我们再做讨论。</p><p><code>Scroller</code>一般需要配合重写<code>computeScroll()</code>一起使用，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> Scroller mScroller;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScrollTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        mScroller = <span class="keyword">new</span> Scroller(mContext);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mScroller.computeScrollOffset()) &#123;</div><div class="line">            offsetLeftAndRight(mScroller.getCurrX() - mLeft);</div><div class="line">            offsetTopAndBottom(mScroller.getCurrY() - mTop);</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//以mLeft,mTop为初始点，在DEFAULT_DURATION的时间内，在Y轴上滑动-400的偏移量</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScrollerScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">        mScroller.startScroll(mLeft, mTop, <span class="number">0</span>, -<span class="number">400</span>, DEFAULT_DURATION);</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//以mLeft,mTop为初始点，并以Y方向上-5000的加速度滑动，最小Y坐标为200，最大Y坐标为1200</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScrollerFling</span><span class="params">()</span> </span>&#123;</div><div class="line">        mScroller.fling(mLeft, mTop, <span class="number">0</span>, -<span class="number">5000</span>, mLeft, mLeft, <span class="number">200</span>, <span class="number">1200</span>);</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在上面的代码里，当我们调用<code>startScrollerScroll()</code>与<code>startScrollerFling()</code>方法时我们就发现<code>View</code>滑动了。如果以前没了解过<code>Scroller</code>的同学可能会不理解。这里大致分析一下调用流程，首先我们要知道<code>Scroller</code>其实只负责计算，它并不负责滑动<code>View</code>，当我们调用了<code>Scroller</code>的<code>startScrollerScroll()</code>方法时，我们紧接着调用了<code>invalidate()</code>方法。<code>invalidate()</code>方法会使<code>View</code>重新绘制。因此会调用<code>View</code>的<code>draw()</code>方法，在<code>View</code>的<code>draw()</code>方法中又会去调用<code>computeScroll()</code>方法，<code>computeScroll()</code>方法在<code>View</code>中是一个空实现，所以需要我们自己实现<code>computeScroll()</code>方法。在上面的<code>computeScroll()</code>方法中，我们调用了<code>mScroller.computeScrollOffset()</code>方法来计算当前滑动的偏移量。如果还在滑动过程中就会返回<code>true</code>。所以我们就能在<code>if</code>中通过<code>Scroller</code>拿到当前的滑动坐标从而做任何我们想做的处理。在<code>demo</code>里我们根据滑动的偏移量来改变了<code>View</code>的坐标偏移量。从而形成了滑动动画。下面我们解释一下<code>Scroller</code>的两个方法的具体作用：</p><h3 id="1-startScroll-int-startX-int-startY-int-dx-int-dy-int-duration"><a href="#1-startScroll-int-startX-int-startY-int-dx-int-dy-int-duration" class="headerlink" title="1.startScroll(int startX, int startY, int dx, int dy, int duration):"></a>1.startScroll(int startX, int startY, int dx, int dy, int duration):</h3><p>通过起始点、偏移的距离和滑动的时间来开始滑动。</p><ul><li>startX 起始滑动点的X坐标</li><li>startY 起始滑动点的Y坐标</li><li>dx 滑动的水平偏移量。&gt;0 则表示往左滑动。</li><li>dy 滑动的垂直偏移量。&gt;0 则表示往上滑动。</li><li>duration 滑动执行的时间</li></ul><h3 id="2-fling-int-startX-int-startY-int-velocityX-int-velocityY-int-minX-int-maxX-int-minY-int-maxY"><a href="#2-fling-int-startX-int-startY-int-velocityX-int-velocityY-int-minX-int-maxX-int-minY-int-maxY" class="headerlink" title="2.fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY) :"></a>2.fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY) :</h3><p>基于一个快速滑动手势下的滑动。滑动的距离与这个手势最初的加速度有关。</p><ul><li>startX 起始滑动点的X坐标</li><li>startY 起始滑动点的Y坐标</li><li>velocityX X方向上的加速度</li><li>velocityY Y方向上的加速度</li><li>minX X方向上滑动的最小值，不会滑动超过这个点</li><li>maxX X方向上滑动的最大值，不会滑动超过这个点</li><li>minY Y方向上滑动的最小值，不会滑动超过这个点</li><li>maxY Y方向上滑动的最大值，不会滑动超过这个点</li></ul><h2 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3. 源码分析"></a>3. 源码分析</h2><p>我们依然通过调用流程来分析<code>Scroller</code>的实现：</p><h3 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Scroller</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Scroller</span><span class="params">(Context context, Interpolator interpolator)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, interpolator,</div><div class="line">            context.getApplicationInfo().targetSdkVersion &gt;= Build.VERSION_CODES.HONEYCOMB);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Scroller</span><span class="params">(Context context, Interpolator interpolator, <span class="keyword">boolean</span> flywheel)</span> </span>&#123;</div><div class="line">    mFinished = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span> (interpolator == <span class="keyword">null</span>) &#123;</div><div class="line">        mInterpolator = <span class="keyword">new</span> ViscousFluidInterpolator();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mInterpolator = interpolator;</div><div class="line">    &#125;</div><div class="line">    mPpi = context.getResources().getDisplayMetrics().density * <span class="number">160.0f</span>;</div><div class="line">    mDeceleration = computeDeceleration(ViewConfiguration.getScrollFriction());</div><div class="line">    mFlywheel = flywheel;</div><div class="line"></div><div class="line">    mPhysicalCoeff = computeDeceleration(<span class="number">0.84f</span>); <span class="comment">// look and feel tuning</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最终都会调用最后一个构造方法。必须传入<code>Context</code>对象。可以传入自定义的<code>interpolator</code>和是否支持飞轮<code>flywheel</code>的功能，当然这两个并不是必须的。如果不传入<code>interpolator</code>会默认创建一个<code>ViscousFluidInterpolator</code>，从字面意义上看是一个粘性流体插值器。对于<code>flywheel</code>是指是否支持在滑动过程中，如果有新的<code>fling()</code>方法调用是否累加加速度。如果不传默认在2.3以上都会支持。剩下就是初始化了一些用于计算的参数。这样就完成了<code>Scroller</code>的初始化了。下面我们来看看<code>startScroll()</code>方法的实现：</p><h3 id="2-startScroll-方法的实现"><a href="#2-startScroll-方法的实现" class="headerlink" title="2.startScroll()方法的实现"></a>2.startScroll()方法的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScroll</span><span class="params">(<span class="keyword">int</span> startX, <span class="keyword">int</span> startY, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span> duration)</span> </span>&#123;</div><div class="line">  <span class="comment">// mMode 分两种方式 1.滑动:SCROLL_MODE 2. 加速度滑动:FLING_MODE</span></div><div class="line">  mMode = SCROLL_MODE;</div><div class="line">  <span class="comment">// 是否滑动结束 这里是开始所以设置为false</span></div><div class="line">  mFinished = <span class="keyword">false</span>;</div><div class="line">  <span class="comment">// 滑动的时间</span></div><div class="line">  mDuration = duration;</div><div class="line">  <span class="comment">// 开始的时间</span></div><div class="line">  mStartTime = AnimationUtils.currentAnimationTimeMillis();</div><div class="line">  <span class="comment">// 开始滑动点的X坐标</span></div><div class="line">  mStartX = startX;</div><div class="line">  <span class="comment">// 开始滑动点的Y坐标</span></div><div class="line">  mStartY = startY;</div><div class="line">  <span class="comment">// 最终滑动到位置的X坐标</span></div><div class="line">  mFinalX = startX + dx;</div><div class="line">  <span class="comment">// 最终滑动到位置的Y坐标</span></div><div class="line">  mFinalY = startY + dy;</div><div class="line">  <span class="comment">// X方向上滑动的偏移量</span></div><div class="line">  mDeltaX = dx;</div><div class="line">  <span class="comment">// Y方向上滑动的偏移量</span></div><div class="line">  mDeltaY = dy;</div><div class="line">  <span class="comment">// 持续时间的倒数 最终用来计算得到插值器返回的值</span></div><div class="line">  mDurationReciprocal = <span class="number">1.0f</span> / (<span class="keyword">float</span>) mDuration;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>很简单只是一些变量的赋值。根据我们前面使用方法里的分析，最终会调用<code>computeScrollOffset()</code>方法：</p><h3 id="3-computeScrollOffset-方法中-SCROLL-MODE-的实现"><a href="#3-computeScrollOffset-方法中-SCROLL-MODE-的实现" class="headerlink" title="3.computeScrollOffset() 方法中 SCROLL_MODE 的实现"></a>3.computeScrollOffset() 方法中 SCROLL_MODE 的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当你需要知道新的位置的时候调用这个方法，如果动画还未结束则返回true</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">computeScrollOffset</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//如果已经结束 则直接返回false</span></div><div class="line">    <span class="keyword">if</span> (mFinished) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//得到以及度过的时间</span></div><div class="line">    <span class="keyword">int</span> timePassed = (<span class="keyword">int</span>)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);</div><div class="line"></div><div class="line">    <span class="comment">//如果还在动画时间内</span></div><div class="line">    <span class="keyword">if</span> (timePassed &lt; mDuration) &#123;</div><div class="line">        <span class="keyword">switch</span> (mMode) &#123;</div><div class="line">            <span class="keyword">case</span> SCROLL_MODE:</div><div class="line">                <span class="comment">// 根据timePassed * mDurationReciprocal,从mInterpolator中取出当前需要偏移量的比例</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">float</span> x = mInterpolator.getInterpolation(timePassed * mDurationReciprocal);</div><div class="line">                <span class="comment">// 赋值给 mCurrX，mCurrY</span></div><div class="line">                mCurrX = mStartX + Math.round(x * mDeltaX);</div><div class="line">                mCurrY = mStartY + Math.round(x * mDeltaY);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> FLING_MODE:</div><div class="line">                ...</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        mCurrX = mFinalX;</div><div class="line">        mCurrY = mFinalY;</div><div class="line">        mFinished = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>首先的到当前时间与滑动开始时间的时间差，如果还在滑动时间内则通过插值器获得当前的进度并乘以总偏移量并赋值给<code>mCurrX</code>，<code>mCurrY</code>。如果已经结束则直接将<code>mFinalX</code>和<code>mFinalY</code>赋值并将<code>mFinished</code>设置为<code>true</code>。所以这样我们就能通过<code>getCurrX()</code>和<code>getCurrY()</code>来得到对应的<code>mCurrX</code>和<code>mCurrY</code>来做相应的处理了。整个<code>Scroll</code>的过程就是这样了。</p><h3 id="4-fling-方法的实现"><a href="#4-fling-方法的实现" class="headerlink" title="4.fling()方法的实现"></a>4.fling()方法的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fling</span><span class="params">(<span class="keyword">int</span> startX, <span class="keyword">int</span> startY, <span class="keyword">int</span> velocityX, <span class="keyword">int</span> velocityY,</span></span></div><div class="line"><span class="function"><span class="params">                  <span class="keyword">int</span> minX, <span class="keyword">int</span> maxX, <span class="keyword">int</span> minY, <span class="keyword">int</span> maxY)</span> </span>&#123;</div><div class="line">    <span class="comment">// 如果前一次滑动还未结束，又调用了新的fling()方法时，</span></div><div class="line">    <span class="comment">// 则累加相同方向上加速度</span></div><div class="line">    <span class="keyword">if</span> (mFlywheel &amp;&amp; !mFinished) &#123;</div><div class="line">        <span class="keyword">float</span> oldVel = getCurrVelocity();</div><div class="line"></div><div class="line">        <span class="keyword">float</span> dx = (<span class="keyword">float</span>) (mFinalX - mStartX);</div><div class="line">        <span class="keyword">float</span> dy = (<span class="keyword">float</span>) (mFinalY - mStartY);</div><div class="line">        <span class="keyword">float</span> hyp = FloatMath.sqrt(dx * dx + dy * dy);</div><div class="line"></div><div class="line">        <span class="keyword">float</span> ndx = dx / hyp;</div><div class="line">        <span class="keyword">float</span> ndy = dy / hyp;</div><div class="line"></div><div class="line">        <span class="keyword">float</span> oldVelocityX = ndx * oldVel;</div><div class="line">        <span class="keyword">float</span> oldVelocityY = ndy * oldVel;</div><div class="line">        <span class="keyword">if</span> (Math.signum(velocityX) == Math.signum(oldVelocityX) &amp;&amp;</div><div class="line">                Math.signum(velocityY) == Math.signum(oldVelocityY)) &#123;</div><div class="line">            velocityX += oldVelocityX;</div><div class="line">            velocityY += oldVelocityY;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置为FLING_MODE</span></div><div class="line">    mMode = FLING_MODE;</div><div class="line">    mFinished = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">//根据勾股定理获得总加速度</span></div><div class="line">    <span class="keyword">float</span> velocity = FloatMath.sqrt(velocityX * velocityX + velocityY * velocityY);</div><div class="line"></div><div class="line">    mVelocity = velocity;</div><div class="line">    <span class="comment">// 通过加速度得到滑动持续时间</span></div><div class="line">    mDuration = getSplineFlingDuration(velocity);</div><div class="line">    mStartTime = AnimationUtils.currentAnimationTimeMillis();</div><div class="line">    mStartX = startX;</div><div class="line">    mStartY = startY;</div><div class="line"></div><div class="line">    <span class="keyword">float</span> coeffX = velocity == <span class="number">0</span> ? <span class="number">1.0f</span> : velocityX / velocity;</div><div class="line">    <span class="keyword">float</span> coeffY = velocity == <span class="number">0</span> ? <span class="number">1.0f</span> : velocityY / velocity;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> totalDistance = getSplineFlingDistance(velocity);</div><div class="line">    mDistance = (<span class="keyword">int</span>) (totalDistance * Math.signum(velocity));</div><div class="line"></div><div class="line">    mMinX = minX;</div><div class="line">    mMaxX = maxX;</div><div class="line">    mMinY = minY;</div><div class="line">    mMaxY = maxY;</div><div class="line"></div><div class="line">    mFinalX = startX + (<span class="keyword">int</span>) Math.round(totalDistance * coeffX);</div><div class="line">    <span class="comment">// Pin to mMinX &lt;= mFinalX &lt;= mMaxX</span></div><div class="line">    mFinalX = Math.min(mFinalX, mMaxX);</div><div class="line">    mFinalX = Math.max(mFinalX, mMinX);</div><div class="line"></div><div class="line">    mFinalY = startY + (<span class="keyword">int</span>) Math.round(totalDistance * coeffY);</div><div class="line">    <span class="comment">// Pin to mMinY &lt;= mFinalY &lt;= mMaxY</span></div><div class="line">    mFinalY = Math.min(mFinalY, mMaxY);</div><div class="line">    mFinalY = Math.max(mFinalY, mMinY);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>依然是为计算需要的各种变量赋值。因为引入了加速度的概念所以变得相对复杂，首先先判断了如果一次滑动未结束又触发另一次滑动时，是否需要累加加速度。然后是设置<code>mMode</code>为<code>FLING_MODE</code>。然后根据<code>velocityX</code>和<code>velocityY</code>算出总的加速度<code>velocity</code>，紧接着算出这个加速度下可以滑动的距离<code>mDistance</code>。最后再通过<code>x</code>或<code>y</code>方向上的加速度比值以及我们设定的最大值和最小值来给<code>mFinalX</code>或<code>mFinalY</code>赋值。赋值结束后，通过调用<code>invalidate()</code>，最终依然会调用<code>computeScrollOffset()</code>方法：</p><h3 id="5-computeScrollOffset-方法中-FLING-MODE-的实现"><a href="#5-computeScrollOffset-方法中-FLING-MODE-的实现" class="headerlink" title="5.computeScrollOffset() 方法中 FLING_MODE 的实现"></a>5.computeScrollOffset() 方法中 FLING_MODE 的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">computeScrollOffset</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mFinished) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> timePassed = (<span class="keyword">int</span>)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (timePassed &lt; mDuration) &#123;</div><div class="line">        <span class="keyword">switch</span> (mMode) &#123;</div><div class="line">            <span class="keyword">case</span> SCROLL_MODE:</div><div class="line">                ...</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> FLING_MODE:</div><div class="line">                <span class="comment">// 当前已滑动的时间与总滑动时间的比值</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">float</span> t = (<span class="keyword">float</span>) timePassed / mDuration;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> index = (<span class="keyword">int</span>) (NB_SAMPLES * t);</div><div class="line">                <span class="comment">// 距离系数</span></div><div class="line">                <span class="keyword">float</span> distanceCoef = <span class="number">1</span>.f;</div><div class="line">                <span class="comment">// 加速度系数</span></div><div class="line">                <span class="keyword">float</span> velocityCoef = <span class="number">0</span>.f;</div><div class="line">                <span class="keyword">if</span> (index &lt; NB_SAMPLES) &#123;</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> t_inf = (<span class="keyword">float</span>) index / NB_SAMPLES;</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> t_sup = (<span class="keyword">float</span>) (index + <span class="number">1</span>) / NB_SAMPLES;</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> d_inf = SPLINE_POSITION[index];</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> d_sup = SPLINE_POSITION[index + <span class="number">1</span>];</div><div class="line">                    velocityCoef = (d_sup - d_inf) / (t_sup - t_inf);</div><div class="line">                    distanceCoef = d_inf + (t - t_inf) * velocityCoef;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 计算出当前的加速度</span></div><div class="line">                mCurrVelocity = velocityCoef * mDistance / mDuration * <span class="number">1000.0f</span>;</div><div class="line">                <span class="comment">// 计算出当前的mCurrX 与mCurrY</span></div><div class="line">                mCurrX = mStartX + Math.round(distanceCoef * (mFinalX - mStartX));</div><div class="line">                <span class="comment">// Pin to mMinX &lt;= mCurrX &lt;= mMaxX</span></div><div class="line">                mCurrX = Math.min(mCurrX, mMaxX);</div><div class="line">                mCurrX = Math.max(mCurrX, mMinX);</div><div class="line"></div><div class="line">                mCurrY = mStartY + Math.round(distanceCoef * (mFinalY - mStartY));</div><div class="line">                <span class="comment">// Pin to mMinY &lt;= mCurrY &lt;= mMaxY</span></div><div class="line">                mCurrY = Math.min(mCurrY, mMaxY);</div><div class="line">                mCurrY = Math.max(mCurrY, mMinY);</div><div class="line"></div><div class="line">                <span class="comment">// 如果到达了终点 则结束</span></div><div class="line">                <span class="keyword">if</span> (mCurrX == mFinalX &amp;&amp; mCurrY == mFinalY) &#123;</div><div class="line">                    mFinished = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        mCurrX = mFinalX;</div><div class="line">        mCurrY = mFinalY;</div><div class="line">        mFinished = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于<code>fling()</code>方法中将<code>mMode</code>赋值为<code>FLING_MODE</code>。所以我们直接来看<code>FLING_MODE</code>中的代码。可以看出根据当前滑动时间与总滑动时间的比例。再根据一个<code>SPLINE_POSITION</code>数组计算出了距离系数<code>distanceCoef</code>与加速度系数<code>velocityCoef</code>。再根据这两个系数计算出当前加速度与当前的<code>mCurrX</code>与<code>mCurrY</code>。关于<code>SPLINE_POSITION</code>的初始化是在下面的静态代码块里赋值的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    <span class="keyword">float</span> x_min = <span class="number">0.0f</span>;</div><div class="line">    <span class="keyword">float</span> y_min = <span class="number">0.0f</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NB_SAMPLES; i++) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">float</span> alpha = (<span class="keyword">float</span>) i / NB_SAMPLES;</div><div class="line"></div><div class="line">        <span class="keyword">float</span> x_max = <span class="number">1.0f</span>;</div><div class="line">        <span class="keyword">float</span> x, tx, coef;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            x = x_min + (x_max - x_min) / <span class="number">2.0f</span>;</div><div class="line">            coef = <span class="number">3.0f</span> * x * (<span class="number">1.0f</span> - x);</div><div class="line">            tx = coef * ((<span class="number">1.0f</span> - x) * P1 + x * P2) + x * x * x;</div><div class="line">            <span class="keyword">if</span> (Math.abs(tx - alpha) &lt; <span class="number">1E-5</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span> (tx &gt; alpha) x_max = x;</div><div class="line">            <span class="keyword">else</span> x_min = x;</div><div class="line">        &#125;</div><div class="line">        SPLINE_POSITION[i] = coef * ((<span class="number">1.0f</span> - x) * START_TENSION + x) + x * x * x;</div><div class="line"></div><div class="line">        <span class="keyword">float</span> y_max = <span class="number">1.0f</span>;</div><div class="line">        <span class="keyword">float</span> y, dy;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            y = y_min + (y_max - y_min) / <span class="number">2.0f</span>;</div><div class="line">            coef = <span class="number">3.0f</span> * y * (<span class="number">1.0f</span> - y);</div><div class="line">            dy = coef * ((<span class="number">1.0f</span> - y) * START_TENSION + y) + y * y * y;</div><div class="line">            <span class="keyword">if</span> (Math.abs(dy - alpha) &lt; <span class="number">1E-5</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span> (dy &gt; alpha) y_max = y;</div><div class="line">            <span class="keyword">else</span> y_min = y;</div><div class="line">        &#125;</div><div class="line">        SPLINE_TIME[i] = coef * ((<span class="number">1.0f</span> - y) * P1 + y * P2) + y * y * y;</div><div class="line">    &#125;</div><div class="line">    SPLINE_POSITION[NB_SAMPLES] = SPLINE_TIME[NB_SAMPLES] = <span class="number">1.0f</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我并没有看懂这段代码的实际意义。网上也没有找到比较清晰的解释。通过<code>debug</code>得知<code>SPLINE_POSITION</code>是一个长度为<code>101</code>并且从<code>0-1</code>递增数组。猜想这应该是一个函数模型并且最终用于计算出滑动过程中的加速度与位置。至此<code>Scroller</code>的两个主要方法的实现我们就分析完了。</p><h2 id="4-OverScroller解析"><a href="#4-OverScroller解析" class="headerlink" title="4. OverScroller解析"></a>4. OverScroller解析</h2><p><code>OverScroller</code>是对<code>Scroller</code>的拓展，它在<code>Scroller</code>的基础上拓展出了更多的方法。<code>OverScroller</code>的<code>fling</code>方法支持滑动到终点之后并超出一段距离并返回，类似于弹性效果。另外一个<code>springBack()</code>方法是指将指定的点平滑滚动到指定的终点上。这个终点由设置的参数决定。原理我们就不再探究了，大家可以自行研究这两个类的差别。最后具体的使用方法在文章最上面的<code>demo</code>里都有提供。可以<code>clone</code>下来帮助理解。</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>LruCache源码解析</title>
    <link href="https://github.com/itgoyo/2017/07/26/LruCache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/LruCache源码解析.html</id>
    <published>2017-07-26T11:57:39.000Z</published>
    <updated>2017-11-23T13:15:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><blockquote><p>LRU 是 Least Recently Used 最近最少使用算法。</p><p>曾经，在各大缓存图片的框架没流行的时候。有一种很常用的内存缓存技术：SoftReference 和 WeakReference（软引用和弱引用）。但是走到了 Android 2.3（Level 9）时代，垃圾回收机制更倾向于回收 SoftReference 或 WeakReference 的对象。后来，又来到了 Android3.0，图片缓存在内容中，因为不知道要在是什么时候释放内存，没有策略，没用一种可以预见的场合去将其释放。这就造成了内存溢出。</p></blockquote><h2 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h2><p><strong>当成一个 Map 用就可以了，只不过实现了 LRU 缓存策略</strong>。</p><p>使用的时候记住几点即可：</p><ul><li><strong>1.（必填）</strong>你需要提供一个缓存容量作为构造参数。</li><li><strong>2.（必填）</strong>  覆写  <code>sizeOf</code> 方法 ，自定义设计一条数据放进来的容量计算，如果不覆写就无法预知数据的容量，不能保证缓存容量限定在最大容量以内。</li><li><strong>3.（选填）</strong> 覆写 <code>entryRemoved</code> 方法 ，你可以知道最少使用的缓存被清除时的数据（ evicted, key, oldValue, newVaule ）。</li><li><strong>4.（记住）</strong>LruCache是线程安全的，在内部的 get、put、remove 包括 trimToSize 都是安全的（因为都上锁了）。</li><li><strong>5.（选填）</strong> 还有就是覆写 <code>create</code> 方法 。</li></ul><p>一般做到 <strong>1、2、3、4就足够了，5可以无视</strong> 。</p><p>以下是 一个 <strong>LruCache 实现 Bitmap 小缓存的案例</strong>, <code>entryRemoved</code> 里的自定义逻辑可以无视，想看的可以去到我的我的展示 <a href="https://github.com/CaMnter/AndroidLife/blob/master/app/src/main/java/com/camnter/newlife/views/activity/lrucache/LruCacheActivity.java">demo</a> 里的看自定义 <code>entryRemoved</code> 逻辑。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> ONE_MIB = <span class="number">1024</span> * <span class="number">1024</span>;</div><div class="line"><span class="comment">// 7MB</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CACHE_SIZE = (<span class="keyword">int</span>) (<span class="number">7</span> * ONE_MIB);</div><div class="line"><span class="keyword">private</span> LruCache&lt;String, Bitmap&gt; bitmapCache;</div><div class="line"><span class="keyword">this</span>.bitmapCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(CACHE_SIZE) &#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value.getByteCount();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">entryRemoved</span><span class="params">(<span class="keyword">boolean</span> evicted, String key, Bitmap oldValue, Bitmap newValue)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="3-效果展示"><a href="#3-效果展示" class="headerlink" title="3. 效果展示"></a>3. 效果展示</h2><p><a href="https://github.com/CaMnter/AndroidLife/blob/master/article/LruCache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA.md">LruCache 效果展示</a>  </p><h2 id="4-源码分析"><a href="#4-源码分析" class="headerlink" title="4. 源码分析"></a>4. 源码分析</h2><h3 id="4-1-LruCache-原理概要解析"><a href="#4-1-LruCache-原理概要解析" class="headerlink" title="4.1 LruCache 原理概要解析"></a>4.1 LruCache 原理概要解析</h3><p>LruCache 就是 <strong>利用 LinkedHashMap 的一个特性（ accessOrder＝true 基于访问顺序 ）再加上对 LinkedHashMap 的数据操作上锁实现的缓存策略</strong>。</p><p><strong>LruCache 的数据缓存是内存中的</strong>。  </p><ul><li><p>1.首先设置了内部 <code>LinkedHashMap</code> 构造参数 <code>accessOrder=true</code>， 实现了数据排序按照访问顺序。</p></li><li><p>2.然后在每次 <code>LruCache.get(K key)</code> 方法里都会调用 <code>LinkedHashMap.get(Object key)</code>。</p></li><li><p>3.如上述设置了 <code>accessOrder=true</code> 后，每次 <code>LinkedHashMap.get(Object key)</code> 都会进行 <code>LinkedHashMap.makeTail(LinkedEntry&amp;lt;K, V&gt; e)</code>。</p></li><li><p>4.<code>LinkedHashMap</code> 是双向循环链表，然后每次 <code>LruCache.get</code> -&gt; <code>LinkedHashMap.get</code> 的数据就被放到最末尾了。</p></li><li><p>5.在 <code>put</code> 和 <code>trimToSize</code> 的方法执行下，如果发生数据量移除，会优先移除掉最前面的数据（因为最新访问的数据在尾部）。</p></li></ul><p><strong>具体解析在：</strong> 4.2、4.3、4.4、4.5</p><h3 id="4-2-LruCache-的唯一构造方法"><a href="#4-2-LruCache-的唯一构造方法" class="headerlink" title="4.2 LruCache 的唯一构造方法"></a>4.2 LruCache 的唯一构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * LruCache的构造方法：需要传入最大缓存个数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.maxSize = maxSize;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 初始化LinkedHashMap</span></div><div class="line"><span class="comment">     * 第一个参数：initialCapacity，初始大小</span></div><div class="line"><span class="comment">     * 第二个参数：loadFactor，负载因子=0.75f</span></div><div class="line"><span class="comment">     * 第三个参数：accessOrder=true，基于访问顺序；accessOrder=false，基于插入顺序</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">this</span>.map = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第一个参数 <code>initialCapacity</code> 用于初始化该 LinkedHashMap 的大小。</p><p>先简单介绍一下 第二个参数 <code>loadFactor</code>，这个其实的 HashMap 里的构造参数，涉及到<strong>扩容问题</strong>，比如  HashMap 的最大容量是100，那么这里设置0.75f的话，到75容量的时候就会扩容。</p><p>主要是第三个参数 <code>accessOrder=true</code> ，<strong>这样的话 LinkedHashMap 数据排序就会基于数据的访问顺序，从而实现了 LruCache 核心工作原理</strong>。</p><h3 id="4-3-LruCache-get-K-key"><a href="#4-3-LruCache-get-K-key" class="headerlink" title="4.3 LruCache.get(K key)"></a>4.3 LruCache.get(K key)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 根据 key 查询缓存，如果存在于缓存或者被 create 方法创建了。</span></div><div class="line"><span class="comment"> * 如果值返回了，那么它将被移动到双向循环链表的的尾部。</span></div><div class="line"><span class="comment"> * 如果没有缓存的值，则返回 null。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</div><div class="line"></div><div class="line">    ...  </div><div class="line"></div><div class="line">    V mapValue;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="comment">// 关键点：LinkedHashMap每次get都会基于访问顺序来重整数据顺序</span></div><div class="line">        mapValue = map.get(key);</div><div class="line">        <span class="comment">// 计算 命中次数</span></div><div class="line">        <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</div><div class="line">            hitCount++;</div><div class="line">            <span class="keyword">return</span> mapValue;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 计算 丢失次数</span></div><div class="line">        missCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 官方解释：</span></div><div class="line"><span class="comment">     * 尝试创建一个值，这可能需要很长时间，并且Map可能在create()返回的值时有所不同。如果在create()执行的时</span></div><div class="line"><span class="comment">     * 候，一个冲突的值被添加到Map，我们在Map中删除这个值，释放被创造的值。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    V createdValue = create(key);</div><div class="line">    <span class="keyword">if</span> (createdValue == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/***************************</span></div><div class="line"><span class="comment">     * 不覆写create方法走不到下面 *</span></div><div class="line"><span class="comment">     ***************************/</span></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 正常情况走不到这里</span></div><div class="line"><span class="comment">     * 走到这里的话 说明 实现了自定义的 create(K key) 逻辑</span></div><div class="line"><span class="comment">     * 因为默认的 create(K key) 逻辑为null</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="comment">// 记录 create 的次数</span></div><div class="line">        createCount++;</div><div class="line">        <span class="comment">// 将自定义create创建的值，放入LinkedHashMap中，如果key已经存在，会返回 之前相同key 的值</span></div><div class="line">        mapValue = map.put(key, createdValue);</div><div class="line"></div><div class="line">        <span class="comment">// 如果之前存在相同key的value，即有冲突。</span></div><div class="line">        <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line"><span class="comment">             * 有冲突</span></div><div class="line"><span class="comment">             * 所以 撤销 刚才的 操作</span></div><div class="line"><span class="comment">             * 将 之前相同key 的值 重新放回去</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            map.put(key, mapValue);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 拿到键值对，计算出在容量中的相对长度，然后加上</span></div><div class="line">            size += safeSizeOf(key, createdValue);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果上面 判断出了 将要放入的值发生冲突</span></div><div class="line">    <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * 刚才create的值被删除了，原来的 之前相同key 的值被重新添加回去了</span></div><div class="line"><span class="comment">         * 告诉 自定义 的 entryRemoved 方法</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        entryRemoved(<span class="keyword">false</span>, key, createdValue, mapValue);</div><div class="line">        <span class="keyword">return</span> mapValue;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 上面 进行了 size += 操作 所以这里要重整长度</span></div><div class="line">        trimToSize(maxSize);</div><div class="line">        <span class="keyword">return</span> createdValue;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述的 <code>get</code> 方法表面并没有看出哪里有实现了 LRU 的缓存策略。主要在 <code>mapValue = map.get(key)</code>;里，<strong>调用了 LinkedHashMap 的 get 方法，再加上 LruCache 构造里默认设置 LinkedHashMap 的 accessOrder=true</strong>。</p><h3 id="4-4-LinkedHashMap-get-Object-key"><a href="#4-4-LinkedHashMap-get-Object-key" class="headerlink" title="4.4 LinkedHashMap.get(Object key)"></a>4.4 LinkedHashMap.get(Object key)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Returns the value of the mapping with the specified key.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment"> *            the key.</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> the value of the mapping with the specified key, or &#123;<span class="doctag">@code</span> null&#125;</span></div><div class="line"><span class="comment"> *         if no mapping for the specified key is found.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * This method is overridden to eliminate the need for a polymorphic</span></div><div class="line"><span class="comment">     * invocation in superclass at the expense of code duplication.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</div><div class="line">        HashMapEntry&lt;K, V&gt; e = entryForNullKey;</div><div class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (accessOrder)</div><div class="line">            makeTail((LinkedEntry&lt;K, V&gt;) e);</div><div class="line">        <span class="keyword">return</span> e.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> hash = Collections.secondaryHash(key);</div><div class="line">    HashMapEntry&lt;K, V&gt;[] tab = table;</div><div class="line">    <span class="keyword">for</span> (HashMapEntry&lt;K, V&gt; e = tab[hash &amp; (tab.length - <span class="number">1</span>)];</div><div class="line">         e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">        K eKey = e.key;</div><div class="line">        <span class="keyword">if</span> (eKey == key || (e.hash == hash &amp;&amp; key.equals(eKey))) &#123;</div><div class="line">            <span class="keyword">if</span> (accessOrder)</div><div class="line">                makeTail((LinkedEntry&lt;K, V&gt;) e);</div><div class="line">            <span class="keyword">return</span> e.value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其实仔细看 <code>if (accessOrder)</code> 的逻辑即可，如果  <code>accessOrder=true</code> 那么每次 <code>get</code> 都会执行 N 次  <code>makeTail(LinkedEntry&amp;lt;K, V&gt; e)</code> 。</p><p>接下来看看：</p><h3 id="4-5-LinkedHashMap-makeTail-LinkedEntry-lt-K-V-gt-e"><a href="#4-5-LinkedHashMap-makeTail-LinkedEntry-lt-K-V-gt-e" class="headerlink" title="4.5 LinkedHashMap.makeTail(LinkedEntry&lt;K, V&gt; e)"></a>4.5 LinkedHashMap.makeTail(LinkedEntry&lt;K, V&gt; e)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Relinks the given entry to the tail of the list. Under access ordering,</span></div><div class="line"><span class="comment"> * this method is invoked whenever the value of a  pre-existing entry is</span></div><div class="line"><span class="comment"> * read by Map.get or modified by Map.put.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeTail</span><span class="params">(LinkedEntry&lt;K, V&gt; e)</span> </span>&#123;</div><div class="line">    <span class="comment">// Unlink e</span></div><div class="line">    e.prv.nxt = e.nxt;</div><div class="line">    e.nxt.prv = e.prv;</div><div class="line"></div><div class="line">    <span class="comment">// Relink e as tail</span></div><div class="line">    LinkedEntry&lt;K, V&gt; header = <span class="keyword">this</span>.header;</div><div class="line">    LinkedEntry&lt;K, V&gt; oldTail = header.prv;</div><div class="line">    e.nxt = header;</div><div class="line">    e.prv = oldTail;</div><div class="line">    oldTail.nxt = header.prv = e;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>// Unlink e</p><p><img src="http://ww2.sinaimg.cn/large/006lPEc9jw1f36m59c4tgj31kw2c7tgn.jpg" width="500x">  </p><p>// Relink e as tail</p><p><img src="http://ww3.sinaimg.cn/large/006lPEc9jw1f36m68rkisj31kw1eswnd.jpg" width="500x">  </p><p><img src="images/lrucache.png" alt=""></p><p>LinkedHashMap 是双向循环链表，然后此次 <strong>LruCache.get -&gt; LinkedHashMap.get</strong> 的数据就被放到最末尾了。</p><p><strong>以上就是 LruCache 核心工作原理</strong>。</p><p>接下来介绍 <strong>LruCache 的容量溢出策略</strong>。</p><h3 id="4-6-LruCache-put-K-key-V-value"><a href="#4-6-LruCache-put-K-key-V-value" class="headerlink" title="4.6 LruCache.put(K key, V value)"></a>4.6 LruCache.put(K key, V value)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        ...</div><div class="line">        <span class="comment">// 拿到键值对，计算出在容量中的相对长度，然后加上</span></div><div class="line">        size += safeSizeOf(key, value);</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">    trimToSize(maxSize);</div><div class="line">    <span class="keyword">return</span> previous;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>记住几点：</p><ul><li><strong>1.</strong>put 开始的时候确实是把值放入 LinkedHashMap 了，<strong>不管超不超过你设定的缓存容量</strong>。</li><li><strong>2.</strong>然后根据 <code>safeSizeOf</code> 方法计算 此次添加数据的容量是多少，并且加到 <code>size</code> 里 。</li><li><strong>3.</strong>说到 <code>safeSizeOf</code> 就要讲到 <code>sizeOf(K key, V value)</code> 会计算出此次添加数据的大小 。</li><li><strong>4.</strong>直到 put 要结束时，进行了 <code>trimToSize</code> 才判断 <code>size</code> 是否 大于 <code>maxSize</code> 然后进行最近很少访问数据的移除。</li></ul><h3 id="4-7-LruCache-trimToSize-int-maxSize"><a href="#4-7-LruCache-trimToSize-int-maxSize" class="headerlink" title="4.7 LruCache.trimToSize(int maxSize)"></a>4.7 LruCache.trimToSize(int maxSize)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * 这是一个死循环，</span></div><div class="line"><span class="comment">     * 1.只有 扩容 的情况下能立即跳出</span></div><div class="line"><span class="comment">     * 2.非扩容的情况下，map的数据会一个一个删除，直到map里没有值了，就会跳出</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        K key;</div><div class="line">        V value;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="comment">// 在重新调整容量大小前，本身容量就为空的话，会出异常的。</span></div><div class="line">            <span class="keyword">if</span> (size &lt; <span class="number">0</span> || (map.isEmpty() &amp;&amp; size != <span class="number">0</span>)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">                        getClass().getName() + <span class="string">".sizeOf() is reporting inconsistent results!"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 如果是 扩容 或者 map为空了，就会中断，因为扩容不会涉及到丢弃数据的情况</span></div><div class="line">            <span class="keyword">if</span> (size &lt;= maxSize || map.isEmpty()) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Map.Entry&lt;K, V&gt; toEvict = map.entrySet().iterator().next();</div><div class="line">            key = toEvict.getKey();</div><div class="line">            value = toEvict.getValue();</div><div class="line">            map.remove(key);</div><div class="line">            <span class="comment">// 拿到键值对，计算出在容量中的相对长度，然后减去。</span></div><div class="line">            size -= safeSizeOf(key, value);</div><div class="line">            <span class="comment">// 添加一次收回次数</span></div><div class="line">            evictionCount++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * 将最后一次删除的最少访问数据回调出去</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        entryRemoved(<span class="keyword">true</span>, key, value, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>简单描述：会判断之前 <code>size</code> 是否大于 <code>maxSize</code> 。是的话，直接跳出后什么也不做。不是的话，证明已经溢出容量了。由 <code>makeTail</code> 图已知，最近经常访问的数据在最末尾。拿到一个存放 key 的 Set，然后一直一直从头开始删除，删一个判断是否溢出，直到没有溢出。</p><p>最后看看：</p><h3 id="4-8-覆写-entryRemoved-的作用"><a href="#4-8-覆写-entryRemoved-的作用" class="headerlink" title="4.8 覆写 entryRemoved 的作用"></a>4.8 覆写 entryRemoved 的作用</h3><p>entryRemoved被LruCache调用的场景：</p><ul><li><strong>1.（put）</strong> put 发生 key 冲突时被调用，<strong>evicted=false，key=此次 put 的 key，oldValue=被覆盖的冲突 value，newValue=此次 put 的 value</strong>。</li><li><strong>2.（trimToSize）</strong> trimToSize 的时候，只会被调用一次，就是最后一次被删除的最少访问数据带回来。<strong>evicted=true，key=最后一次被删除的 key，oldValue=最后一次被删除的 value，newValue=null（此次没有冲突，只是 remove）</strong>。</li><li><strong>3.（remove）</strong> remove的时候，存在对应 key，并且被成功删除后被调用。<strong>evicted=false，key=此次 put的 key，oldValue=此次删除的 value，newValue=null（此次没有冲突，只是 remove）</strong>。</li><li><strong>4.（get后半段，查询丢失后处理情景，不过建议忽略）</strong> get 的时候，正常的话不实现自定义 <code>create</code> 的话，代码上看 get 方法只会走一半，如果你实现了自定义的 <code>create(K key)</code> 方法，并且在 你 create 后的值放入 LruCache 中发生 key 冲突时被调用，<strong>evicted=false，key=此次 get 的 key，oldValue=被你自定义 create(key)后的 value，newValue=原本存在 map 里的 key-value</strong>。</li></ul><p>解释一下第四点吧：</p><ul><li>第四点是这样的，先 get(key)，然后没拿到，丢失。</li><li>如果你提供了 自定义的 <code>create(key)</code> 方法，那么 LruCache 会根据你的逻辑自造一个 value，但是当放入的时候发现冲突了，但是已经放入了。</li><li>此时，会将那个冲突的值再让回去覆盖，此时调用上述4.的 entryRemoved。</li></ul><p>因为 HashMap 在数据量大情况下，拿数据可能造成丢失，导致前半段查不到，你自定义的 <code>create(key)</code> 放入的时候发现又查到了<strong>（有冲突）</strong>。然后又急忙把原来的值放回去，此时你就白白create一趟，无所作为，还要走一遍entryRemoved。</p><p>综上就如同注释写的一样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 1.当被回收或者删掉时调用。该方法当value被回收释放存储空间时被remove调用</span></div><div class="line"><span class="comment"> * 或者替换条目值时put调用，默认实现什么都没做。</span></div><div class="line"><span class="comment"> * 2.该方法没用同步调用，如果其他线程访问缓存时，该方法也会执行。</span></div><div class="line"><span class="comment"> * 3.evicted=true：如果该条目被删除空间 （表示 进行了trimToSize or remove）  evicted=false：put冲突后 或 get里成功create后</span></div><div class="line"><span class="comment"> * 导致</span></div><div class="line"><span class="comment"> * 4.newValue!=null，那么则被put()或get()调用。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">entryRemoved</span><span class="params">(<span class="keyword">boolean</span> evicted, K key, V oldValue, V newValue)</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以参考我的 <a href="https://github.com/CaMnter/AndroidLife/blob/master/app/src/main/java/com/camnter/newlife/views/activity/lrucache/LruCacheActivity.java">demo</a> 里的 <code>entryRemoved</code> 。   </p><h3 id="4-9-LruCache-局部同步锁"><a href="#4-9-LruCache-局部同步锁" class="headerlink" title="4.9 LruCache 局部同步锁"></a>4.9 LruCache 局部同步锁</h3><p>在 <code>get</code>, <code>put</code>, <code>trimToSize</code>, <code>remove</code> 四个方法里的 <code>entryRemoved</code> 方法都不在同步块里。因为 <code>entryRemoved</code> 回调的参数都属于方法域参数，不会线程不安全。</p><blockquote><p>本地方法栈和程序计数器是线程隔离的数据区  </p></blockquote><h2 id="5-开源项目中的使用"><a href="#5-开源项目中的使用" class="headerlink" title="5. 开源项目中的使用"></a>5. 开源项目中的使用</h2><p><a href="https://github.com/square/picasso">square/picasso</a></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>LruCache重要的几点：</p><ul><li><p><strong>1.</strong>LruCache 是通过 LinkedHashMap 构造方法的第三个参数的 <code>accessOrder=true</code> 实现了 <code>LinkedHashMap</code> 的数据排序<strong>基于访问顺序</strong> （最近访问的数据会在链表尾部），在容量溢出的时候，将链表头部的数据移除。从而，实现了 LRU 数据缓存机制。</p></li><li><p><strong>2.</strong>LruCache 在内部的get、put、remove包括 trimToSize 都是安全的（因为都上锁了）。</p></li><li><p><strong>3.</strong>LruCache 自身并没有释放内存，将 LinkedHashMap 的数据移除了，如果数据还在别的地方被引用了，还是有泄漏问题，还需要手动释放内存。</p></li><li><p><strong>4.</strong>覆写 <code>entryRemoved</code> 方法能知道 LruCache 数据移除是是否发生了冲突，也可以去手动释放资源。</p></li><li><p><strong>5.</strong><code>maxSize</code> 和 <code>sizeOf(K key, V value)</code> 方法的覆写息息相关，必须相同单位。（ 比如 maxSize 是7MB，自定义的 sizeOf 计算每个数据大小的时候必须能算出与MB之间有联系的单位 ）</p></li></ul><h2 id="7-资源"><a href="#7-资源" class="headerlink" title="7. 资源"></a>7. 资源</h2><p><a href="https://github.com/CaMnter/AndroidLife/blob/master/app/src/main/java/com/camnter/newlife/views/activity/lrucache/LruCacheActivity.java">LruCacheActivity</a>    </p><p><a href="https://github.com/CaMnter/AndroidLife/blob/master/app/src/main/java/com/camnter/newlife/utils/cache/LruCache.java">LruCache 注释源码</a>   </p><p><a href="https://github.com/LittleFriendsGroup/AndroidSdkSourceAnalysis/blob/master/article/LruCache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.md">原文链接</a></p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>FloatingActionButton源码解析</title>
    <link href="https://github.com/itgoyo/2017/07/26/FloatingActionButton%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/FloatingActionButton源码解析.html</id>
    <published>2017-07-26T11:55:14.000Z</published>
    <updated>2017-11-23T13:06:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>FloatingActionButton（下文以fab代替）是android support design组件库中提供的一个视图控件，是material design设计中fab的官方实现。</p><p>此控件的官方介绍如下：</p><blockquote><p>Floating action buttons are used for a promoted action. They are distinguished by a circled icon floating above the UI and have motion behaviors that include morphing, launching, and a transferring anchor point.</p></blockquote><p>关于该控件的设计规范及使用场景请参考文档：</p><blockquote><p><a href="http://www.google.com/design/spec/components/buttons-floating-action-button.html#" target="_blank" rel="external">http://www.google.com/design/spec/components/buttons-floating-action-button.html#</a></p></blockquote><p>如果你还不了解design组件库，请参考官方博客:</p><blockquote><p><a href="http://android-developers.blogspot.hk/2015/05/android-design-support-library.html" target="_blank" rel="external">http://android-developers.blogspot.hk/2015/05/android-design-support-library.html</a></p></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>源码版本:23.3.0</p><p><img src="./01.png" alt="类图"></p><p>fab间接继承自<code>ImageView</code>（<code>ImageButton</code>是<code>ImageView</code>的子类），因而拥有<code>ImageView</code>的大部分特性。但是其内部还是做了很多定制，我们一一来看。</p><h3 id="1-fab的自定义属性、背景着色相关"><a href="#1-fab的自定义属性、背景着色相关" class="headerlink" title="1. fab的自定义属性、背景着色相关"></a>1. fab的自定义属性、背景着色相关</h3><p>从构造器开始：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FloatingActionButton</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line"> <span class="comment">//检查是否使用Theme.Appcompat主题</span></div><div class="line">        ThemeUtils.checkAppCompatTheme(context);</div><div class="line">        <span class="comment">//拿到自定义属性并赋值</span></div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs,</div><div class="line">                R.styleable.FloatingActionButton, defStyleAttr,</div><div class="line">                R.style.Widget_Design_FloatingActionButton);</div><div class="line">       ...</div><div class="line">        a.recycle();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> maxImageSize = (<span class="keyword">int</span>) getResources().getDimension(R.dimen.design_fab_image_size);</div><div class="line">        mImagePadding = (getSizeDimension() - maxImageSize) / <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">//背景着色</span></div><div class="line">        getImpl().setBackgroundDrawable(mBackgroundTint, mBackgroundTintMode,</div><div class="line">                mRippleColor, mBorderWidth);</div><div class="line">      <span class="comment">//绘制阴影</span></div><div class="line">        getImpl().setElevation(elevation);</div><div class="line">...</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>构造器中主要是拿到用户设置的自定义属性，比如着色、波纹颜色、大小等等,一共有以下几个属性可以定义。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"FloatingActionButton"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"backgroundTint"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"backgroundTintMode"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"rippleColor"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"fabSize"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"normal"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"mini"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">attr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"elevation"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"dimension"</span> <span class="attr">name</span>=<span class="string">"pressedTranslationZ"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"dimension"</span> <span class="attr">name</span>=<span class="string">"borderWidth"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">format</span>=<span class="string">"boolean"</span> <span class="attr">name</span>=<span class="string">"useCompatPadding"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div></pre></td></tr></table></figure><p>属性的默认值定义如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Widget.Design.FloatingActionButton"</span> <span class="attr">parent</span>=<span class="string">"android:Widget"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@drawable/design_fab_background<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"backgroundTint"</span>&gt;</span>?attr/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"fabSize"</span>&gt;</span>normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"elevation"</span>&gt;</span>@dimen/design_fab_elevation<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"pressedTranslationZ"</span>&gt;</span>@dimen/design_fab_translation_z_pressed<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"rippleColor"</span>&gt;</span>?attr/colorControlHighlight<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"borderWidth"</span>&gt;</span>@dimen/design_fab_border_width<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure><p>需要注意的是<code>android:background</code>属性，这里指定了background为<code>design_fab_background</code>,并且不允许改变:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackgroundDrawable</span><span class="params">(Drawable background)</span> </span>&#123;</div><div class="line">      Log.i(LOG_TAG, <span class="string">"Setting a custom background is not supported."</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>那么我们来看下这个background长啥样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:shape</span>=<span class="string">"oval"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@android:color/white"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure><p>很显然，fab的形状固定为圆形都是因为这个background。那么这里指定了背景色为白色，那是不是fab只能是白色背景呢？当然不是，还有我们牛逼的backgroundTint(即背景着色)，tint是android 5.x引进的一个新特性，可以动态地给drawable资源着色，其原理就是通过给控件设置colorFilter:</p><p>drawable.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColorFilter</span><span class="params">(@ColorInt <span class="keyword">int</span> color, @NonNull PorterDuff.Mode mode)</span> </span>&#123;</div><div class="line">        setColorFilter(<span class="keyword">new</span> PorterDuffColorFilter(color, mode));</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>默认的着色模式为SRC_IN(取交集、显示上层，故底层白色会被忽略)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> PorterDuff.Mode DEFAULT_TINT_MODE = PorterDuff.Mode.SRC_IN;</div></pre></td></tr></table></figure><p>在fab构造的时候，会指定着色为<code>？attr/colorAccent</code>，即当前主题的<code>colorAccent</code>属性值。<br>然后执行如下代码，进行着色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">getImpl().setBackgroundDrawable(mBackgroundTint, mBackgroundTintMode,</div><div class="line">               mRippleColor, mBorderWidth);</div></pre></td></tr></table></figure><p>因为不同版本间的实现略有不同，所以这里会根据不同版本创建不同的<code>FloatingActionButtonImpl</code>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> FloatingActionButtonImpl <span class="title">createImpl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> sdk = Build.VERSION.SDK_INT;</div><div class="line">        <span class="keyword">if</span> (sdk &gt;= <span class="number">21</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FloatingActionButtonLollipop(<span class="keyword">this</span>, <span class="keyword">new</span> ShadowDelegateImpl());</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sdk &gt;= <span class="number">14</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FloatingActionButtonIcs(<span class="keyword">this</span>, <span class="keyword">new</span> ShadowDelegateImpl());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FloatingActionButtonEclairMr1(<span class="keyword">this</span>, <span class="keyword">new</span> ShadowDelegateImpl());</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>以5.x为例，其setBackgroundDrawable实现代码如下:</p><p>先创建着色的背景drawable。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">GradientDrawable <span class="title">createShapeDrawable</span><span class="params">()</span> </span>&#123;</div><div class="line">       GradientDrawable d = <span class="keyword">new</span> GradientDrawable();</div><div class="line">       d.setShape(GradientDrawable.OVAL);</div><div class="line">       d.setColor(Color.WHITE);</div><div class="line">       <span class="keyword">return</span> d;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>再对此drawable设置tint：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBackgroundDrawable</span><span class="params">(ColorStateList backgroundTint,</span></span></div><div class="line"><span class="function"><span class="params">            PorterDuff.Mode backgroundTintMode, <span class="keyword">int</span> rippleColor, <span class="keyword">int</span> borderWidth)</span> </span>&#123;</div><div class="line">        <span class="comment">// Now we need to tint the shape background with the tint</span></div><div class="line">        mShapeDrawable = DrawableCompat.wrap(createShapeDrawable());</div><div class="line"></div><div class="line">        <span class="comment">//着色，这里会其实就是设置了下colorFilter</span></div><div class="line">        DrawableCompat.setTintList(mShapeDrawable, backgroundTint);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (backgroundTintMode != <span class="keyword">null</span>) &#123;</div><div class="line">            DrawableCompat.setTintMode(mShapeDrawable, backgroundTintMode);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Drawable rippleContent;</div><div class="line">        <span class="keyword">if</span> (borderWidth &gt; <span class="number">0</span>) &#123;</div><div class="line">            mBorderDrawable = createBorderDrawable(borderWidth, backgroundTint);</div><div class="line">            rippleContent = <span class="keyword">new</span> LayerDrawable(<span class="keyword">new</span> Drawable[]&#123;mBorderDrawable, mShapeDrawable&#125;);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mBorderDrawable = <span class="keyword">null</span>;</div><div class="line">            rippleContent = mShapeDrawable;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mRippleDrawable = <span class="keyword">new</span> RippleDrawable(ColorStateList.valueOf(rippleColor),</div><div class="line">                rippleContent, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">        mContentBackground = mRippleDrawable;</div><div class="line"></div><div class="line">        mShadowViewDelegate.setBackgroundDrawable(mRippleDrawable);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>经过着色，fab就呈现出我们想要的颜色啦。</p><h3 id="2-fab的大小"><a href="#2-fab的大小" class="headerlink" title="2. fab的大小"></a>2. fab的大小</h3><p>再来看fab的大小，fab有两种大小，一种是<code>NORMAL</code>，一种是<code>MINI</code>，实际大小分别是56dp和40dp，其定义可以在design库的values.xml中看到。</p><p>fab如何控制控件大小只有这两种规格呢(这样说不准确，事实上你可以通过设置fab的<code>layout_width</code>/<code>layout_height</code>指定为任意大小，但是我们最好按照MD规范来)?必然是通过复写<code>onMeasure</code>啦:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">      <span class="comment">//我们希望的大小</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> preferredSize = getSizeDimension();</div><div class="line"> <span class="comment">//最终测量的大小</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> w = resolveAdjustedSize(preferredSize, widthMeasureSpec);</div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> h = resolveAdjustedSize(preferredSize, heightMeasureSpec);</div><div class="line"></div><div class="line">      <span class="comment">//取小值，保证最后绘制的是圆形</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> d = Math.min(w, h);</div><div class="line"></div><div class="line">      <span class="comment">// We add the shadow's padding to the measured dimension</span></div><div class="line">      setMeasuredDimension(</div><div class="line">              d + mShadowPadding.left + mShadowPadding.right,</div><div class="line">              d + mShadowPadding.top + mShadowPadding.bottom);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>其中<code>getSizeDimension</code>方法计算出来的是我们期望的大小:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getSizeDimension</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (mSize) &#123;</div><div class="line">            <span class="keyword">case</span> SIZE_MINI:</div><div class="line">                <span class="keyword">return</span> getResources().getDimensionPixelSize(R.dimen.design_fab_size_mini);<span class="comment">//40dp</span></div><div class="line">            <span class="keyword">case</span> SIZE_NORMAL:</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> getResources().getDimensionPixelSize(R.dimen.design_fab_size_normal);<span class="comment">//56dp</span></div><div class="line"></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>但是最终的值还是得看我们设置的LayoutParams。关于控件测量相关内容不在此文介绍范围内，大家可以自行google。</p><h3 id="3-fab的动画"><a href="#3-fab的动画" class="headerlink" title="3.fab的动画"></a>3.fab的动画</h3><p>fab还支持fab以动画的方式显现/隐藏，通常和AppBarLayout一起使用，可以通过<code>hide()</code>/<code>show()</code>两个方法控制。</p><p>那么动画是如何实现的呢:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(OnVisibilityChangedListener listener, <span class="keyword">boolean</span> fromUser)</span> </span>&#123;</div><div class="line">        getImpl().show(wrapOnVisibilityChangedListener(listener), fromUser);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hide</span><span class="params">(@Nullable OnVisibilityChangedListener listener, <span class="keyword">boolean</span> fromUser)</span> </span>&#123;</div><div class="line">    getImpl().hide(wrapOnVisibilityChangedListener(listener), fromUser);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里因为要兼容不同版本，所以具体实现也交给了不同的fab实现类。3.x之后很好办，直接使用属性动画，如果是3.x之前的话，那么只能使用传统的Animation了</p><p>以<code>hide()</code>为例，使用属性动画较为简单，直接使用<code>View#animate()</code>即可链式调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hide</span><span class="params">(@Nullable <span class="keyword">final</span> InternalVisibilityChangedListener listener, <span class="keyword">final</span> <span class="keyword">boolean</span> fromUser)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mIsHiding || mView.getVisibility() != View.VISIBLE) &#123;</div><div class="line">            <span class="comment">// A hide animation is in progress, or we're already hidden. Skip the call</span></div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onHidden();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!ViewCompat.isLaidOut(mView) || mView.isInEditMode()) &#123;</div><div class="line">            <span class="comment">// If the view isn't laid out, or we're in the editor, don't run the animation</span></div><div class="line">            mView.internalSetVisibility(View.GONE, fromUser);</div><div class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                listener.onHidden();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mView.animate().cancel();</div><div class="line">            mView.animate()</div><div class="line">                    .scaleX(<span class="number">0f</span>)</div><div class="line">                    .scaleY(<span class="number">0f</span>)</div><div class="line">                    .alpha(<span class="number">0f</span>)</div><div class="line">                    .setDuration(SHOW_HIDE_ANIM_DURATION)</div><div class="line">                    .setInterpolator(AnimationUtils.FAST_OUT_LINEAR_IN_INTERPOLATOR)</div><div class="line">                    .setListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</div><div class="line">                        <span class="keyword">private</span> <span class="keyword">boolean</span> mCancelled;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                            mIsHiding = <span class="keyword">true</span>;</div><div class="line">                            mCancelled = <span class="keyword">false</span>;</div><div class="line">                            mView.internalSetVisibility(View.VISIBLE, fromUser);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                            mIsHiding = <span class="keyword">false</span>;</div><div class="line">                            mCancelled = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                            mIsHiding = <span class="keyword">false</span>;</div><div class="line">                            <span class="keyword">if</span> (!mCancelled) &#123;</div><div class="line">                                mView.internalSetVisibility(View.GONE, fromUser);</div><div class="line">                                <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                                    listener.onHidden();</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>如果使用传统动画的话，则先在xml中定义好动画，然后构造<code>Animation</code>实例，启动动画。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">hide</span><span class="params">(@Nullable <span class="keyword">final</span> InternalVisibilityChangedListener listener, <span class="keyword">final</span> <span class="keyword">boolean</span> fromUser)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mIsHiding || mView.getVisibility() != View.VISIBLE) &#123;</div><div class="line">           <span class="comment">// A hide animation is in progress, or we're already hidden. Skip the call</span></div><div class="line">           <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">               listener.onHidden();</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       Animation anim = android.view.animation.AnimationUtils.loadAnimation(</div><div class="line">               mView.getContext(), R.anim.design_fab_out);</div><div class="line">       anim.setInterpolator(AnimationUtils.FAST_OUT_LINEAR_IN_INTERPOLATOR);</div><div class="line">       anim.setDuration(SHOW_HIDE_ANIM_DURATION);</div><div class="line">       anim.setAnimationListener(<span class="keyword">new</span> AnimationUtils.AnimationListenerAdapter() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">               mIsHiding = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">               mIsHiding = <span class="keyword">false</span>;</div><div class="line">               mView.internalSetVisibility(View.GONE, fromUser);</div><div class="line">               <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">                   listener.onHidden();</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       mView.startAnimation(anim);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h3 id="4-fab与CoordinatorLayout的交互"><a href="#4-fab与CoordinatorLayout的交互" class="headerlink" title="4. fab与CoordinatorLayout的交互"></a>4. fab与CoordinatorLayout的交互</h3><blockquote><p>这块内容因为与<code>CoordinatorLayout</code>/<code>CoordinatorLayout#Behavior</code>有很大关联，如果不熟悉，请先google相关资料。本文假设读者对这块内容已经有一定理解。</p></blockquote><p>fab并不直接与<code>CoordinatorLayout</code>联系，而是通过<code>CoordinatorLayout#Behavior</code>作为桥梁。<code>CoordinatorLayout</code>类通过<code>CoordinatorLayout#Behavior</code>可以间接控制其直系子View的行为，能控制什么行为？View测量、布局、touch事件拦截、监听、NestedScroll等等。是不是很屌。</p><p>fab内部实现了<code>CoordinatorLayout#Behavior</code>抽象类。该抽象类有如下接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Behavior</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">View</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(CoordinatorLayout parent, V child, MotionEvent ev)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(CoordinatorLayout parent, V child, MotionEvent ev)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">       ...</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * Determine whether the supplied child view has another specific sibling view as a</span></div><div class="line"><span class="comment">         * layout dependency.</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * &lt;p&gt;This method will be called at least once in response to a layout request. If it</span></div><div class="line"><span class="comment">         * returns true for a given child and dependency view pair, the parent CoordinatorLayout</span></div><div class="line"><span class="comment">         * will:&lt;/p&gt;</span></div><div class="line"><span class="comment">         * &lt;ol&gt;</span></div><div class="line"><span class="comment">         *     &lt;li&gt;Always lay out this child after the dependent child is laid out, regardless</span></div><div class="line"><span class="comment">         *     of child order.&lt;/li&gt;</span></div><div class="line"><span class="comment">         *     &lt;li&gt;Call &#123;<span class="doctag">@link</span> #onDependentViewChanged&#125; when the dependency view's layout or</span></div><div class="line"><span class="comment">         *     position changes.&lt;/li&gt;</span></div><div class="line"><span class="comment">         * &lt;/ol&gt;</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, V child, View dependency)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * Respond to a change in a child's dependent view</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * &lt;p&gt;This method is called whenever a dependent view changes in size or position outside</span></div><div class="line"><span class="comment">         * of the standard layout flow. A Behavior may use this method to appropriately update</span></div><div class="line"><span class="comment">         * the child view in response.&lt;/p&gt;</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * &lt;p&gt;A view's dependency is determined by</span></div><div class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> #layoutDependsOn(CoordinatorLayout, android.view.View, android.view.View)&#125; or</span></div><div class="line"><span class="comment">         * if &#123;<span class="doctag">@code</span> child&#125; has set another view as it's anchor.&lt;/p&gt;</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * &lt;p&gt;Note that if a Behavior changes the layout of a child via this method, it should</span></div><div class="line"><span class="comment">         * also be able to reconstruct the correct position in</span></div><div class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> #onLayoutChild(CoordinatorLayout, android.view.View, int) onLayoutChild&#125;.</span></div><div class="line"><span class="comment">         * &lt;code&gt;onDependentViewChanged&lt;/code&gt; will not be called during normal layout since</span></div><div class="line"><span class="comment">         * the layout of each child view will always happen in dependency order.&lt;/p&gt;</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * &lt;p&gt;If the Behavior changes the child view's size or position, it should return true.</span></div><div class="line"><span class="comment">         * The default implementation returns false.&lt;/p&gt;</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, V child, View dependency)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * Called when the parent CoordinatorLayout is about the lay out the given child view.</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * &lt;p&gt;This method can be used to perform custom or modified layout of a child view</span></div><div class="line"><span class="comment">         * in place of the default child layout behavior. The Behavior's implementation can</span></div><div class="line"><span class="comment">         * delegate to the standard CoordinatorLayout measurement behavior by calling</span></div><div class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> CoordinatorLayout#onLayoutChild(android.view.View, int)</span></div><div class="line"><span class="comment">         * parent.onLayoutChild&#125;.&lt;/p&gt;</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * &lt;p&gt;If a Behavior implements</span></div><div class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> #onDependentViewChanged(CoordinatorLayout, android.view.View, android.view.View)&#125;</span></div><div class="line"><span class="comment">         * to change the position of a view in response to a dependent view changing, it</span></div><div class="line"><span class="comment">         * should also implement &lt;code&gt;onLayoutChild&lt;/code&gt; in such a way that respects those</span></div><div class="line"><span class="comment">         * dependent views. &lt;code&gt;onLayoutChild&lt;/code&gt; will always be called for a dependent view</span></div><div class="line"><span class="comment">         * &lt;em&gt;after&lt;/em&gt; its dependency has been laid out.&lt;/p&gt;</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLayoutChild</span><span class="params">(CoordinatorLayout parent, V child, <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      ...</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, V child, View target,</span></span></div><div class="line"><span class="function"><span class="params">                <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed, <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span> </span>&#123;</div><div class="line">            <span class="comment">// Do nothing</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>看到这个抽象类，有两点需要注意:</p><ol><li>此抽象类并无抽象方法，也即子类可选择任何想复写的方法进行复写。</li><li>此抽象类接受一个泛型。该泛型需要是View的子类。</li></ol><p>fab实现此抽象类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Behavior</span> <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span>&lt;<span class="title">FloatingActionButton</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure><p>有选择性地实现了三个方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent,</span></span></div><div class="line"><span class="function"><span class="params">                FloatingActionButton child, View dependency)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, FloatingActionButton child,</span></span></div><div class="line"><span class="function"><span class="params">                View dependency)</span></span>;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLayoutChild</span><span class="params">(CoordinatorLayout parent, FloatingActionButton child,</span></span></div><div class="line"><span class="function"><span class="params">                <span class="keyword">int</span> layoutDirection)</span></span>;</div></pre></td></tr></table></figure><p>fab为啥要实现<code>Behavior</code>?主要是为了配合其他控件完成一些复杂的交互，比较经典的像这个:</p><p><a href="http://material-design.storage.googleapis.com/publish/material_v_3/material_ext_publish/0B6Okdz75tqQsLWFucDNlYWEyeW8/components_snackbar_usage_fabdo_002.webm" target="_blank" rel="external">fab动画效果</a></p><p>fab需要在<code>snackBar</code>弹出的时候自动向上平移，这就得知道SnackBar的状态了，实现<code>Behavior</code>让fab有机会监听到其他<code>CoordinatorLayout</code>子View的状态，并根据状态更新自己。</p><p>复写<code>layoutDependsOn</code>方法可以告诉<code>CoordinatorLayout</code>我对哪个View感兴趣，</p><p>这里当然是SnackBar了。（注意哦，SnackBar最终展现的是SnackbarLayout，SnackBar本身并不是View）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> SNACKBAR_BEHAVIOR_ENABLED = Build.VERSION.SDK_INT &gt;= <span class="number">11</span>;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent,</span></span></div><div class="line"><span class="function"><span class="params">                FloatingActionButton child, View dependency)</span> </span>&#123;</div><div class="line">            <span class="comment">// We're dependent on all SnackbarLayouts (if enabled)</span></div><div class="line">            <span class="keyword">return</span> SNACKBAR_BEHAVIOR_ENABLED &amp;&amp; dependency <span class="keyword">instanceof</span> Snackbar.SnackbarLayout;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><p>为什么API LEVEL要大于11呢？因为google偷懒想直接使用属性动画。</p><p>前面告诉了<code>CoordinatorLayout</code>fab对<code>SnackBar</code>比较感兴趣,那么当SnackBar状态改变的时候，<code>CoordinatorLayout</code>就会通过<code>onDependentViewChanged</code>回调通知fab:</p><p>fab就可以更新自己的UI拉（这里当然是平移喽）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, FloatingActionButton child,</span></span></div><div class="line"><span class="function"><span class="params">                View dependency)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (dependency <span class="keyword">instanceof</span> Snackbar.SnackbarLayout) &#123;</div><div class="line">                updateFabTranslationForSnackbar(parent, child, dependency);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dependency <span class="keyword">instanceof</span> AppBarLayout) &#123;</div><div class="line">                <span class="comment">// If we're depending on an AppBarLayout we will show/hide it automatically</span></div><div class="line">                <span class="comment">// if the FAB is anchored to the AppBarLayout</span></div><div class="line">                updateFabVisibility(parent, (AppBarLayout) dependency, child);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><p>如果是SnackBar状态变化了，那么fab就会根据情况进行平移：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateFabTranslationForSnackbar</span><span class="params">(CoordinatorLayout parent,</span></span></div><div class="line"><span class="function"><span class="params">                <span class="keyword">final</span> FloatingActionButton fab, View snackbar)</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> targetTransY = getFabTranslationYForSnackbar(parent, fab);</div><div class="line">            <span class="keyword">if</span> (mFabTranslationY == targetTransY) &#123;</div><div class="line">                <span class="comment">// We're already at (or currently animating to) the target value, return...</span></div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> currentTransY = ViewCompat.getTranslationY(fab);</div><div class="line"></div><div class="line">            <span class="comment">// Make sure that any current animation is cancelled</span></div><div class="line">            <span class="keyword">if</span> (mFabTranslationYAnimator != <span class="keyword">null</span> &amp;&amp; mFabTranslationYAnimator.isRunning()) &#123;</div><div class="line">                mFabTranslationYAnimator.cancel();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (fab.isShown()</div><div class="line">                    &amp;&amp; Math.abs(currentTransY - targetTransY) &gt; (fab.getHeight() * <span class="number">0.667f</span>)) &#123;</div><div class="line">                <span class="comment">// If the FAB will be travelling by more than 2/3 of it's height, let's animate</span></div><div class="line">                <span class="comment">// it instead</span></div><div class="line">                <span class="keyword">if</span> (mFabTranslationYAnimator == <span class="keyword">null</span>) &#123;</div><div class="line">                    mFabTranslationYAnimator = ViewUtils.createAnimator();</div><div class="line">                    mFabTranslationYAnimator.setInterpolator(</div><div class="line">                            AnimationUtils.FAST_OUT_SLOW_IN_INTERPOLATOR);</div><div class="line">                    mFabTranslationYAnimator.setUpdateListener(</div><div class="line">                            <span class="keyword">new</span> ValueAnimatorCompat.AnimatorUpdateListener() &#123;</div><div class="line">                                <span class="meta">@Override</span></div><div class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimatorCompat animator)</span> </span>&#123;</div><div class="line">                                    ViewCompat.setTranslationY(fab,</div><div class="line">                                            animator.getAnimatedFloatValue());</div><div class="line">                                &#125;</div><div class="line">                            &#125;);</div><div class="line">                &#125;</div><div class="line">                mFabTranslationYAnimator.setFloatValues(currentTransY, targetTransY);</div><div class="line">                mFabTranslationYAnimator.start();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Now update the translation Y</span></div><div class="line">                ViewCompat.setTranslationY(fab, targetTransY);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mFabTranslationY = targetTransY;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><p>代码里的注释很多，我就不解释了。</p><p>前面说到AppBarLayout和fab一起使用可以完成另一个效果，即AppBarLayout伸缩时，fab也可以以动画的形式显现、隐藏，其实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">updateFabVisibility</span><span class="params">(CoordinatorLayout parent,</span></span></div><div class="line"><span class="function"><span class="params">                AppBarLayout appBarLayout, FloatingActionButton child)</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> CoordinatorLayout.LayoutParams lp =</div><div class="line">                    (CoordinatorLayout.LayoutParams) child.getLayoutParams();</div><div class="line">            <span class="comment">//注意到我们必须为fab指定layout_anchor为appBarLayout                    </span></div><div class="line">            <span class="keyword">if</span> (lp.getAnchorId() != appBarLayout.getId()) &#123;</div><div class="line">                <span class="comment">// The anchor ID doesn't match the dependency, so we won't automatically</span></div><div class="line">                <span class="comment">// show/hide the FAB</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (child.getUserSetVisibility() != VISIBLE) &#123;</div><div class="line">                <span class="comment">// The view isn't set to be visible so skip changing it's visibility</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mTmpRect == <span class="keyword">null</span>) &#123;</div><div class="line">                mTmpRect = <span class="keyword">new</span> Rect();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// First, let's get the visible rect of the dependency</span></div><div class="line">            <span class="keyword">final</span> Rect rect = mTmpRect;</div><div class="line">            ViewGroupUtils.getDescendantRect(parent, appBarLayout, rect);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (rect.bottom &lt;= appBarLayout.getMinimumHeightForVisibleOverlappingContent()) &#123;</div><div class="line">                <span class="comment">// If the anchor's bottom is below the seam, we'll animate our FAB out</span></div><div class="line">                child.hide(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Else, we'll animate our FAB back in</span></div><div class="line">                child.show(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><p>除此之外，<code>fab#Behavior</code>还实现了<code>onLayoutChild</code>,主要是为了根据AppBarLayout的当前状态来判断自己是否需要隐藏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLayoutChild</span><span class="params">(CoordinatorLayout parent, FloatingActionButton child,</span></span></div><div class="line"><span class="function"><span class="params">               <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</div><div class="line">           <span class="comment">// First, lets make sure that the visibility of the FAB is consistent</span></div><div class="line">           <span class="keyword">final</span> List&lt;View&gt; dependencies = parent.getDependencies(child);</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = dependencies.size(); i &lt; count; i++) &#123;</div><div class="line">               <span class="keyword">final</span> View dependency = dependencies.get(i);</div><div class="line">               <span class="keyword">if</span> (dependency <span class="keyword">instanceof</span> AppBarLayout</div><div class="line">                       &amp;&amp; updateFabVisibility(parent, (AppBarLayout) dependency, child)) &#123;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// Now let the CoordinatorLayout lay out the FAB</span></div><div class="line">           parent.onLayoutChild(child, layoutDirection);</div><div class="line">           <span class="comment">// Now offset it if needed</span></div><div class="line">           offsetIfNeeded(parent, child);</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div></pre></td></tr></table></figure><p>此方法会在<code>CoordinatorLayout</code>对孩子布局的时候进行调用(即<code>CoordinatorLayout#onLayout</code>)，<code>CoordinatorLayout</code>会检查所有的直系孩子，是否设置了Behavior，如果设置了，那么就执行其<code>onLayoutChild</code>方法:</p><p>CoordinatorLayout#onLayout</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> layoutDirection = ViewCompat.getLayoutDirection(<span class="keyword">this</span>);</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> childCount = mDependencySortedChildren.size();</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">           <span class="keyword">final</span> View child = mDependencySortedChildren.get(i);</div><div class="line">           <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">           <span class="keyword">final</span> Behavior behavior = lp.getBehavior();</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (behavior == <span class="keyword">null</span> || !behavior.onLayoutChild(<span class="keyword">this</span>, child, layoutDirection)) &#123;</div><div class="line">               onLayoutChild(child, layoutDirection);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>如果该Behavior实现了OnLayoutChild，并且返回了true，那么将不会执行<code>CoordinatorLayout #onLayoutChild</code>,否则执行默认的布局方案。<br>最后一点，这里的Behavior如何生效的呢？通过注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CoordinatorLayout</span>.DefaultBehavior(FloatingActionButton.Behavior.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatingActionButton</span> <span class="keyword">extends</span> <span class="title">VisibilityAwareImageButton</span> </span>&#123;</div></pre></td></tr></table></figure><p><code>CoordinatorLayout</code>在解析孩子的<code>LayoutParams</code>时，会check有无注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function">LayoutParams <span class="title">getResolvedLayoutParams</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> LayoutParams result = (LayoutParams) child.getLayoutParams();</div><div class="line">      <span class="keyword">if</span> (!result.mBehaviorResolved) &#123;</div><div class="line">          Class&lt;?&gt; childClass = child.getClass();</div><div class="line">          DefaultBehavior defaultBehavior = <span class="keyword">null</span>;</div><div class="line">          <span class="keyword">while</span> (childClass != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                  (defaultBehavior = childClass.getAnnotation(DefaultBehavior.class)) == <span class="keyword">null</span>) &#123;</div><div class="line">              childClass = childClass.getSuperclass();</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">if</span> (defaultBehavior != <span class="keyword">null</span>) &#123;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  result.setBehavior(defaultBehavior.value().newInstance());</div><div class="line">              &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                  Log.e(TAG, <span class="string">"Default behavior class "</span> + defaultBehavior.value().getName() +</div><div class="line">                          <span class="string">" could not be instantiated. Did you forget a default constructor?"</span>, e);</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">          result.mBehaviorResolved = <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>至此<code>fab</code>解析完毕，谢谢观看！</p><p>如有疑惑，可以issue。</p><p>微博：<a href="http://weibo.com/u/2331178381?is_all=1" target="_blank" rel="external">楚奕RX</a></p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">The MIT License (MIT)</div><div class="line"></div><div class="line">Copyright (c) 2016 Rowandjj</div><div class="line"></div><div class="line">Permission is hereby granted, free of charge, to any person obtaining a copy</div><div class="line">of this software and associated documentation files (the &quot;Software&quot;), to deal</div><div class="line">in the Software without restriction, including without limitation the rights</div><div class="line">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</div><div class="line">copies of the Software, and to permit persons to whom the Software is</div><div class="line">furnished to do so, subject to the following conditions:</div><div class="line"></div><div class="line">The above copyright notice and this permission notice shall be included in all</div><div class="line">copies or substantial portions of the Software.</div><div class="line"></div><div class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</div><div class="line">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</div><div class="line">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</div><div class="line">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</div><div class="line">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</div><div class="line">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</div><div class="line">SOFTWARE.</div></pre></td></tr></table></figure><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>CoordinatorLayout源码分析</title>
    <link href="https://github.com/itgoyo/2017/07/26/CoordinatorLayout%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/CoordinatorLayout源码分析.html</id>
    <published>2017-07-26T11:53:52.000Z</published>
    <updated>2017-11-23T13:06:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><h1 id="CoordinatorLayout-源码分析"><a href="#CoordinatorLayout-源码分析" class="headerlink" title="CoordinatorLayout 源码分析"></a>CoordinatorLayout 源码分析</h1><p><code>CoordinatorLayout</code>有一些很有意思的特性，设置anchor、NestedScroll配合Toolbar/TabLayout的显隐or伸缩、Fab的移动等。今天咱就来一探究竟！</p><h2 id="1-从LayoutParam开始"><a href="#1-从LayoutParam开始" class="headerlink" title="1. 从LayoutParam开始"></a>1. 从LayoutParam开始</h2><p> <code>CoordinatorLayout.LayoutParam</code>中有一些不太一样的属性和元素，在此先进行介绍。</p><h3 id="1-1-特殊属性"><a href="#1-1-特殊属性" class="headerlink" title="1.1 特殊属性"></a>1.1 特殊属性</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">对应xml属性</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left"><code>AndchorId</code></td><td style="text-align:left"><code>layout_anchor</code> &amp;<code>layout_anchorGravity</code></td><td style="text-align:left">布局时根据自身<code>gravity</code> 与 <code>layout_anchorGravity</code>放置在被anchor的View中</td></tr><tr><td style="text-align:left"><code>Behavior</code></td><td style="text-align:left"><code>layout_behavior</code></td><td style="text-align:left">辅助Coordinator对View进行layout、nestedScroll的处理</td></tr><tr><td style="text-align:left"><code>KeyLine</code></td><td style="text-align:left"><code>layout_keyline</code> &amp; <code>keylines</code></td><td style="text-align:left">给Coordinator设置了<code>keylines</code>（整数数组）后，可以为子View设置<code>layout_keyline=&quot;i&quot;</code>使其的水平位置根据对应<code>keylines[i]</code>进行layout。</td></tr><tr><td style="text-align:left"><code>LastChildRect</code></td><td style="text-align:left">无</td><td style="text-align:left">记录每一次Layout的位置，从而判断是否新的一帧改变了位置</td></tr></tbody></table><p>注：</p><p><code>keyline</code>是一个非常奇怪的属性，我在看源码时才第一次看到到这玩意，网上的资料也非常之少。分析下来，就是如果设置了keyline，那么gravity就会被无视，直接放置在对应的水平位置keyline上。CoordinatorLayout里面也没有其他的特性是根据keyline实现的，个人认为没卵用，本文对它的分析基本都会略过。</p><h3 id="1-2-依赖关系"><a href="#1-2-依赖关系" class="headerlink" title="1.2 依赖关系"></a>1.2 依赖关系</h3><p>假设此时有两个View: <strong>A</strong> 和<strong>B</strong>，那么有两种情况会导致依赖关系：</p><ul><li><strong>A</strong>的<code>anchor</code>是<strong>B</strong> ；</li><li><strong>A</strong>的<code>behavior</code>对<strong>B</strong>有依赖（比如<code>FloatingActionButton</code>依赖<code>SnackBar</code>)。</li></ul><p>依赖关系建立的前提是两个View在同一个<code>Coordinatorlayout</code>中。</p><p><code>CoordinatorLayout</code>中维护了一个<code>mDependencySortedChildren</code>列表，里面含有所有的子View，<strong>按依赖关系排序，被依赖者排在前面</strong>。我们可以看一下用来排序的<code>Comparator</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Comparator&lt;View&gt; mLayoutDependencyComparator = <span class="keyword">new</span> Comparator&lt;View&gt;() &#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(View lhs, View rhs)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (lhs == rhs) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (((LayoutParams) lhs.getLayoutParams()).dependsOn(</div><div class="line">               CoordinatorLayout.<span class="keyword">this</span>, lhs, rhs)) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (((LayoutParams) rhs.getLayoutParams()).dependsOn(</div><div class="line">               CoordinatorLayout.<span class="keyword">this</span>, rhs, lhs)) &#123;</div><div class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><blockquote><p>注意，在建立<code>mDependencySortedChildren</code>并排序完成之后（在measure的第一步处理完成），每次对子View的遍历<strong>都是通过它进行顺序遍历</strong>，保证了被依赖的View最先被处理。</p></blockquote><h3 id="1-3-Behavior"><a href="#1-3-Behavior" class="headerlink" title="1.3 Behavior"></a>1.3 Behavior</h3><p>在<code>CoordinatorLayout</code>中定义了<code>Behavior</code>类，它是用来辅助layout的工具。如果一个CoordinatorLayout的直接子View设置了<code>Behavior</code>（或者通过类注解<code>@DefaultBehavior</code>指定<code>Behavior</code>），则该Behavior会储存在该View的<code>LayoutParam</code>中。</p><blockquote><p>注意：不是CoordinatorLayout的直接子View，设置Behavior是无效的。你可以看到任何一处对于Behavior的处理都是直接<code>getChildCount（）</code>遍历。</p></blockquote><p>在Behavior中有几类功能，我们一一进行介绍：</p><h4 id="1-3-1-触摸响应类"><a href="#1-3-1-触摸响应类" class="headerlink" title="1.3.1 触摸响应类"></a>1.3.1 触摸响应类</h4><p><code>Behavior</code>中有两个函数：<code>onInterceptTouchEvent</code>、 <code>onTouchEvent</code>。在CoordinatorLayout每次触发对应事件的时候会选择一个最适合的子View的Behavior执行对应函数。我们来看一下CoordinatorLayout是怎么分发和处理Touch事件的：</p><p><strong><em>intercept</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">   MotionEvent cancelEvent = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(ev);</div><div class="line"></div><div class="line">   <span class="comment">// 重置响应的Behavoir</span></div><div class="line">   <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">       resetTouchBehaviors();</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 在这里选择一个最佳Behavior进行处理</span></div><div class="line">   <span class="keyword">final</span> <span class="keyword">boolean</span> intercepted = performIntercept(ev, TYPE_ON_INTERCEPT);</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (cancelEvent != <span class="keyword">null</span>) &#123;</div><div class="line">       cancelEvent.recycle();</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 重置响应的Behavior</span></div><div class="line">   <span class="keyword">if</span> (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) &#123;</div><div class="line">       resetTouchBehaviors();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> intercepted;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在<code>performIntercept</code>去选择一个最适合的Behavior来进行处理，这个方法不仅用于<code>onInterceptTouchEvent</code>，并且也用于<code>onTouchEvent</code>，根据传入<code>type</code>不同来识别对应方法。我们来看看它的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">performIntercept</span><span class="params">(MotionEvent ev, <span class="keyword">final</span> <span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">   <span class="keyword">boolean</span> intercepted = <span class="keyword">false</span>;</div><div class="line">   <span class="keyword">boolean</span> newBlock = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">   MotionEvent cancelEvent = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(ev);</div><div class="line"></div><div class="line">   <span class="keyword">final</span> List&lt;View&gt; topmostChildList = mTempList1;</div><div class="line"></div><div class="line">   <span class="comment">// API&gt;=21时，使用elevation由低到高排列View；API&lt;21时，按View添加顺序排列</span></div><div class="line">   getTopSortedChildren(topmostChildList);</div><div class="line"></div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> childCount = topmostChildList.size();</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i) &#123;</div><div class="line">       <span class="keyword">final</span> View child = topmostChildList.get(i);</div><div class="line">       <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">       <span class="keyword">final</span> Behavior b = lp.getBehavior();</div><div class="line"></div><div class="line">       <span class="comment">// ...(省略代码) 如果此次判定intercept，则对上次的Behavior发送CANCEL事件。</span></div><div class="line"></div><div class="line"><span class="comment">// 根据传入type不同调用不同的方法</span></div><div class="line">       <span class="keyword">if</span> (!intercepted &amp;&amp; b != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">switch</span> (type) &#123;</div><div class="line">               <span class="keyword">case</span> TYPE_ON_INTERCEPT:</div><div class="line">                   intercepted = b.onInterceptTouchEvent(<span class="keyword">this</span>, child, ev);</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> TYPE_ON_TOUCH:</div><div class="line">                   intercepted = b.onTouchEvent(<span class="keyword">this</span>, child, ev);</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span> (intercepted) &#123;</div><div class="line">               mBehaviorTouchView = child;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line"><span class="comment">//...(省略代码) 如果Behavior.blocksInteractionBelow()返回true，则不处理后续的事件。</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   topmostChildList.clear();</div><div class="line"></div><div class="line">   <span class="keyword">return</span> intercepted;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="1-3-2-依赖关系类"><a href="#1-3-2-依赖关系类" class="headerlink" title="1.3.2 依赖关系类"></a>1.3.2 依赖关系类</h4><p> 这部分比较简单，就俩函数：<br>   <code>layoutDependsOn</code>：返回<code>true</code>则表示对另一个View有依赖关系；<br>   <code>onDependentViewChanged</code>&amp;<code>onDependentViewRemoved</code>：如果被依赖的View在正常layout之后仍有size/position上的变化，或者被remove掉，都会触发对应方法。</p><p> 那么问题来了，CoordinatorLayout是怎么监听这个被依赖的View改变的事件的呢？</p><p> 原来它里面有一个<code>ViewTreeObserver.OnPreDrawListener</code>，它在<code>onMeasure</code>的时候被添加到了<code>ViewTreeObserver</code>中，这样每一帧被绘制出来之前都会调用这个回调。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnPreDrawListener</span> <span class="keyword">implements</span> <span class="title">ViewTreeObserver</span>.<span class="title">OnPreDrawListener</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreDraw</span><span class="params">()</span> </span>&#123;</div><div class="line">        dispatchOnDependentViewChanged(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 这个<code>dispatchOnDependentViewChanged</code>里面代码比较多，就不放上来了，总结下来就是这样：</p><p> 根据依赖关系遍历子View，对每一个View做如下操作</p><ul><li>判断一下新的布局边界与lastChildRect是否相同，是则记录新的布局边界为lastChildRect，并继续后续流程，否则跳过；</li><li><p>对于之后每一个View，如果它依赖于本View，则调用它的<code>Behavior.onDependentViewChanged</code>（如果有Behavior的话）。</p><p>至于<code>onDependentViewRemoved</code>，是在初始化的时候就会调用<code>ViewGroup.setOnHierarchyChangeListener()</code>方法设置一个<code>OnHierarchyChangeListener</code>，这样每次add和remove子View的时候就会接收到回调，同时对相应依赖关系的View进行处理。</p></li></ul><h4 id="1-3-3-布局类"><a href="#1-3-3-布局类" class="headerlink" title="1.3.3 布局类"></a>1.3.3 布局类</h4><p><code>onMeasureChild</code>&amp;<code>onLayoutChild</code>：如果重写了该方法并返回<code>true</code>，则CoordinatorLayout会使用Behavior对这个子View进行measure/layout。具体的可以见下面的<strong>Measure&amp;Layout</strong></p><h4 id="1-3-4-嵌套滑动类"><a href="#1-3-4-嵌套滑动类" class="headerlink" title="1.3.4 嵌套滑动类"></a>1.3.4 嵌套滑动类</h4><p>CoordinatorLayout实现了<code>NestedScrollingParent</code>，当CoordinatorLayout内有一个支持NestedScroll的子View时，它的嵌套滑动事件通过<code>NestedScrollingParent</code>的回调分发到各直接子View的Behavior处理。虽然<code>Behavior</code>类没有实现<code>NestedScrollingParent</code>，但是实际上它的方法都有。有兴趣的同学可以去看看这个类，我们这里重点讲CoordinatorLayout的分发过程。</p><p> 各个事件的分发过程类似，此处就举一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(View child, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class="line">     <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">     <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i) &#123;</div><div class="line">         <span class="keyword">final</span> View view = getChildAt(i);</div><div class="line">         <span class="keyword">final</span> LayoutParams lp = (LayoutParams) view.getLayoutParams();</div><div class="line">         <span class="keyword">final</span> Behavior viewBehavior = lp.getBehavior();</div><div class="line">         <span class="keyword">if</span> (viewBehavior != <span class="keyword">null</span>) &#123;</div><div class="line">             <span class="keyword">final</span> <span class="keyword">boolean</span> accepted = viewBehavior.onStartNestedScroll(<span class="keyword">this</span>, view, child, target,</div><div class="line">                     nestedScrollAxes);</div><div class="line">             handled |= accepted;</div><div class="line"></div><div class="line">             lp.acceptNestedScroll(accepted);</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             lp.acceptNestedScroll(<span class="keyword">false</span>);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> handled;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>非常简单吧，就遍历一下直接子View，每个都调一下对应的回调方法，只要有任何一个子View的behavior消耗了这个事件，就算消耗了这个事件。</p><p>##2. Measure&amp;Layout</p><p>我们知道，ViewGroup要把子View准确地放置到屏幕上都是要走<code>onMeasure</code>  <code>onLayout</code>的，那么我们看看<code>CoordinatorLayout</code>在这里干了什么。</p><p>在看懂时请确保你明白<code>measure/layout</code>的意义以及基本用法，否则可能会导致身体不适=。=</p><h3 id="2-1-Measure"><a href="#2-1-Measure" class="headerlink" title="2.1 Measure"></a>2.1 Measure</h3><p>最直接的就是看代码，如果不喜欢，可以跳过代码看总结。：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">   prepareChildren(); <span class="comment">/* 解析依赖关系，并用1.2中提到的Comparator对View按依赖关系进行排序 */</span></div><div class="line">   ensurePreDrawListener(); <span class="comment">/* 若PreDrawListener未添加，则添加到ViewTreeObserver */</span></div><div class="line"></div><div class="line">   <span class="comment">//...(省略代码) 解析paddingmeasureSpec</span></div><div class="line"></div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> childCount = mDependencySortedChildren.size();</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i) &#123;</div><div class="line">       <span class="keyword">final</span> View child = mDependencySortedChildren.get(i);</div><div class="line">       <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line"></div><div class="line"><span class="comment">//...(省略代码)处理keyline</span></div><div class="line"></div><div class="line">       <span class="keyword">int</span> childWidthMeasureSpec = widthMeasureSpec;</div><div class="line">       <span class="keyword">int</span> childHeightMeasureSpec = heightMeasureSpec;</div><div class="line"></div><div class="line"><span class="comment">//...(省略代码) 处理由于fitSystemWindows带来的padding</span></div><div class="line"></div><div class="line"><span class="comment">/* 如果childView有Behavior并且它的onMeasureChild返回true，则由behavior来对childView进行measure，否则就自己measure. */</span></div><div class="line">       <span class="keyword">final</span> Behavior b = lp.getBehavior();</div><div class="line">       <span class="keyword">if</span> (b == <span class="keyword">null</span> || !b.onMeasureChild(<span class="keyword">this</span>, child, childWidthMeasureSpec, keylineWidthUsed,</div><div class="line">               childHeightMeasureSpec, <span class="number">0</span>)) &#123;</div><div class="line">           onMeasureChild(child, childWidthMeasureSpec, keylineWidthUsed,</div><div class="line">                   childHeightMeasureSpec, <span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line"><span class="comment">/* 取最大的child width/height 加上margin 作为已经消耗的尺寸。 */</span></div><div class="line">       widthUsed = Math.max(widthUsed, widthPadding  child.getMeasuredWidth()</div><div class="line">               lp.leftMargin  lp.rightMargin);</div><div class="line">       heightUsed = Math.max(heightUsed, heightPadding  child.getMeasuredHeight()</div><div class="line">               lp.topMargin  lp.bottomMargin);</div><div class="line"></div><div class="line">       childState = ViewCompat.combineMeasuredStates(childState,</div><div class="line">               ViewCompat.getMeasuredState(child));</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">/* 设置自身的measure尺寸 */</span></div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> width = ViewCompat.resolveSizeAndState(widthUsed, widthMeasureSpec,</div><div class="line">           childState &amp; ViewCompat.MEASURED_STATE_MASK);</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> height = ViewCompat.resolveSizeAndState(heightUsed, heightMeasureSpec,</div><div class="line">           childState &lt;&lt; ViewCompat.MEASURED_HEIGHT_STATE_SHIFT);</div><div class="line">   setMeasuredDimension(width, height);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>总结下来，onMeasure干了这么几件事：</p><ol><li>根据依赖关系对所有子View进行排序</li><li>保证OnPreDrawListener被添加</li><li>按依赖关系遍历子View:<ul><li>如果子View有Behavior，并且它的<code>onMeasureChild</code>返回true，则使用Behavior进行measure；否则直接使用measureSpec对子View进行measure；</li><li>取子VIew最大的measure尺寸为已使用的measure尺寸。</li></ul></li><li>更新本身的Measure尺寸。</li></ol><h3 id="2-2-Layout"><a href="#2-2-Layout" class="headerlink" title="2.2 Layout"></a>2.2 Layout</h3><p> 在<code>onLayout</code>中，我们可以看到<code>CoordinatorLayout</code>会对每一个子View依照以下判断顺序进行layout：</p><ol><li>如果子View设置了<code>Behavior</code>，并且该<code>Behavior</code>的<code>behavior.onLayoutChild</code>返回<code>true</code>，则使用<code>behavior.onLayoutChild</code>对该子View进行layout；</li><li><p>如果Behavior不进行layout，则进入自身的<code>onLayoutChild()</code>，内部依次进行如下判断：</p><ul><li>如果子View设置了<code>Anchor</code>，则调用<code>layoutChildWithAnchor</code>（根据anchor进行layout）；</li><li>如果子View含有<code>keyline</code>，则调用<code>layoutChildWithKeyline</code>（根据keyline进行layout）；</li><li>如果以上判断都不符合，则直接将View根据<strong>padding/margin/measure结果</strong>按照<code>Gravity</code>放置。</li></ul><p>我们一一来看一下这些过程。</p></li></ol><h4 id="2-2-1-使用Behavior进行layout"><a href="#2-2-1-使用Behavior进行layout" class="headerlink" title="2.2.1 使用Behavior进行layout"></a>2.2.1 使用Behavior进行layout</h4><p> 默认的Behavior的<code>onLayoutChild</code>都是返回<code>false</code>的，那么我们看看<code>FloatingActionButton</code>的默认Behavior是怎么处理的吧：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLayoutChild</span><span class="params">(CoordinatorLayout parent, FloatingActionButton child,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 检查该FAB是否依赖AppBarLayout</span></div><div class="line">    <span class="keyword">final</span> List&lt;View&gt; dependencies = parent.getDependencies(child);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = dependencies.size(); i &lt; count; i) &#123;</div><div class="line">        <span class="keyword">final</span> View dependency = dependencies.get(i);</div><div class="line">        <span class="keyword">if</span> (dependency <span class="keyword">instanceof</span> AppBarLayout</div><div class="line">                &amp;&amp; updateFabVisibility(parent, (AppBarLayout) dependency, child)) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调用CoordinatorLayout的onLayoutChild对FAB进行layout</span></div><div class="line">    parent.onLayoutChild(child, layoutDirection);</div><div class="line">    <span class="comment">// 在API &lt; 21时，需要手动offset来让出阴影的位置</span></div><div class="line">    offsetIfNeeded(parent, child);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里主要是处理了如果FAB设置了<code>AppBarLayout</code>为anchor时（此时会对<code>AppBarLayout</code>有依赖），则当<code>AppBarLayout</code>的高度不足以显示FAB时将其隐藏）。</p><p>之后它会手动调用CoordinatorLayout自身的<code>onLayoutChild</code>方法进行layout，即上述判断的第二步，那我们继续往下看。</p><h4 id="2-2-2-使用Anchor进行layout"><a href="#2-2-2-使用Anchor进行layout" class="headerlink" title="2.2.2 使用Anchor进行layout"></a>2.2.2 使用Anchor进行layout</h4><p> 如果View设置了anchor，那么都会调用<code>layoutWithAnchor</code>进行layout，代码与解释如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">layoutChildWithAnchor</span><span class="params">(View child, View anchor, <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Rect anchorRect = mTempRect1;</div><div class="line">    <span class="keyword">final</span> Rect childRect = mTempRect2;</div><div class="line"></div><div class="line">    <span class="comment">/* 1. 找到被anchor的View的布局边界 */</span></div><div class="line">    getDescendantRect(anchor, anchorRect);</div><div class="line"></div><div class="line">    <span class="comment">/* 2. 获取到被anchor的View布局边界之后，配合layout_anchorGravity与自身的gravity获取到最终要layout到的边界 */</span></div><div class="line">    getDesiredAnchoredChildRect(child, layoutDirection, anchorRect, childRect);</div><div class="line">    child.layout(childRect.left, childRect.top, childRect.right, childRect.bottom);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里用到的两个关键函数就是<code>getDescendantRect</code>与<code>getDesiredAnchoredChildRect</code>，它们的目的在我添加的注释中进行了解释，为保证文章的可读性就不再把代码放上来了，有兴趣的同学可以再自己去挖掘相应代码~~</p><h4 id="2-2-3-直接layout"><a href="#2-2-3-直接layout" class="headerlink" title="2.2.3 直接layout"></a>2.2.3 直接layout</h4><p>如果之前的都不符合，就会走到这一步，我们看看它是怎么layout的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">layoutChild</span><span class="params">(View child, <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">      <span class="keyword">final</span> Rect parent = mTempRect1;</div><div class="line">      parent.set(getPaddingLeft()  lp.leftMargin,</div><div class="line">              getPaddingTop()  lp.topMargin,</div><div class="line">              getWidth() - getPaddingRight() - lp.rightMargin,</div><div class="line">              getHeight() - getPaddingBottom() - lp.bottomMargin);</div><div class="line"></div><div class="line">      <span class="comment">//...(省略代码) 处理由于fitsSystemWindows带来的inset</span></div><div class="line"></div><div class="line">  <span class="comment">// 按照Gravity与measure尺寸在父控件里面找到自己的位置，并进行layout。</span></div><div class="line">      <span class="keyword">final</span> Rect out = mTempRect2;</div><div class="line">      GravityCompat.apply(resolveGravity(lp.gravity), child.getMeasuredWidth(),</div><div class="line">              child.getMeasuredHeight(), parent, out, layoutDirection);</div><div class="line">      child.layout(out.left, out.top, out.right, out.bottom);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>##3 总结</p><p>CoordinatorLayout的特性总结下来就是两个方面：</p><ol><li>可以设置anchor，被依赖的View变化自身也会变化；</li><li>可以设置behavior，当内部有支持嵌套滑动的控件时处理NestedScroll事件；</li></ol><p>这两个特性导致的子View之间的依赖关系让界面的交互更有意思。有兴趣的同学可以再去看<code>AppBarLayout</code>、<code>FloatingActionButton</code>、<code>SnackBar</code>的源码~~</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>CompoundButton源码分析</title>
    <link href="https://github.com/itgoyo/2017/07/26/CompoundButton%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/CompoundButton源码分析.html</id>
    <published>2017-07-26T11:52:49.000Z</published>
    <updated>2017-11-23T13:05:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><p>CompoundButton 是一个有两种状态（选中和未选中 / checkd unchecked）的Button。当你按下（pressed）或者点击（clicked），它的状态会自动改变。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>是一个抽象类（abstract），所以我们不能直接使用它，只有自定义实现或者系统已经提供的它的一直子类（ToggleButton，Checkbox，RadioButton 等等）</li><li>继承自Button，而Button 继承自TextView，所以Button，TextView 的特性CompoundButton 都是具备的</li><li>实现自Checkable 接口（interface），利用它可以设置状态（setChecked(boolean checked)），获取状态（isChecked()）和切换状态（toggle()）</li></ul><p>最后的效果图就是这样的。</p><p><img src="http://ww2.sinaimg.cn/large/68622377gw1f36nyso3hsg20c0034dfy.gif" alt=""></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 选中和未选中的状态</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mChecked;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mBroadcasting;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Drawable mButtonDrawable;</div><div class="line"></div><div class="line"><span class="keyword">private</span> ColorStateList mButtonTintList = <span class="keyword">null</span>;</div><div class="line"><span class="comment">// 就是水波纹和背景颜色混合的方式</span></div><div class="line"><span class="keyword">private</span> PorterDuff.Mode mButtonTintMode = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mHasButtonTint = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mHasButtonTintMode = <span class="keyword">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// 状态监听</span></div><div class="line"><span class="keyword">private</span> OnCheckedChangeListener mOnCheckedChangeListener;</div><div class="line"><span class="keyword">private</span> OnCheckedChangeListener mOnCheckedChangeWidgetListener;</div></pre></td></tr></table></figure><p>这是一些局部变量，在后面的分析会用到。</p><p>我们先来看看CompoundButton 自定义控件有哪些属性</p><p><strong>\data\res\values\attrs.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CompoundButton"</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!-- 设置状态  true: 选中; false: 未选中 --&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"checked"</span> <span class="attr">format</span>=<span class="string">"boolean"</span> /&gt;</span></div><div class="line">     <span class="comment">&lt;!-- 绘制按钮图形，一般为Drawable 资源 (e.g. checkbox, radio button, etc). --&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">format</span>=<span class="string">"reference"</span> /&gt;</span></div><div class="line">     <span class="comment">&lt;!-- 对绘制的按钮图形着色 --&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"buttonTint"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></div><div class="line">     <span class="comment">&lt;!-- 对着色设置模式 --&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"buttonTintMode"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"src_over"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">         ...</div><div class="line">     <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div></pre></td></tr></table></figure></p><p>然后再来看看怎么绘制，先来看看构造方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CompoundButton</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</div><div class="line"></div><div class="line">    <span class="comment">// 这里的获取自定义的CompoundButton 就是上面的定义的CompoundButton</span></div><div class="line">    <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(</div><div class="line">            attrs, com.android.internal.R.styleable.CompoundButton, defStyleAttr, defStyleRes);</div><div class="line"></div><div class="line">    <span class="comment">// 用于绘制按钮图形</span></div><div class="line">    <span class="keyword">final</span> Drawable d = a.getDrawable(com.android.internal.R.styleable.CompoundButton_button);</div><div class="line">    <span class="keyword">if</span> (d != <span class="keyword">null</span>) &#123;</div><div class="line">        setButtonDrawable(d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 对绘制的按钮图形着色设置模式</span></div><div class="line">    <span class="keyword">if</span> (a.hasValue(R.styleable.CompoundButton_buttonTintMode)) &#123;</div><div class="line">        mButtonTintMode = Drawable.parseTintMode(a.getInt(</div><div class="line">                R.styleable.CompoundButton_buttonTintMode, -<span class="number">1</span>), mButtonTintMode);</div><div class="line">        mHasButtonTintMode = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 对绘制的按钮图形着色</span></div><div class="line">    <span class="keyword">if</span> (a.hasValue(R.styleable.CompoundButton_buttonTint)) &#123;</div><div class="line">        mButtonTintList = a.getColorStateList(R.styleable.CompoundButton_buttonTint);</div><div class="line">        mHasButtonTint = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 设置状态</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> checked = a.getBoolean(</div><div class="line">            com.android.internal.R.styleable.CompoundButton_checked, <span class="keyword">false</span>);</div><div class="line">    setChecked(checked);</div><div class="line"></div><div class="line">    a.<span class="function">re <span class="title">cycle</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    applyButtonTint();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在构造方法中，获取自定义属性的各个属性，</p><ul><li>button：用于绘制按钮图形，然后调用setButtonDrawable() 来绘制。</li><li>buttonTint：绘制的按钮着色。使用一个boolean 标识符来设置的，然后会在applyButtonTint() 中统一处理。它们两个分别用作给和</li><li>buttonTintMode：和设置着色模式。设置方式和buttonTint 几乎一样。不过它的一些属性，参考这篇文章来看看具体不同的着色模式效果是怎么样的。<a href="http://www.cnblogs.com/fuly550871915/p/5002759.html" target="_blank" rel="external">android5.x新特性之Tinting</a></li><li>checked：是设置选中状态，在setChecked() 中设置。</li></ul><h2 id="绘制按钮图形"><a href="#绘制按钮图形" class="headerlink" title="绘制按钮图形"></a>绘制按钮图形</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setButtonDrawable</span><span class="params">(@Nullable Drawable drawable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mButtonDrawable != drawable) &#123;</div><div class="line">        <span class="keyword">if</span> (mButtonDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 取消对View 的引用</span></div><div class="line">            mButtonDrawable.setCallback(<span class="keyword">null</span>);</div><div class="line">            <span class="comment">// 取消绘制对象相关联的调度,当我们重新绘制一个Drawable，可以调用此方法</span></div><div class="line">            unscheduleDrawable(mButtonDrawable);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mButtonDrawable = drawable;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (drawable != <span class="keyword">null</span>) &#123;</div><div class="line">            drawable.setCallback(<span class="keyword">this</span>);</div><div class="line">            drawable.setLayoutDirection(getLayoutDirection());</div><div class="line">            <span class="keyword">if</span> (drawable.isStateful()) &#123;</div><div class="line">                drawable.setState(getDrawableState());</div><div class="line">            &#125;</div><div class="line">            drawable.setVisible(getVisibility() == VISIBLE, <span class="keyword">false</span>);</div><div class="line">            setMinHeight(drawable.getIntrinsicHeight());</div><div class="line">            applyButtonTint();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个方法，就是用于绘制按钮图形，首先会判断我们设置的Drawable 和初始会的mButtonDrawable 是否相等，如果不等，将会对初始化的mButtonDrawable 对象，取消对View 的引用（setCallback(null)），并且取消mButtonDrawable 相关联调度（unscheduleDrawable()），然后将我们新设置的Drawable 赋值给mButtonDrawable 对象，然后再设置引用，设置布局的方向，然后判断如果状态改变时，重新设置状态。最后调用applyButtonTint()。</p><h2 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">applyButtonTint</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mButtonDrawable != <span class="keyword">null</span> &amp;&amp; (mHasButtonTint || mHasButtonTintMode)) &#123;</div><div class="line">        mButtonDrawable = mButtonDrawable.mutate();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mHasButtonTint) &#123;</div><div class="line">            mButtonDrawable.setTintList(mButtonTintList);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mHasButtonTintMode) &#123;</div><div class="line">            mButtonDrawable.setTintMode(mButtonTintMode);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// The drawable (or one of its children) may not have been</span></div><div class="line">        <span class="comment">// stateful before applying the tint, so let's try again.</span></div><div class="line">        <span class="keyword">if</span> (mButtonDrawable.isStateful()) &#123;</div><div class="line">            mButtonDrawable.setState(getDrawableState());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个方法主要就是设置mButtonDrawable 的Tint（着色）和TintMode（着色模式），之前在构造方法，setButtonDrawable() 方法中都会调用此方法，因为这两个属性都是基于mButtonDrawable 来设置的，而这个两个属性是根据两个Boolean 属性mHasButtonTint 和mHasButtonTintMode 来识别的，然后为true，就表示设置。而他们两个属性也有setButtonTintList 和setButtonTintMode() 方法来设置两个属性，将两个boolean 属性设置为true，并且调用applyButtonTint() 来设置的。</p><h2 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a><strong>绘制</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Drawable buttonDrawable = mButtonDrawable;</div><div class="line">    <span class="keyword">if</span> (buttonDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> verticalGravity = getGravity() &amp; Gravity.VERTICAL_GRAVITY_MASK;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> drawableHeight = buttonDrawable.getIntrinsicHeight();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> drawableWidth = buttonDrawable.getIntrinsicWidth();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> top;</div><div class="line">        <span class="keyword">switch</span> (verticalGravity) &#123;</div><div class="line">            <span class="keyword">case</span> Gravity.BOTTOM:</div><div class="line">                top = getHeight() - drawableHeight;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Gravity.CENTER_VERTICAL:</div><div class="line">                top = (getHeight() - drawableHeight) / <span class="number">2</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                top = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + drawableHeight;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left = isLayoutRtl() ? getWidth() - drawableWidth : <span class="number">0</span>;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right = isLayoutRtl() ? getWidth() : drawableWidth;</div><div class="line"></div><div class="line">        buttonDrawable.setBounds(left, top, right, bottom);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Drawable background = getBackground();</div><div class="line">        <span class="keyword">if</span> (background != <span class="keyword">null</span>) &#123;</div><div class="line">            background.setHotspotBounds(left, top, right, bottom);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (buttonDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> scrollX = mScrollX;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> scrollY = mScrollY;</div><div class="line">        <span class="keyword">if</span> (scrollX == <span class="number">0</span> &amp;&amp; scrollY == <span class="number">0</span>) &#123;</div><div class="line">            buttonDrawable.draw(canvas);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            canvas.translate(scrollX, scrollY);</div><div class="line">            buttonDrawable.draw(canvas);</div><div class="line">            canvas.translate(-scrollX, -scrollY);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这些属性都初始化好了，那就可以来绘制了，我们都知道自定义重写onDraw() 方法来绘制视图，CompoundButton 也重写了此方法，将我们设置了各种属性的mButtonDrawable 复制给局部变量buttonDrawable，然后根据对其方式（Gravity） 属性来来具体绘制buttonDrawable。然后调用父类的onDraw()，最后在根据时候是滑动通过Canvas 来绘制，如果水平和垂直滑动为0，则直接绘制即可，如果不为零则需要调用translate 对canvas 的重新绘制。</p><h2 id="设置选中-checked-状态"><a href="#设置选中-checked-状态" class="headerlink" title="设置选中(checked)状态"></a><strong>设置选中(checked)状态</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChecked</span><span class="params">(<span class="keyword">boolean</span> checked)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mChecked != checked) &#123;</div><div class="line">        mChecked = checked;</div><div class="line">        refreshDrawableState();</div><div class="line">        notifyViewAccessibilityStateChangedIfNeeded(</div><div class="line">                AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);</div><div class="line"></div><div class="line">        <span class="comment">// 避免多次调用setChecked() 来多次调用回调监听</span></div><div class="line">        <span class="keyword">if</span> (mBroadcasting) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mBroadcasting = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (mOnCheckedChangeListener != <span class="keyword">null</span>) &#123;</div><div class="line">            mOnCheckedChangeListener.onCheckedChanged(<span class="keyword">this</span>, mChecked);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mOnCheckedChangeWidgetListener != <span class="keyword">null</span>) &#123;</div><div class="line">            mOnCheckedChangeWidgetListener.onCheckedChanged(<span class="keyword">this</span>, mChecked);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mBroadcasting = <span class="keyword">false</span>;            </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 设置监状态听</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCheckedChangeListener</span><span class="params">(OnCheckedChangeListener listener)</span> </span>&#123;</div><div class="line">    mOnCheckedChangeListener = listener;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setOnCheckedChangeWidgetListener</span><span class="params">(OnCheckedChangeListener listener)</span> </span>&#123;</div><div class="line">    mOnCheckedChangeWidgetListener = listener;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>设置状态，就是传入一个Boolean 值来设置状态，如果和初始化的mChecked 相反，才会调用，然后调用refreshDrawableState() 来刷新绘制的状态，然后下面就是设置状态改变的监听，通过mBroadcasting 属性来避免多次设置回调，每次调用mBroadcasting，如果为true，则返回。发现有两个监听，我们仔细看下面setXxxListener() 的方法，而下面那个setOnCheckedChangeWidgetListener() 方法不是Public，所以说不是对外开放的，我们是不能调用的，文档中说明是仅供内部使用。因此我们想要监听选中状态，可以使用setOnCheckedChangeListener()。重写onCheckedChanged(CompoundButton buttonView, boolean isChecked) 即可。对了，除了setChecked() 可以设置状态，toggle() 每次也会setChecked() 方法，每次都会讲状态设置为相反的。还有isChecked() 方法，判断当前的选中状态。</p><h2 id="状态保存"><a href="#状态保存" class="headerlink" title="状态保存"></a><strong>状态保存</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SavedState</span> <span class="keyword">extends</span> <span class="title">BaseSavedState</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> checked;</div><div class="line">    SavedState(Parcelable superState) &#123;</div><div class="line">        <span class="keyword">super</span>(superState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SavedState</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(in);</div><div class="line">        checked = (Boolean)in.readValue(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel out, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.writeToParcel(out, flags);</div><div class="line">        out.writeValue(checked);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;SavedState&gt; CREATOR</div><div class="line">            = <span class="keyword">new</span> Parcelable.Creator&lt;SavedState&gt;() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> SavedState <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SavedState(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> SavedState[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SavedState[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Parcelable <span class="title">onSaveInstanceState</span><span class="params">()</span> </span>&#123;</div><div class="line">    Parcelable superState = <span class="keyword">super</span>.onSaveInstanceState();</div><div class="line">    SavedState ss = <span class="keyword">new</span> SavedState(superState);</div><div class="line">    ss.checked = isChecked();</div><div class="line">    <span class="keyword">return</span> ss;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Parcelable state)</span> </span>&#123;</div><div class="line">    SavedState ss = (SavedState) state;</div><div class="line"></div><div class="line">    <span class="keyword">super</span>.onRestoreInstanceState(ss.getSuperState());</div><div class="line">    setChecked(ss.checked);</div><div class="line">    requestLayout();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>保存状态是自定义一个SavedState，继承自BaseSavedState，然后Parcelable 将Boobean 类型checked 属性序列化，判断是否选中，在onSaveInstanceState() 中，保存，然后在onRestoreInstanceState() 获取序列化的属性，重新调用setChecked() 设置属性。</p><h2 id="Checkbox-ToggleButton"><a href="#Checkbox-ToggleButton" class="headerlink" title="Checkbox/ToggleButton"></a>Checkbox/ToggleButton</h2><p>Checkbox 和ToggleButton 的实现那都是继承自CompoundButton，可以看下面这两篇文章。</p><ul><li><a href="ToggleButton和CheckBox源码分析.md">ToggleButton/Checkbox 的源码分析</a></li></ul><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>bindService源码分析</title>
    <link href="https://github.com/itgoyo/2017/07/26/bindService%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/bindService源码分析.html</id>
    <published>2017-07-26T11:46:44.000Z</published>
    <updated>2017-11-23T13:05:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><h1 id="bindService-源码分析-【进行中】"><a href="#bindService-源码分析-【进行中】" class="headerlink" title="bindService 源码分析 【进行中】"></a>bindService 源码分析 【进行中】</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>客户端通过 ContextWrapper.bindService() 方法来绑定服务，本地对 bindService 的过程进行源码分析。</p><p><strong>整体时序图</strong></p><p><img src="https://github.com/xxx" alt="bindService 时序图"></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>1. 客户端调用 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/src/main/java/org/xdty/aidlexample/MainActivity.java#L45">bindService()</a> 绑定服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MainActivity.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">    Intent intent = <span class="keyword">new</span> Intent().setComponent(<span class="keyword">new</span> ComponentName(</div><div class="line">            <span class="string">"org.xdty.remoteservice"</span>,</div><div class="line">            <span class="string">"org.xdty.remoteservice.RemoteService"</span>));</div><div class="line">    bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>Activity.bindService()</code> 最终调用的是 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ContextImpl.java#L1283">ContextImpl.bindService()</a> 方法</p><p>2. ContextImpl.bindService()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ContextImpl.java</span></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">    warnIfCallingFromSystemProcess();</div><div class="line">    <span class="keyword">return</span> bindServiceCommon(service, conn, flags, Process.myUserHandle());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">bindServiceCommon</span><span class="params">(Intent service, ServiceConnection conn, <span class="keyword">int</span> flags,</span></span></div><div class="line"><span class="function"><span class="params">        UserHandle user)</span> </span>&#123;</div><div class="line">    IServiceConnection sd;</div><div class="line"></div><div class="line">    sd = mPackageInfo.getServiceDispatcher(conn, getOuterContext(),</div><div class="line">                mMainThread.getHandler(), flags);</div><div class="line">    ...</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        IBinder token = getActivityToken();</div><div class="line">        ...</div><div class="line">        <span class="keyword">int</span> res = ActivityManagerNative.getDefault().bindService(</div><div class="line">            mMainThread.getApplicationThread(), getActivityToken(), service,</div><div class="line">            service.resolveTypeIfNeeded(getContentResolver()),</div><div class="line">            sd, flags, getOpPackageName(), user.getIdentifier());</div><div class="line">        ...</div><div class="line">        <span class="keyword">return</span> res != <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可见接着调用了 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ActivityManagerNative.java#L3740">ActivityManagerNative.getDefault().bindService()</a> 方法</p><p>这里的 <code>mPackageInfo</code> 是一个 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/LoadedApk.java#L977">LoadedApk</a> 实例。<code>mMainThread</code> 则是一个 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ActivityThread.java#L1705">ActivityThread</a>。</p><p>3. ActivityManagerNative.getDefault().bindService()</p><p>注意 <code>ActivityManagerNative.java</code> 文件中有两个类 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ActivityManagerNative.java#L61">ActivityManagerNative</a> <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ActivityManagerNative.java#L2619">ActivityManagerProxy</a>, 他们都实现了 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/IActivityManager.java#L66">IActivityManager</a>接口，而 <a href="">ActivityManagerNative</a> 则继承了 <code>Binder</code> 对象，相当于 AIDL 中的 Stub，<code>`ActivityManagerProxy</code> 则相当于 Proxy。</p><p>首先看 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ActivityManagerNative.java#L84">ActivityManagerNative.getDefault()</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> gDefault.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再找 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ActivityManagerNative.java#L2610">gDefault</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">        IBinder b = ServiceManager.getService(<span class="string">"activity"</span>);</div><div class="line">        IActivityManager am = asInterface(b);</div><div class="line">        <span class="keyword">return</span> am;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>再来看 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ActivityManagerNative.java#L67">asInterface()</a> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title">asInterface</span><span class="params">(IBinder obj)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    IActivityManager in =</div><div class="line">        (IActivityManager)obj.queryLocalInterface(descriptor);</div><div class="line">    <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> in;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActivityManagerProxy(obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>很容易发现其返回了一个 <code>ActivityManagerProxy</code> 对象，所以调用的 <code>bindService()</code> 方法实现在 <code>ActivityManagerProxy</code> 类中。注意这里不要和抽象类 <code>ActivityManagerNative.class</code> 继承的 <code>bindService()</code> 方法混淆，它的实现在子类 ActivityManagerService 中。接下来我们继续看 Proxy 中的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ActivityManagerNative.java</span></div><div class="line"></div><div class="line"><span class="comment">// ActivityManagerProxy.class</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bindService</span><span class="params">(IApplicationThread caller, IBinder token,</span></span></div><div class="line"><span class="function"><span class="params">        Intent service, String resolvedType, IServiceConnection connection,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags,  String callingPackage, <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    Parcel data = Parcel.obtain();</div><div class="line">    Parcel reply = Parcel.obtain();</div><div class="line">    data.writeInterfaceToken(IActivityManager.descriptor);</div><div class="line">    data.writeStrongBinder(caller != <span class="keyword">null</span> ? caller.asBinder() : <span class="keyword">null</span>);</div><div class="line">    data.writeStrongBinder(token);</div><div class="line">    service.writeToParcel(data, <span class="number">0</span>);</div><div class="line">    data.writeString(resolvedType);</div><div class="line">    data.writeStrongBinder(connection.asBinder());</div><div class="line">    data.writeInt(flags);</div><div class="line">    data.writeString(callingPackage);</div><div class="line">    data.writeInt(userId);</div><div class="line">    mRemote.transact(BIND_SERVICE_TRANSACTION, data, reply, <span class="number">0</span>);</div><div class="line">    reply.readException();</div><div class="line">    <span class="keyword">int</span> res = reply.readInt();</div><div class="line">    data.recycle();</div><div class="line">    reply.recycle();</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可见这里将要绑定的服务信息打包，通过一个 binder 对象，发送了 <code>BIND_SERVICE_TRANSACTION</code> 命令给 <code>ActivityManager</code> 的服务端。而 <code>ActivityManager</code> 的服务端就是 <code>ActivityManagerNative</code>，所以接着命令会被 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ActivityManagerNative.java#L143">ActivityManagerNative.onTransact()</a> 处理</p><p>4. ActivityManagerNative.onTransact()</p><p><code>ActivityManagerNative</code> 对 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ActivityManagerNative.java#L973">BIND_SERVICE_TRANSACTION</a> 命令重新解包并通过子类实现的 <a href="">ActivityManagerNative.bindService()</a> 处理，注意这里的 <code>bindService()</code> 和上文的 <code>ActivityManagerProxy.bindService()</code> 不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityManagerNative</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">IActivityManager</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">case</span> BIND_SERVICE_TRANSACTION: &#123;</div><div class="line">            data.enforceInterface(IActivityManager.descriptor);</div><div class="line">            IBinder b = data.readStrongBinder();</div><div class="line">            IApplicationThread app = ApplicationThreadNative.asInterface(b);</div><div class="line">            IBinder token = data.readStrongBinder();</div><div class="line">            Intent service = Intent.CREATOR.createFromParcel(data);</div><div class="line">            String resolvedType = data.readString();</div><div class="line">            b = data.readStrongBinder();</div><div class="line">            <span class="keyword">int</span> fl = data.readInt();</div><div class="line">            String callingPackage = data.readString();</div><div class="line">            <span class="keyword">int</span> userId = data.readInt();</div><div class="line">            IServiceConnection conn = IServiceConnection.Stub.asInterface(b);</div><div class="line">            <span class="keyword">int</span> res = bindService(app, token, service, resolvedType, conn, fl,</div><div class="line">                    callingPackage, userId);</div><div class="line">            reply.writeNoException();</div><div class="line">            reply.writeInt(res);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>5. ActivityManagerService.bindService()</p><p>我们继续看 <code>ActivityManagerNative</code> 的子类 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java#L15897">ActivityManagerService</a> 对 <code>bindService()</code> 方法的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bindService</span><span class="params">(IApplicationThread caller, IBinder token, Intent service,</span></span></div><div class="line"><span class="function"><span class="params">        String resolvedType, IServiceConnection connection, <span class="keyword">int</span> flags, String callingPackage,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">return</span> mServices.bindServiceLocked(caller, token, service,</div><div class="line">                resolvedType, connection, flags, callingPackage, userId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可见通过 <code>mServices.bindServiceLocked()</code> 方法又传递给了下一层，这里的 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java#L2309">mServices</a> 则是一个 <code>ActiveServices</code> 实例。我们继续追踪 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/services/core/java/com/android/server/am/ActiveServices.java#L697">ActiveServices.bindServiceLocked()</a></p><p>6. ActiveServices.bindServiceLocked()</p><p>接下来看 bindServiceLocked() 关键代码片断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bindServiceLocked</span><span class="params">(IApplicationThread caller, IBinder token, Intent service,</span></span></div><div class="line"><span class="function"><span class="params">        String resolvedType, IServiceConnection connection, <span class="keyword">int</span> flags,</span></span></div><div class="line"><span class="function"><span class="params">        String callingPackage, <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</div><div class="line">    <span class="comment">// 获取当前应用的进程记录</span></div><div class="line">    <span class="keyword">final</span> ProcessRecord callerApp = mAm.getRecordForAppLocked(caller);</div><div class="line"></div><div class="line">    <span class="comment">// 获取当前 Activity 记录</span></div><div class="line">    ActivityRecord activity = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</div><div class="line">        activity = ActivityRecord.isInStackLocked(token);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// 获取 ServiceLookupResult，其中 res.record 就是我们要启动的 service</span></div><div class="line">    ServiceLookupResult res =</div><div class="line">        retrieveServiceLocked(service, resolvedType, callingPackage,</div><div class="line">                Binder.getCallingPid(), Binder.getCallingUid(), userId, <span class="keyword">true</span>, callerFg);</div><div class="line">    ServiceRecord s = res.record;</div><div class="line"></div><div class="line">    mAm.startAssociationLocked(callerApp.uid, callerApp.processName,</div><div class="line">            s.appInfo.uid, s.name, s.processName);</div><div class="line"></div><div class="line">    AppBindRecord b = s.retrieveAppBindingLocked(service, callerApp);</div><div class="line"></div><div class="line">    <span class="comment">// 封装客户端传入的 IServiceConnection，用于绑定后回调</span></div><div class="line">    ConnectionRecord c = <span class="keyword">new</span> ConnectionRecord(b, activity,</div><div class="line">            connection, flags, clientLabel, clientIntent);</div><div class="line"></div><div class="line">    <span class="comment">// 保存 connection 记录到列表中</span></div><div class="line">    IBinder binder = connection.asBinder();</div><div class="line">    ArrayList&lt;ConnectionRecord&gt; clist = s.connections.get(binder);</div><div class="line">    <span class="keyword">if</span> (clist == <span class="keyword">null</span>) &#123;</div><div class="line">        clist = <span class="keyword">new</span> ArrayList&lt;ConnectionRecord&gt;();</div><div class="line">        s.connections.put(binder, clist);</div><div class="line">    &#125;</div><div class="line">    clist.add(c);</div><div class="line">    b.connections.add(c);</div><div class="line">    <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (activity.connections == <span class="keyword">null</span>) &#123;</div><div class="line">            activity.connections = <span class="keyword">new</span> HashSet&lt;ConnectionRecord&gt;();</div><div class="line">        &#125;</div><div class="line">        activity.connections.add(c);</div><div class="line">    &#125;</div><div class="line">    b.client.connections.add(c);</div><div class="line">    <span class="keyword">if</span> ((c.flags&amp;Context.BIND_ABOVE_CLIENT) != <span class="number">0</span>) &#123;</div><div class="line">        b.client.hasAboveClient = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (s.app != <span class="keyword">null</span>) &#123;</div><div class="line">        updateServiceClientActivitiesLocked(s.app, c, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    clist = mServiceConnections.get(binder);</div><div class="line">    <span class="keyword">if</span> (clist == <span class="keyword">null</span>) &#123;</div><div class="line">        clist = <span class="keyword">new</span> ArrayList&lt;ConnectionRecord&gt;();</div><div class="line">        mServiceConnections.put(binder, clist);</div><div class="line">    &#125;</div><div class="line">    clist.add(c);</div><div class="line"></div><div class="line">    <span class="comment">// 继续进入 bringUpServiceLocked() 处理</span></div><div class="line">    <span class="keyword">if</span> ((flags&amp;Context.BIND_AUTO_CREATE) != <span class="number">0</span>) &#123;</div><div class="line">        s.lastActivity = SystemClock.uptimeMillis();</div><div class="line">        <span class="keyword">if</span> (bringUpServiceLocked(s, service.getFlags(), callerFg, <span class="keyword">false</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>7. ActiveServices.bringUpServiceLocked()</p><p>继续查看 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/services/core/java/com/android/server/am/ActiveServices.java#L1362">bringUpServiceLocked()</a> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> String <span class="title">bringUpServiceLocked</span><span class="params">(ServiceRecord r, <span class="keyword">int</span> intentFlags, <span class="keyword">boolean</span> execInFg,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> whileRestarting)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isolated = (r.serviceInfo.flags&amp;ServiceInfo.FLAG_ISOLATED_PROCESS) != <span class="number">0</span>;</div><div class="line">    <span class="keyword">final</span> String procName = r.processName;</div><div class="line">    ProcessRecord app;</div><div class="line"></div><div class="line">    <span class="comment">// 获取进程记录</span></div><div class="line">    app = mAm.getProcessRecordLocked(procName, r.appInfo.uid, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">if</span> (app != <span class="keyword">null</span> &amp;&amp; app.thread != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            app.addPackage(r.appInfo.packageName, r.appInfo.versionCode, mAm.mProcessStats);</div><div class="line">            <span class="comment">// 启动服务</span></div><div class="line">            realStartServiceLocked(r, app, execInFg);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (TransactionTooLargeException e) &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>8. ActiveServices.realStartServiceLocked()</p><p>继续追踪 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/services/core/java/com/android/server/am/ActiveServices.java#L1492">ActiveServices.realStartServiceLocked()</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">realStartServiceLocked</span><span class="params">(ServiceRecord r,</span></span></div><div class="line"><span class="function"><span class="params">        ProcessRecord app, <span class="keyword">boolean</span> execInFg)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ...</div><div class="line">        <span class="comment">// 创建服务，服务端最终会响应 onCreate() 方法。</span></div><div class="line">        app.thread.scheduleCreateService(r, r.serviceInfo,</div><div class="line">                mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),</div><div class="line">                app.repProcState);</div><div class="line">        ...</div><div class="line">    &#125; <span class="keyword">catch</span> (DeadObjectException e) &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 绑定服务， 服务最终端会响应 onBind() 方法</span></div><div class="line">    requestServiceBindingsLocked(r, execInFg);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/luoshengyang/article/details/6745181" target="_blank" rel="external">Android应用程序绑定服务（bindService）的过程源代码分析</a></p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Binder源码分析</title>
    <link href="https://github.com/itgoyo/2017/07/26/Binder%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/Binder源码分析.html</id>
    <published>2017-07-26T11:44:18.000Z</published>
    <updated>2017-11-23T13:05:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><p>本文是基于 <a href="https://github.com/xdtianyu/android-6.0.0_r1">Android 6.0.0</a> 和 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow">kernel 3.4</a> 源码 及 Android SDK 23 展开的</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>Binder 是一种 Android 进程间通信机制，提供远程过程调用(Remote Procedure Call)功能。我们最直接的使用是调用 <code>Context.getSystemService()</code> 来获取系统服务，或直接使用 <code>AIDL</code> 来实现多个程序(APP)间数据交互。</p><p>Binder 是非常重要的 Android 基础组件，几乎所有的进程间通信都是使用 Binder 机制实现的。本文将结合源码展开讲述 Binder ，同时对一些重要知识点提供扩展阅读的参考。</p><p><img src="https://raw.githubusercontent.com/xdtianyu/SourceAnalysis/master/art/android_binder.png" alt="android_binder"></p><p>不管是 Android 系统服务(System services)还是用户的应用进程(User apps)，最终都会通过 binder 来实现进程间通信。上层应用首先通过 IBinder 的 transcate 方法发送命令给 libbinder， libbinder 再通过系统调用(ioctl) 发送命令到内核中的 binder 驱动，之后再由驱动完成进程间数据的交互。</p><p>我们经常使用的 Intent，Messager 数据传递也是对 Binder 更高层次的抽象和封装，最终还是会由内核中的 binder 驱动完成数据的传递。</p><h2 id="2-Binder-与-AIDL"><a href="#2-Binder-与-AIDL" class="headerlink" title="2. Binder 与 AIDL"></a>2. Binder 与 AIDL</h2><p>AIDL (Android Interface definition language) 是接口描述语言，用于生成在两个进程间进行通信的代码。先看 AIDL 概念图</p><p><img src="https://raw.githubusercontent.com/xdtianyu/SourceAnalysis/master/art/AIDL.png" alt="AIDL概念图"></p><ul><li><p>Stub.Proxy 和 Stub 代码由 Android Sdk 自动生成，客户端通过 Stub.Proxy 与远程服务交互。</p></li><li><p>Stub 包含对 IBinder 对象操作的封装，需要远程服务实现具体功能。</p></li></ul><p>接下来再看具体实现， 完整源代码见 <a href="https://github.com/xdtianyu/AidlExample">AidlExample</a>。在这个工程中，我们新建了两个应用， <code>app</code> 是客户端代码， <code>remoteservice</code> 则是服务端代码。</p><h3 id="2-1-AIDL-客户端"><a href="#2-1-AIDL-客户端" class="headerlink" title="2.1 AIDL 客户端"></a>2.1 AIDL 客户端</h3><p>在 Android Studio 项目上右键， <code>New</code> -&gt; <code>AIDL</code> -&gt; <code>AIDL File</code> 输入文件名后可以快速创建一个 AIDL 的代码结构。例如我们新建一个 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/src/main/aidl/org/xdty/remoteservice/IRemoteService.aidl">IRemoteService.aidl</a> 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IRemoteService.aidl</span></div><div class="line"><span class="keyword">package</span> com.android.aidltest;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IRemoteService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">double</span> aDouble, String aString)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从生成的示例代码可以看出，AIDL 的语法类似 Java， <code>basicTypes()</code> 方法传递的参数只是基本类型。</p><p>如果要传递自定义类型如 <a href="https://github.com/xdtianyu/AidlExample/blob/master/remoteservice/src/main/java/org/xdty/remoteservice/User.java#L6">User</a>，则需要实现 <a href="http://developer.android.com/reference/android/os/Parcelable.html" target="_blank" rel="external">Parcelable</a> 接口。<code>Parcelable</code> 是一个与 Java <code>Serializable</code> 类似的序列化接口。</p><p>这样类 <code>User</code> 的实例就可以储存到 <a href="http://developer.android.com/reference/android/os/Parcel.html" target="_blank" rel="external">Parcel</a> 中，而 <code>Parcel</code> 则是一个可以通过 <code>IBinder</code> 发送数据或对象引用的容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// User.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="comment">// 从 Parcel 中读取数据，顺序需要和写入保持一致</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">User</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        uid = in.readInt();</div><div class="line">        name = in.readString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 必须实现，用于从 Parcel 对象中生成类实例</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;User&gt; CREATOR = <span class="keyword">new</span> Creator&lt;User&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> User[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 将数据写入到 Parcel 中， 顺序需要与读取保持一致</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        dest.writeInt(uid);</div><div class="line">        dest.writeString(name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再向 <code>IRemoteService.aidl</code> 中添加一个 <code>addUser()</code> 方法，同时新建一个 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/src/main/aidl/org/xdty/remoteservice/User.aidl">User.aidl</a> 文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IRemoteService.aidl</span></div><div class="line"><span class="keyword">package</span> com.android.aidltest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.android.aidltest.User;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IRemoteService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">double</span> aDouble, String aString)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// in 表示传入数据， out 表示传出数据， inout 表示双向传递。注意含有 out 时 User 类需要实现 readFromParcel() 方法</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(in User user)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// User.aidl</span></div><div class="line"><span class="keyword">package</span> com.android.aidltest;</div><div class="line">parcelable User;</div></pre></td></tr></table></figure><p>运行编译后，会在 <code>generated</code> 文件夹中生成一个 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L92">IRemoteService.java</a> 接口文件。这个接口中有两个内部类 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L19">Stub</a> 和 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L92">Stub.Proxy</a>。注意客户端生成的<code>IRemoteService.java</code> 文件和在后文服务端生成的文件内容是相同的。</p><p>客户端会从 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L34">Stub.asInterface()</a> 得到 <code>IRemoteService (Stub.Proxy)</code> 的实例，这个实例就是一个通过 Binder 传递回来的 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L93">远程对象</a> 的包装。而服务端则需要实现 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L15">IRemoteService.addUser()</a> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IRemoteService.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> org.xdty.remoteservice.<span class="function">IRemoteService <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class="line">    <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> org.xdty.remoteservice.IRemoteService))) &#123;</div><div class="line">        <span class="keyword">return</span> ((org.xdty.remoteservice.IRemoteService) iin);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> org.xdty.remoteservice.IRemoteService.Stub.Proxy(obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-2-AIDL-服务端"><a href="#2-2-AIDL-服务端" class="headerlink" title="2.2 AIDL 服务端"></a>2.2 AIDL 服务端</h3><p>为了演示进程间通信，我们新建一个模块（应用） <a href="https://github.com/xdtianyu/AidlExample/tree/master/remoteservice">RemoteService</a> 来实现功能，并在客户端绑定服务。</p><p>按客户端的结构新建 <a href="https://github.com/xdtianyu/AidlExample/blob/master/remoteservice/src/main/aidl/org/xdty/remoteservice/IRemoteService.aidl">IRemoteService.aidl</a> <a href="https://github.com/xdtianyu/AidlExample/blob/master/remoteservice/src/main/aidl/org/xdty/remoteservice/User.aidl">User.aidl</a> <a href="https://github.com/xdtianyu/AidlExample/blob/master/remoteservice/src/main/java/org/xdty/remoteservice/User.java">User.java</a> 文件，并拷贝内容，注意如果需要请修改包名。</p><p>新建服务 <a href="https://github.com/xdtianyu/AidlExample/blob/master/remoteservice/src/main/java/org/xdty/remoteservice/RemoteService.java#L29">RemoteService</a> ，覆盖(Override) <code>onBind()</code> 方法并返回 <code>IRemoteService.Stub</code> 实例 <a href="https://github.com/xdtianyu/AidlExample/blob/master/remoteservice/src/main/java/org/xdty/remoteservice/RemoteService.java#L11">mBinder</a>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// RemoteService.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = RemoteService.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> IBinder mBinder = <span class="keyword">new</span> IRemoteService.Stub() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat,</span></span></div><div class="line"><span class="function"><span class="params">                <span class="keyword">double</span> aDouble, String aString)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"basicTypes: "</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"addUser: "</span> + user.name);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样服务端就实现了 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L15">addUser()</a> 方法，当客户端通过远程对象调用 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L135">IRemoteService.Stub.Proxy.addUser()</a> 时，远程对象 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L147">mRemote</a> 就会通过 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L147">transact()</a> 发送命令给服务端，服务端收到命令后在 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L76">Stub.onTransact()</a> 中读取数据并执行 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L84">addUser()</a> 方法。更多细节我们将在 <a href="#3-binder-%E6%A1%86%E6%9E%B6%E5%8F%8A-native-%E5%B1%82">3. Binder 框架及 Native 层</a> 小节讲述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IRemoteService.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (code) &#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">case</span> TRANSACTION_addUser: &#123;</div><div class="line">            data.enforceInterface(DESCRIPTOR);</div><div class="line">            org.xdty.remoteservice.User _arg0;</div><div class="line">            <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</div><div class="line">                _arg0 = org.xdty.remoteservice.User.CREATOR.createFromParcel(data);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                _arg0 = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.addUser(_arg0);</div><div class="line">            reply.writeNoException();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-3-远程服务的获取与使用"><a href="#2-3-远程服务的获取与使用" class="headerlink" title="2.3 远程服务的获取与使用"></a>2.3 远程服务的获取与使用</h3><p>客户端要使用远程服务，需要绑定服务 (<a href="https://github.com/xdtianyu/AidlExample/blob/master/app/src/main/java/org/xdty/aidlexample/MainActivity.java#L45">bindService</a>) 并建立服务连接 (<a href="https://github.com/xdtianyu/AidlExample/blob/master/app/src/main/java/org/xdty/aidlexample/MainActivity.java#L19">ServiceConnection</a>)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MainActivity.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            IRemoteService remoteService = IRemoteService.Stub.asInterface(service);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                remoteService.addUser(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"neo"</span>));</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent().setComponent(<span class="keyword">new</span> ComponentName(</div><div class="line">                <span class="string">"org.xdty.remoteservice"</span>,</div><div class="line">                <span class="string">"org.xdty.remoteservice.RemoteService"</span>));</div><div class="line">        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们可以看出，客户端通过 <code>binderService()</code> 方法，获取远程服务并在服务连接 <code>ServiceConnection</code> 中 <code>onServiceConnected()</code> 回调中得到了 <code>IBinder service</code> 实例， 最后通过上文提到的 <code>IRemoteService.Stub.asInterface(service)</code> 方法得到远程服务 <code>IRemoteService</code> 的实例。通过 <code>IRemoteService.addUser()</code> 方法我们可以像调用本地方法一样调用远程方法。在来看 <code>IRemoteService.addUser()</code> 的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IRemoteService.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> org.xdty.remoteservice.<span class="function">IRemoteService <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> org.xdty.remoteservice.IRemoteService.Stub.Proxy(obj);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">xdty</span>.<span class="title">remoteservice</span>.<span class="title">IRemoteService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> android.os.IBinder mRemote;</div><div class="line"></div><div class="line">    Proxy(android.os.IBinder remote) &#123;</div><div class="line">        mRemote = remote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mRemote;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(org.xdty.remoteservice.User user)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">        android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">        android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">            <span class="keyword">if</span> ((user != <span class="keyword">null</span>)) &#123;</div><div class="line">                _data.writeInt(<span class="number">1</span>);</div><div class="line">                user.writeToParcel(_data, <span class="number">0</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                _data.writeInt(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            mRemote.transact(Stub.TRANSACTION_addUser, _data, _reply, <span class="number">0</span>);</div><div class="line">            _reply.readException();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            _reply.recycle();</div><div class="line">            _data.recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到客户端调用 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/src/main/java/org/xdty/aidlexample/MainActivity.java#L25">remoteService.addUser(new User(1, “neo”))</a> 方法实际上是通过 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L147">IBinder service</a> 实例的 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L147">transact()</a> 方法，发送了与服务端约定好的命令 <code>Stub.TRANSACTION_addUser</code>，并将参数按格式打包进 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L137">Parcel</a> 对象。</p><p>服务端则在 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L51">onTransact()</a> 方法中收到命令后会对命令和参数重新解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IRemoteService.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (code) &#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">case</span> TRANSACTION_addUser: &#123;</div><div class="line">            data.enforceInterface(DESCRIPTOR);</div><div class="line">            org.xdty.remoteservice.User _arg0;</div><div class="line">            <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</div><div class="line">                _arg0 = org.xdty.remoteservice.User.CREATOR.createFromParcel(data);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                _arg0 = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.addUser(_arg0);</div><div class="line">            reply.writeNoException();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到在 <code>onTransact()</code> 中，最终 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L84">this.addUser(_arg0)</a> 调用了上文提到的服务端的实现 <a href="https://github.com/xdtianyu/AidlExample/blob/master/remoteservice/src/main/java/org/xdty/remoteservice/RemoteService.java#L19">IRemoteService.Stub.addUser()</a> 。</p><p>远程 Binder 对象 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L42">mRemote</a> 是由客户端绑定服务时 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/src/main/java/org/xdty/aidlexample/MainActivity.java#L23">onServiceConnected()</a> 返回的。继续追踪 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ContextImpl.java#L1283">bindService()</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ContextImpl.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">    warnIfCallingFromSystemProcess();</div><div class="line">    <span class="keyword">return</span> bindServiceCommon(service, conn, flags, Process.myUserHandle());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到最后是通过 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ContextImpl.java#L1317#L1320">ActivityManagerNative.getDefault().bindService()</a> 来绑定服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bindServiceCommon()</span></div><div class="line"><span class="keyword">int</span> res = ActivityManagerNative.getDefault().bindService(</div><div class="line">    mMainThread.getApplicationThread(), getActivityToken(), service,</div><div class="line">    service.resolveTypeIfNeeded(getContentResolver()),</div><div class="line">    sd, flags, getOpPackageName(), user.getIdentifier());</div><div class="line"></div><div class="line"><span class="comment">// ActivityManagerNative.getDefault().bindService()</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bindService</span><span class="params">(IApplicationThread caller, IBinder token,</span></span></div><div class="line"><span class="function"><span class="params">        Intent service, String resolvedType, IServiceConnection connection,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags,  String callingPackage, <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    ...</div><div class="line">    data.writeStrongBinder(connection.asBinder());</div><div class="line">    ...</div><div class="line">    mRemote.transact(BIND_SERVICE_TRANSACTION, data, reply, <span class="number">0</span>);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>追踪到 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ActivityManagerNative.java#L3740">ActivityManagerNative.getDefault().bindService()</a> ，可以发现 <code>ActivityManager</code> 和 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ActivityManagerNative.java#L3750">IServiceConnection</a>也是一个 <code>AIDL</code> 实现。通过它的 <code>ActivityManagerProxy.bindService()</code> 将绑定请求发送给本地层。</p><p>再从 <code>onServiceConnected()</code> 回调追踪， <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/LoadedApk.java#L1223">onServiceConnected()</a> 是由 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/LoadedApk.java#L1175">LoadedApk.ServiceDispatcher.doConnected()</a> 回调的。</p><p><em>关于更多的 <code>bindService()</code> 远程服务创建及 <code>ServiceConnection</code> 回调， 请参考 <a href="http://blog.csdn.net/luoshengyang/article/details/6745181" target="_blank" rel="external">Android应用程序绑定服务（bindService）的过程源代码分析</a></em></p><p>利用进程间通信，我们可以实现简单的应用插件功能。关于 AIDL 在实际项目中的应用，可以参考 <a href="https://github.com/xdtianyu/CallerInfo/tree/master/plugin/src/main">CallerInfo Plugin</a> 的实现</p><p>从上面分析可以看出， AIDL 的本质是对 Binder 的又一次抽象和封装，实际的进程间通信仍是由 Binder 完成的。</p><h2 id="3-Binder-框架及-Native-层"><a href="#3-Binder-框架及-Native-层" class="headerlink" title="3. Binder 框架及 Native 层"></a>3. Binder 框架及 Native 层</h2><p>Binder机制使本地对象可以像操作当前对象一样调用远程对象，可以使不同的进程间互相通信。Binder 使用 Client/Server 架构，客户端通过服务端代理，经过 Binder 驱动与服务端交互。</p><p><img src="https://raw.githubusercontent.com/xdtianyu/SourceAnalysis/master/art/Binder.png" alt="Binder框架图片"></p><p>Binder 机制实现进程间通信的奥秘在于 kernel 中的 Binder 驱动，将在 <a href="#4-binder-%E9%A9%B1%E5%8A%A8">4. Binder 驱动</a> 小节详细讲述。</p><p><img src="https://raw.githubusercontent.com/xdtianyu/SourceAnalysis/master/art/binder_native.png" alt="Binder本地框架图片"></p><p>JNI 的代码位于 <a href="https://github.com/xdtianyu/android-6.0.0_r1/tree/master/frameworks/base/core/jni">frameworks/base/core/jni</a> 目录下，主要是 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/jni/android_util_Binder.cpp">android_util_Binder.cpp</a> 文件和头文件 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/jni/android_util_Binder.h">android_util_Binder.h</a></p><p>Binder JNI 代码是 Binder Java 层操作到 Binder Native 层的接口封装，最后会被编译进 <code>libandroid_runtime.so</code> 系统库。</p><p>Binder 本地层的代码在 <a href="https://github.com/xdtianyu/android-6.0.0_r1/tree/master/frameworks/native/libs/binder">frameworks/native/libs/binder</a> 目录下， 此目录在 Android 系统编译后会生成 <code>libbinder.so</code> 文件，供 JNI 调用。<code>libbinder</code> 封装了所有对 binder 驱动的操作，是上层应用与驱动交互的桥梁。头文件则在 <a href="https://github.com/xdtianyu/android-6.0.0_r1/tree/master/frameworks/native/include/binder">frameworks/native/include/binder</a> 目录下。</p><h3 id="3-1-Binder-Native-的入口"><a href="#3-1-Binder-Native-的入口" class="headerlink" title="3.1 Binder Native 的入口"></a>3.1 Binder Native 的入口</h3><p><a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IInterface.cpp#L33">IInterface.cpp</a> 是 Binder 本地层入口，与 java 层的 <code>android.os.IInterface</code> 对应，提供 <code>asBinder()</code> 的实现，返回 <code>IBinder</code> 对象。</p><p>在头文件中有两个类 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/include/binder/IInterface.h#L50">BnInterface (Binder Native Interface)</a> 和 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/include/binder/IInterface.h#L63">BpInterface (Binder Proxy Interface)</a>, 对应于 java 层的 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L19">Stub</a> 和 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L92">Proxy</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sp&lt;IBinder&gt; IInterface::asBinder(<span class="keyword">const</span> IInterface* iface)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (iface == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;IInterface*&gt;(iface)-&gt;onAsBinder();</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> INTERFACE&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BnInterface</span> :</span> <span class="keyword">public</span> INTERFACE, <span class="keyword">public</span> BBinder</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> sp&lt;IInterface&gt;      queryLocalInterface(<span class="keyword">const</span> String16&amp; _descriptor);</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> String16&amp;     <span class="title">getInterfaceDescriptor</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> IBinder*            <span class="title">onAsBinder</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// ----------------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> INTERFACE&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BpInterface</span> :</span> <span class="keyword">public</span> INTERFACE, <span class="keyword">public</span> BpRefBase</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">                                BpInterface(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; remote);</div><div class="line"></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> IBinder*            <span class="title">onAsBinder</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>其中 <code>BnInterface</code> 是实现Stub功能的模板，扩展BBinder的onTransact()方法实现Binder命令的解析和执行。<code>BpInterface</code> 是实现Proxy功能的模板，BpRefBase里有个mRemote对象指向一个BpBinder对象。</p><h3 id="3-2-Binder-本地层的整个函数-方法调用过程"><a href="#3-2-Binder-本地层的整个函数-方法调用过程" class="headerlink" title="3.2 Binder 本地层的整个函数/方法调用过程"></a>3.2 Binder 本地层的整个函数/方法调用过程</h3><p><img src="https://raw.githubusercontent.com/xdtianyu/SourceAnalysis/master/art/binder_native_stack.png" alt="Binder本地函数调用图"></p><p>1. Java 层 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L147">IRemoteService.Stub.Proxy</a> 调用 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/os/Binder.java#L501">android.os.IBinder (实现在 android.os.Binder.BinderProxy)</a> 的 <code>transact()</code> 发送 <code>Stub.TRANSACTION_addUser</code> 命令。</p><p>2. 由 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/os/Binder.java#L507">BinderProxy.transact()</a> 进入 native 层。</p><p>3. 由 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/jni/android_util_Binder.cpp#L1246">jni</a> 转到 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/jni/android_util_Binder.cpp#L1246">android_os_BinderProxy_transact()</a> 函数。</p><p>4. 调用 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/jni/android_util_Binder.cpp#L1124">IBinder-&gt;transact</a> 函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> jboolean <span class="title">android_os_BinderProxy_transact</span><span class="params">(JNIEnv* env, jobject obj,</span></span></div><div class="line"><span class="function"><span class="params">        jint code, jobject dataObj, jobject replyObj, jint flags)</span> <span class="comment">// throws RemoteException</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    IBinder* target = (IBinder*)</div><div class="line">        env-&gt;GetLongField(obj, gBinderProxyOffsets.mObject);</div><div class="line">    <span class="keyword">status_t</span> err = target-&gt;transact(code, *data, reply, flags);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>而 <code>gBinderProxyOffsets.mObject</code> 则是在 java 层调用 <code>IBinder.getContextObject()</code> 时在 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/jni/android_util_Binder.cpp#L580">javaObjectForIBinder</a> 函数中设置的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> jobject <span class="title">android_os_BinderInternal_getContextObject</span><span class="params">(JNIEnv* env, jobject clazz)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    sp&lt;IBinder&gt; b = ProcessState::self()-&gt;getContextObject(<span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">return</span> javaObjectForIBinder(env, b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">jobject <span class="title">javaObjectForIBinder</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> sp&lt;IBinder&gt;&amp; val)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ...</div><div class="line">    LOGDEATH(<span class="string">"objectForBinder %p: created new proxy %p !\n"</span>, val.get(), object);</div><div class="line">    <span class="comment">// The proxy holds a reference to the native object.</span></div><div class="line">    env-&gt;SetLongField(object, gBinderProxyOffsets.mObject, (jlong)val.get());</div><div class="line">    val-&gt;incStrong((<span class="keyword">void</span>*)javaObjectForIBinder);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>经过 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/ProcessState.cpp#L85">ProcessState::getContextObject()</a> 和 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/ProcessState.cpp#L220">ProcessState::getStrongProxyForHandle()</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">sp&lt;IBinder&gt; ProcessState::getContextObject(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; <span class="comment">/*caller*/</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> getStrongProxyForHandle(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">sp&lt;IBinder&gt; ProcessState::getStrongProxyForHandle(<span class="keyword">int32_t</span> handle)</div><div class="line">&#123;</div><div class="line">    sp&lt;IBinder&gt; result;</div><div class="line">    ...</div><div class="line">    b = <span class="keyword">new</span> BpBinder(handle);</div><div class="line">    result = b;</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可见 <a href="">android_os_BinderProxy_transact()</a> 函数实际上调用的是 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/BpBinder.cpp#L159">BpBinder::transact()</a> 函数。</p><p>5. <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/BpBinder.cpp#L164">BpBinder::transact()</a> 则又调用了 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L548">IPCThreadState::self()-&gt;transact()</a> 函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> IPCThreadState::transact(<span class="keyword">int32_t</span> handle,</div><div class="line">                                  <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data,</div><div class="line">                                  Parcel* reply, <span class="keyword">uint32_t</span> flags)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">status_t</span> err = data.errorCheck();</div><div class="line"></div><div class="line">    flags |= TF_ACCEPT_FDS;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (err == NO_ERROR) &#123;</div><div class="line">        LOG_ONEWAY(<span class="string">"&gt;&gt;&gt;&gt; SEND from pid %d uid %d %s"</span>, getpid(), getuid(),</div><div class="line">            (flags &amp; TF_ONE_WAY) == <span class="number">0</span> ? <span class="string">"READ REPLY"</span> : <span class="string">"ONE WAY"</span>);</div><div class="line">        err = writeTransactionData(BC_TRANSACTION, flags, handle, code, data, <span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((flags &amp; TF_ONE_WAY) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (reply) &#123;</div><div class="line">            err = waitForResponse(reply);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Parcel fakeReply;</div><div class="line">            err = waitForResponse(&amp;fakeReply);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        err = waitForResponse(<span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> err;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">status_t</span> IPCThreadState::writeTransactionData(<span class="keyword">int32_t</span> cmd, <span class="keyword">uint32_t</span> binderFlags,</div><div class="line">    <span class="keyword">int32_t</span> handle, <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, <span class="keyword">status_t</span>* statusBuffer)</div><div class="line">&#123;</div><div class="line">    binder_transaction_data tr;</div><div class="line"></div><div class="line">    tr.target.ptr = <span class="number">0</span>; <span class="comment">/* Don't pass uninitialized stack data to a remote process */</span></div><div class="line">    tr.target.handle = handle;</div><div class="line">    tr.code = code;</div><div class="line">    ...</div><div class="line"></div><div class="line">    mOut.writeInt32(cmd);</div><div class="line">    mOut.write(&amp;tr, <span class="keyword">sizeof</span>(tr));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> NO_ERROR;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由函数内容可以看出， 数据再一次通过 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L904">writeTransactionData()</a> 传递给 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L934">mOut</a> 进行写入操作。 <code>mOut</code> 是一个 Parcel 对象， 声明在 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/include/binder/IPCThreadState.h#L123">IPCThreadState.h</a> 文件中。之后则调用 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L583">waitForResponse()</a> 函数。</p><p>6. <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L712">IPCThreadState::waitForResponse()</a> 在一个 <code>while</code> 循环里不断的调用 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L803">talkWithDriver()</a> 并检查是否有数据返回。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> IPCThreadState::waitForResponse(Parcel *reply, <span class="keyword">status_t</span> *acquireResult)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">uint32_t</span> cmd;</div><div class="line">    <span class="keyword">int32_t</span> err;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> ((err=talkWithDriver()) &lt; NO_ERROR) <span class="keyword">break</span>;</div><div class="line">        ...</div><div class="line"></div><div class="line">        cmd = (<span class="keyword">uint32_t</span>)mIn.readInt32();</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (cmd) &#123;</div><div class="line">        <span class="keyword">case</span> BR_TRANSACTION_COMPLETE:</div><div class="line">            ...</div><div class="line"></div><div class="line">        <span class="keyword">case</span> BR_REPLY:</div><div class="line">            &#123;</div><div class="line">                binder_transaction_data tr;</div><div class="line">                err = mIn.read(&amp;tr, <span class="keyword">sizeof</span>(tr));</div><div class="line">                ALOG_ASSERT(err == NO_ERROR, <span class="string">"Not enough command data for brREPLY"</span>);</div><div class="line">                <span class="keyword">if</span> (err != NO_ERROR) <span class="keyword">goto</span> finish;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (reply) &#123;</div><div class="line">                    <span class="keyword">if</span> ((tr.flags &amp; TF_STATUS_CODE) == <span class="number">0</span>) &#123;</div><div class="line">                        reply-&gt;ipcSetDataReference(</div><div class="line">                            <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">uint8_t</span>*&gt;(tr.data.ptr.buffer),</div><div class="line">                            tr.data_size,</div><div class="line">                            <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">binder_size_t</span>*&gt;(tr.data.ptr.offsets),</div><div class="line">                            tr.offsets_size/<span class="keyword">sizeof</span>(<span class="keyword">binder_size_t</span>),</div><div class="line">                            freeBuffer, <span class="keyword">this</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        err = *<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">status_t</span>*&gt;(tr.data.ptr.buffer);</div><div class="line">                        freeBuffer(<span class="literal">NULL</span>,</div><div class="line">                            <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">uint8_t</span>*&gt;(tr.data.ptr.buffer),</div><div class="line">                            tr.data_size,</div><div class="line">                            <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">binder_size_t</span>*&gt;(tr.data.ptr.offsets),</div><div class="line">                            tr.offsets_size/<span class="keyword">sizeof</span>(<span class="keyword">binder_size_t</span>), <span class="keyword">this</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    freeBuffer(<span class="literal">NULL</span>,</div><div class="line">                        <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">uint8_t</span>*&gt;(tr.data.ptr.buffer),</div><div class="line">                        tr.data_size,</div><div class="line">                        <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">binder_size_t</span>*&gt;(tr.data.ptr.offsets),</div><div class="line">                        tr.offsets_size/<span class="keyword">sizeof</span>(<span class="keyword">binder_size_t</span>), <span class="keyword">this</span>);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">goto</span> finish;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            err = executeCommand(cmd);</div><div class="line">            <span class="keyword">if</span> (err != NO_ERROR) <span class="keyword">goto</span> finish;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>7. <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L803">IPCThreadState::talkWithDriver()</a> 函数是真正与 binder 驱动交互的实现。<a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L856">ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr)</a> 就是使用系统调用函数 <code>ioctl</code> 向 binder 设备文件 <code>/dev/binder</code> 发送 <code>BINDER_WRITE_READ</code> 命令。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> IPCThreadState::talkWithDriver(<span class="keyword">bool</span> doReceive)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (mProcess-&gt;mDriverFD &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> -EBADF;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    binder_write_read bwr;</div><div class="line"></div><div class="line">    <span class="comment">// Is the read buffer empty?</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> needRead = mIn.dataPosition() &gt;= mIn.dataSize();</div><div class="line"></div><div class="line">    <span class="comment">// We don't want to write anything if we are still reading</span></div><div class="line">    <span class="comment">// from data left in the input buffer and the caller</span></div><div class="line">    <span class="comment">// has requested to read the next data.</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> outAvail = (!doReceive || needRead) ? mOut.dataSize() : <span class="number">0</span>;</div><div class="line"></div><div class="line">    bwr.write_size = outAvail;</div><div class="line">    bwr.write_buffer = (<span class="keyword">uintptr_t</span>)mOut.data();</div><div class="line"></div><div class="line">    <span class="comment">// This is what we'll read.</span></div><div class="line">    <span class="keyword">if</span> (doReceive &amp;&amp; needRead) &#123;</div><div class="line">        bwr.read_size = mIn.dataCapacity();</div><div class="line">        bwr.read_buffer = (<span class="keyword">uintptr_t</span>)mIn.data();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        bwr.read_size = <span class="number">0</span>;</div><div class="line">        bwr.read_buffer = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Return immediately if there is nothing to do.</span></div><div class="line">    <span class="keyword">if</span> ((bwr.write_size == <span class="number">0</span>) &amp;&amp; (bwr.read_size == <span class="number">0</span>)) <span class="keyword">return</span> NO_ERROR;</div><div class="line"></div><div class="line">    bwr.write_consumed = <span class="number">0</span>;</div><div class="line">    bwr.read_consumed = <span class="number">0</span>;</div><div class="line">    <span class="keyword">status_t</span> err;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(HAVE_ANDROID_OS)</span></div><div class="line">        <span class="comment">// 使用系统调用 ioctl 向 /dev/binder 发送 BINDER_WRITE_READ 命令</span></div><div class="line">        <span class="keyword">if</span> (ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr) &gt;= <span class="number">0</span>)</div><div class="line">            err = NO_ERROR;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            err = -errno;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">        err = INVALID_OPERATION;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mProcess-&gt;mDriverFD &lt;= <span class="number">0</span>) &#123;</div><div class="line">            err = -EBADF;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">while</span> (err == -EINTR);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (err &gt;= NO_ERROR) &#123;</div><div class="line">        <span class="keyword">if</span> (bwr.write_consumed &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (bwr.write_consumed &lt; mOut.dataSize())</div><div class="line">                mOut.remove(<span class="number">0</span>, bwr.write_consumed);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                mOut.setDataSize(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (bwr.read_consumed &gt; <span class="number">0</span>) &#123;</div><div class="line">            mIn.setDataSize(bwr.read_consumed);</div><div class="line">            mIn.setDataPosition(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> NO_ERROR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>经过 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L718">IPCThreadState::talkWithDriver()</a> ,就将数据发送给了 Binder 驱动。</p><p>继续追踪 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L723">IPCThreadState::waitForResponse()</a> ，可以从 第6步 发现 <code>IPCThreadState</code> 不断的循环读取 Binder 驱动返回，获取到返回命令后执行了 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L787">executeCommand(cmd)</a> 函数。</p><p>8. <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L947">IPCThreadState::executeCommand()</a> 处理 Binder 驱动返回命令</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> IPCThreadState::executeCommand(<span class="keyword">int32_t</span> cmd)</div><div class="line">&#123;</div><div class="line">    BBinder* obj;</div><div class="line">    RefBase::weakref_type* refs;</div><div class="line">    <span class="keyword">status_t</span> result = NO_ERROR;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> ((<span class="keyword">uint32_t</span>)cmd) &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">case</span> BR_TRANSACTION:</div><div class="line">        &#123;</div><div class="line">            binder_transaction_data tr;</div><div class="line">            result = mIn.read(&amp;tr, <span class="keyword">sizeof</span>(tr));</div><div class="line">            ...</div><div class="line">            Parcel buffer;</div><div class="line">            buffer.ipcSetDataReference(</div><div class="line">                <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">uint8_t</span>*&gt;(tr.data.ptr.buffer),</div><div class="line">                tr.data_size,</div><div class="line">                <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">binder_size_t</span>*&gt;(tr.data.ptr.offsets),</div><div class="line">                tr.offsets_size/<span class="keyword">sizeof</span>(<span class="keyword">binder_size_t</span>), freeBuffer, <span class="keyword">this</span>);</div><div class="line">            ...</div><div class="line"></div><div class="line">            Parcel reply;</div><div class="line">            <span class="keyword">status_t</span> error;</div><div class="line">            <span class="keyword">if</span> (tr.target.ptr) &#123;</div><div class="line">                sp&lt;BBinder&gt; b((BBinder*)tr.cookie);</div><div class="line">                error = b-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                error = the_context_object-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);</div><div class="line">            &#125;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>9. 可以看出其调用了 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L1085#L1091">BBinder::transact()</a> 函数，将数据返回给上层。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">status_t</span> BBinder::transact(</div><div class="line">    <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, Parcel* reply, <span class="keyword">uint32_t</span> flags)</div><div class="line">&#123;</div><div class="line">    data.setDataPosition(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">status_t</span> err = NO_ERROR;</div><div class="line">    <span class="keyword">switch</span> (code) &#123;</div><div class="line">        <span class="keyword">case</span> PING_TRANSACTION:</div><div class="line">            reply-&gt;writeInt32(pingBinder());</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            err = onTransact(code, data, reply, flags);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (reply != <span class="literal">NULL</span>) &#123;</div><div class="line">        reply-&gt;setDataPosition(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>10. 而这里的 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L1085#L1091">b-&gt;transact(tr.code, buffer, &amp;reply, tr.flags)</a> 中的 <code>b (BBinder)</code> 是 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/jni/android_util_Binder.cpp#L217">JavaBBinder</a> 的实例，所以会调用 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/jni/android_util_Binder.cpp#L247">JavaBBinder::onTransact()</a> 函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// frameworks/base/core/jni/android_util_Binder.cpp</span></div><div class="line"><span class="function"><span class="keyword">virtual</span> status_t <span class="title">onTransact</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, Parcel* reply, <span class="keyword">uint32_t</span> flags = <span class="number">0</span>)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        JNIEnv* env = javavm_to_jnienv(mVM);</div><div class="line">        ...</div><div class="line">        jboolean res = env-&gt;CallBooleanMethod(mObject, gBinderOffsets.mExecTransact,</div><div class="line">            code, <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(&amp;data), <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(reply), flags);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">int_register_android_os_Binder</span><span class="params">(JNIEnv* env)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ...</div><div class="line">    gBinderOffsets.mExecTransact = GetMethodIDOrDie(env, clazz, <span class="string">"execTransact"</span>, <span class="string">"(IJJI)Z"</span>);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>11. 可见 JNI 通过 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/jni/android_util_Binder.cpp#L260">gBinderOffsets.mExecTransact</a> 最后执行了 <code>android.os.Binder</code> 的 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/jni/android_util_Binder.cpp#L865">execTransact()</a> 方法。</p><p><a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/os/Binder.java#L442">execTransact()</a> 方法是 jni 回调的入口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Entry point from android_util_Binder.cpp's onTransact</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">execTransact</span><span class="params">(<span class="keyword">int</span> code, <span class="keyword">long</span> dataObj, <span class="keyword">long</span> replyObj,</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        Parcel data = Parcel.obtain(dataObj);</div><div class="line">        Parcel reply = Parcel.obtain(replyObj);</div><div class="line">        ...</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            res = onTransact(code, data, reply, flags);</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>12. 而我们则在服务端 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L19">IRemoteService.Stub</a> 重载了 <a href="https://github.com/xdtianyu/AidlExample/blob/master/app/build/generated/source/aidl/debug/org/xdty/remoteservice/IRemoteService.java#L51">onTransact()</a> 方法，所以数据最后会回到我们的服务端并执行服务端实现的 <code>addUser()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span></span></div><div class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">xdty</span>.<span class="title">remoteservice</span>.<span class="title">IRemoteService</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply,</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (code) &#123;</div><div class="line">            <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</div><div class="line">                reply.writeString(DESCRIPTOR);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> TRANSACTION_basicTypes: &#123;</div><div class="line">                ...</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> TRANSACTION_addUser: &#123;</div><div class="line">                data.enforceInterface(DESCRIPTOR);</div><div class="line">                org.xdty.remoteservice.User _arg0;</div><div class="line">                <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</div><div class="line">                    _arg0 = org.xdty.remoteservice.User.CREATOR.createFromParcel(data);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    _arg0 = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">this</span>.addUser(_arg0);</div><div class="line">                reply.writeNoException();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述过程就是所有的 Native 层客户端到服务端的调用过程，总结下来就是 客户端进程发送 <code>BC_TRANSACTION</code> 到 Binder 驱动，服务端进程监听返回的 <code>BR_TRANSACTION</code> 命令并处理。如果是服务端向客户端返回数据，类似的是服务端发送 <code>BC_REPLY</code> 命令， 客户端监听 <code>BR_REPLY</code> 命令。</p><h3 id="3-3-Binder-设备文件的打开和读写"><a href="#3-3-Binder-设备文件的打开和读写" class="headerlink" title="3.3 Binder 设备文件的打开和读写"></a>3.3 Binder 设备文件的打开和读写</h3><p><strong>1. 设备的打开</strong></p><p>在上一小节中我们看到 JNI 过程中调用了 <code>ProcessState::getContextObject()</code> 函数， 在 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/ProcessState.cpp#L340">ProcessState</a> 初始化时会打开 binder 设备</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ProcessState.cpp</span></div><div class="line">ProcessState::ProcessState()</div><div class="line">    : mDriverFD(open_driver())</div><div class="line">    ...</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/ProcessState.cpp#L311#L337">open_driver()</a> 函数内容如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ProcessState.cpp</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">open_driver</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">// 打开设备文件</span></div><div class="line">    <span class="keyword">int</span> fd = open(<span class="string">"/dev/binder"</span>, O_RDWR);</div><div class="line">    <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</div><div class="line">        fcntl(fd, F_SETFD, FD_CLOEXEC);</div><div class="line">        <span class="keyword">int</span> vers = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 获取驱动版本</span></div><div class="line">        <span class="keyword">status_t</span> result = ioctl(fd, BINDER_VERSION, &amp;vers);</div><div class="line">        <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</div><div class="line">            ALOGE(<span class="string">"Binder ioctl to obtain version failed: %s"</span>, strerror(errno));</div><div class="line">            close(fd);</div><div class="line">            fd = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 检查驱动版本是否一致</span></div><div class="line">        <span class="keyword">if</span> (result != <span class="number">0</span> || vers != BINDER_CURRENT_PROTOCOL_VERSION) &#123;</div><div class="line">            ALOGE(<span class="string">"Binder driver protocol does not match user space protocol!"</span>);</div><div class="line">            close(fd);</div><div class="line">            fd = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 设置最多 15 个 binder 线程</span></div><div class="line">        <span class="keyword">size_t</span> maxThreads = DEFAULT_MAX_BINDER_THREADS;</div><div class="line">        result = ioctl(fd, BINDER_SET_MAX_THREADS, &amp;maxThreads);</div><div class="line">        <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</div><div class="line">            ALOGE(<span class="string">"Binder ioctl to set max threads failed: %s"</span>, strerror(errno));</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ALOGW(<span class="string">"Opening '/dev/binder' failed: %s\n"</span>, strerror(errno));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fd;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>2. 设备的读写</strong></p><p>打开设备文件后，文件描述符被保存在 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/ProcessState.cpp#L340">mDriverFD</a>， 通过系统调用 <code>ioctl</code> 函数操作 <code>mDriverFD</code> 就可以实现和 binder 驱动的交互。</p><p>对 Binder 设备文件的所有读写及关闭操作则都在 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L805">IPCThreadState</a> 中，如上一小节提及到的 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L803">IPCThreadState::talkWithDriver</a> 函数</p><p><code>talkWithDriver()</code> 函数封装了 <code>BINDER_WRITE_READ</code> 命令，会从 binder 驱动读取或写入封装在 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L856">binder_write_read</a> 结构体中的本地或远程对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IPCThreadState.cpp</span></div><div class="line"><span class="keyword">status_t</span> IPCThreadState::talkWithDriver(<span class="keyword">bool</span> doReceive)</div><div class="line">&#123;   </div><div class="line">    binder_write_read bwr;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> needRead = mIn.dataPosition() &gt;= mIn.dataSize();</div><div class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> outAvail = (!doReceive || needRead) ? mOut.dataSize() : <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 写入数据</span></div><div class="line">    bwr.write_size = outAvail;</div><div class="line">    bwr.write_buffer = (<span class="keyword">uintptr_t</span>)mOut.data();</div><div class="line"></div><div class="line">    <span class="comment">// 读取数据</span></div><div class="line">    <span class="keyword">if</span> (doReceive &amp;&amp; needRead) &#123;</div><div class="line">        bwr.read_size = mIn.dataCapacity();</div><div class="line">        bwr.read_buffer = (<span class="keyword">uintptr_t</span>)mIn.data();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        bwr.read_size = <span class="number">0</span>;</div><div class="line">        bwr.read_buffer = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 使用 ioctl 系统调用发送 BINDER_WRITE_READ 命令到 biner 驱动</span></div><div class="line">    <span class="keyword">if</span> (ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr) &gt;= <span class="number">0</span>)</div><div class="line">        err = NO_ERROR;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看出，本地层是对应用与 binder 驱动交互的直接封装与实现，最终的数据传输仍是由驱动来完成的。本地层对底层驱动进行了完整的封装，上层应用只关心 transact() 和 onTransact() 回调，察觉不到 binder 驱动的存在，减轻了上层应用进程间通信开发的复杂度。</p><h2 id="4-Binder-驱动"><a href="#4-Binder-驱动" class="headerlink" title="4. Binder 驱动"></a>4. Binder 驱动</h2><p>关于 binder 驱动建议参考另一篇文章 <a href="http://blog.csdn.net/yangwen123/article/details/9316987" target="_blank" rel="external">深入分析Android Binder 驱动</a> <a href="[Android Binder](https://web.archive.org/web/20101016004342/http://www.gmier.com/node/11">原文</a>，本小节仍需要完善。</p><p>Binder 驱动是 Binder 的最终实现， ServiceManager 和 Client/Service 进程间通信最终都是由 Binder 驱动投递的。</p><p><img src="https://raw.githubusercontent.com/xdtianyu/SourceAnalysis/master/art/binder_reference.png" alt="Binder reference"></p><p>Binder 驱动的代码位于 kernel 代码的 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/tree/master/drivers/staging/android">drivers/staging/android</a> 目录下。主文件是 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h">binder.h</a> 和 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c">binder.c</a></p><p>进程间传输的数据被称为 Binder 对象，它是一个 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L49">flat_binder_object</a>，结构如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">flat_binder_object</span> &#123;</span></div><div class="line">    <span class="comment">/* 8 bytes for large_flat_header. */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>       type;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>       flags;</div><div class="line"></div><div class="line">    <span class="comment">/* 8 bytes of data. */</span></div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        <span class="keyword">void</span>        *binder;    <span class="comment">/* local object */</span></div><div class="line">        <span class="keyword">signed</span> <span class="keyword">long</span> handle;     <span class="comment">/* remote object */</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">/* extra data associated with local object */</span></div><div class="line">    <span class="keyword">void</span>            *cookie;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>其中 类型 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L29">type</a> 描述了 Binder 对象的类型，包含 <code>BINDER</code>(本地对象)、<code>HANDLE</code>(远程对象)、 <code>FD</code> 三大类(五种)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> &#123;</div><div class="line">    BINDER_TYPE_BINDER  = B_PACK_CHARS(<span class="string">'s'</span>, <span class="string">'b'</span>, <span class="string">'*'</span>, B_TYPE_LARGE),</div><div class="line">    BINDER_TYPE_WEAK_BINDER = B_PACK_CHARS(<span class="string">'w'</span>, <span class="string">'b'</span>, <span class="string">'*'</span>, B_TYPE_LARGE),</div><div class="line">    BINDER_TYPE_HANDLE  = B_PACK_CHARS(<span class="string">'s'</span>, <span class="string">'h'</span>, <span class="string">'*'</span>, B_TYPE_LARGE),</div><div class="line">    BINDER_TYPE_WEAK_HANDLE = B_PACK_CHARS(<span class="string">'w'</span>, <span class="string">'h'</span>, <span class="string">'*'</span>, B_TYPE_LARGE),</div><div class="line">    BINDER_TYPE_FD      = B_PACK_CHARS(<span class="string">'f'</span>, <span class="string">'d'</span>, <span class="string">'*'</span>, B_TYPE_LARGE),</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L52">flags</a> 则表述了<a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L110">传输方式</a>，如异步、无返回等</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> transaction_flags &#123;</div><div class="line">    TF_ONE_WAY  = <span class="number">0x01</span>, <span class="comment">/* this is a one-way call: async, no return */</span></div><div class="line">    TF_ROOT_OBJECT  = <span class="number">0x04</span>, <span class="comment">/* contents are the component's root object */</span></div><div class="line">    TF_STATUS_CODE  = <span class="number">0x08</span>, <span class="comment">/* contents are a 32-bit status code */</span></div><div class="line">    TF_ACCEPT_FDS   = <span class="number">0x10</span>, <span class="comment">/* allow replies with file descriptors */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>而 <code>flat_binder_object</code> 中的 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L55">union 联合体</a> 就是要传输的数据，当类型为 <code>BINDER</code> 时， 数据就是一个本地对象 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L56">*binder</a>，而类型为 <code>HANDLE</code> 时，数据则是一个远程对象 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L57">handle</a>。</p><p>当 <code>flat_binder_object</code> 在进程间传递时， Binder 驱动会修改它的类型和数据，交换的代码参考 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L1671">binder_transaction</a> 的实现。</p><p>该如何理解本地 <code>BINDER</code> 对象和远程 <code>HANDLE</code> 对象呢？其实它们都代表同一个对象，不过是从不同的角度来看。举例来说，假如进程 <code>RemoteService</code> 有个对象 <a href="https://github.com/xdtianyu/AidlExample/blob/master/remoteservice/src/main/java/org/xdty/remoteservice/RemoteService.java#L11">mBinder</a>，对于 <code>RemoteService</code> 来说，<code>mBinder</code> 就是一个本地的 <code>BINDER</code> 对象；如果进程 <code>app</code> 通过 Binder 驱动访问 <code>RemoteService</code> 的 <code>mBinder</code> 对象，对于 <code>app</code> 来说， <code>mBinder</code> 就是一个 <code>HANDLE</code>。因此，从根本上来说 <code>handle</code> 和 <code>binder</code> 都指向 <code>RemoteService</code> 的 <code>mBinder</code>。本地对象还可以带有额外的数据，保存在 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L61">cookie</a> 中。</p><p>Binder 驱动直接操作的最外层数据结构是 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L117">binder_transaction_data</a>， Binder 对象 <code>flat_binder_object</code> 被封装在 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L142">binder_transaction_data</a> 结构体中。</p><p><code>binder_transaction_data</code> 数据结构才是真正传输的数据，其定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction_data</span> &#123;</span></div><div class="line">    <span class="comment">/* The first two are only used for bcTRANSACTION and brTRANSACTION,</span></div><div class="line"><span class="comment">     * identifying the target and contents of the transaction.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        <span class="keyword">size_t</span>  handle; <span class="comment">/* target descriptor of command transaction */</span></div><div class="line">        <span class="keyword">void</span>    *ptr;   <span class="comment">/* target descriptor of return transaction */</span></div><div class="line">    &#125; target;</div><div class="line">    <span class="keyword">void</span>        *cookie;    <span class="comment">/* target object cookie */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>    code;       <span class="comment">/* transaction command */</span></div><div class="line"></div><div class="line">    <span class="comment">/* General information about the transaction. */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>    flags;</div><div class="line">    <span class="keyword">pid_t</span>       sender_pid;</div><div class="line">    <span class="keyword">uid_t</span>       sender_euid;</div><div class="line">    <span class="keyword">size_t</span>      data_size;  <span class="comment">/* number of bytes of data */</span></div><div class="line">    <span class="keyword">size_t</span>      offsets_size;   <span class="comment">/* number of bytes of offsets */</span></div><div class="line"></div><div class="line">    <span class="comment">/* If this transaction is inline, the data immediately</span></div><div class="line"><span class="comment">     * follows here; otherwise, it ends with a pointer to</span></div><div class="line"><span class="comment">     * the data buffer.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">            <span class="comment">/* transaction data */</span></div><div class="line">            <span class="keyword">const</span> <span class="keyword">void</span>  *buffer;</div><div class="line">            <span class="comment">/* offsets from buffer to flat_binder_object structs */</span></div><div class="line">            <span class="keyword">const</span> <span class="keyword">void</span>  *offsets;</div><div class="line">        &#125; ptr;</div><div class="line">        <span class="keyword">uint8_t</span> buf[<span class="number">8</span>];</div><div class="line">    &#125; data;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><code>flat_binder_object</code> 就被封装在 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L142">*buffer</a>中，其中的 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L126">unsigned int   code;</a> 则是传输命令，描述了 Binder 对象执行的操作。</p><h3 id="4-1-binder-设备的创建"><a href="#4-1-binder-设备的创建" class="headerlink" title="4.1 binder 设备的创建"></a>4.1 binder 设备的创建</h3><p><a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L3747">device_initcall()</a> 函数是内核加载驱动的入口函数，我们先来看这个函数的调用过程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">miscdevice</span> <span class="title">binder_miscdev</span> = &#123;</span></div><div class="line">    .minor = MISC_DYNAMIC_MINOR,</div><div class="line">    <span class="comment">// 设备文件 /dev/binder</span></div><div class="line">    .name = <span class="string">"binder"</span>,</div><div class="line">    <span class="comment">// 设备文件操作</span></div><div class="line">    .fops = &amp;binder_fops</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">binder_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 注册字符设备</span></div><div class="line">    ret = misc_register(&amp;binder_miscdev);</div><div class="line">    ...</div><div class="line">    <span class="comment">// 调试文件， 在 /sys/kernel/debug/binder 目录下</span></div><div class="line">    <span class="keyword">if</span> (binder_debugfs_dir_entry_root) &#123;</div><div class="line">        debugfs_create_file(<span class="string">"state"</span>,</div><div class="line">                    S_IRUGO,</div><div class="line">                    binder_debugfs_dir_entry_root,</div><div class="line">                    <span class="literal">NULL</span>,</div><div class="line">                    &amp;binder_state_fops);</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">device_initcall(binder_init);</div></pre></td></tr></table></figure><p>可以看出 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L3704">binder_init()</a> 使用 <code>misc_register()</code> 函数创建了 binder 设备。从 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L3716">misc_register(&amp;binder_miscdev);</a> 及 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L3695">.name = “binder”</a> 可以看出， binder 向 kernel 注册了一个 <code>/dev/binder</code> 的字符设备，而文件操作都在 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L3683">binder_fops</a> 结构体中定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">binder_fops</span> = &#123;</span></div><div class="line">    .owner = THIS_MODULE,</div><div class="line">    .poll = binder_poll,</div><div class="line">    .unlocked_ioctl = binder_ioctl,</div><div class="line">    .mmap = binder_mmap,</div><div class="line">    .open = binder_open,</div><div class="line">    .flush = binder_flush,</div><div class="line">    .release = binder_release,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>从上面 <code>binder_fops</code> 结构体可以看出，主要的操作是 <code>binder_ioctl()</code> <code>binder_mmap()</code> <code>binder_open()</code> 等函数实现的。</p><h3 id="4-2-binder-协议和数据结构"><a href="#4-2-binder-协议和数据结构" class="headerlink" title="4.2 binder 协议和数据结构"></a>4.2 binder 协议和数据结构</h3><p><a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h">binder.h</a> 文件中定义了 binder 协议和重要的数据结构。</p><p>首先在 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L29">enum</a> 中定义了 binder 处理的类型，引用或是句柄</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> &#123;</div><div class="line">    BINDER_TYPE_BINDER  = B_PACK_CHARS(<span class="string">'s'</span>, <span class="string">'b'</span>, <span class="string">'*'</span>, B_TYPE_LARGE),</div><div class="line">    BINDER_TYPE_WEAK_BINDER = B_PACK_CHARS(<span class="string">'w'</span>, <span class="string">'b'</span>, <span class="string">'*'</span>, B_TYPE_LARGE),</div><div class="line">    BINDER_TYPE_HANDLE  = B_PACK_CHARS(<span class="string">'s'</span>, <span class="string">'h'</span>, <span class="string">'*'</span>, B_TYPE_LARGE),</div><div class="line">    BINDER_TYPE_WEAK_HANDLE = B_PACK_CHARS(<span class="string">'w'</span>, <span class="string">'h'</span>, <span class="string">'*'</span>, B_TYPE_LARGE),</div><div class="line">    BINDER_TYPE_FD      = B_PACK_CHARS(<span class="string">'f'</span>, <span class="string">'d'</span>, <span class="string">'*'</span>, B_TYPE_LARGE),</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>下面这段宏定义则是在 <code>ioctl</code> 函数调用时可用的具体命令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_WRITE_READ       _IOWR(<span class="meta-string">'b'</span>, 1, struct binder_write_read)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_SET_IDLE_TIMEOUT     _IOW(<span class="meta-string">'b'</span>, 3, int64_t)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_SET_MAX_THREADS      _IOW(<span class="meta-string">'b'</span>, 5, size_t)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_SET_IDLE_PRIORITY    _IOW(<span class="meta-string">'b'</span>, 6, int)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_SET_CONTEXT_MGR      _IOW(<span class="meta-string">'b'</span>, 7, int)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_THREAD_EXIT      _IOW(<span class="meta-string">'b'</span>, 8, int)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_VERSION          _IOWR(<span class="meta-string">'b'</span>, 9, struct binder_version)</span></div></pre></td></tr></table></figure><p>在 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L166">BinderDriverReturnProtocol</a> 和 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L254">BinderDriverCommandProtocol</a> 中 则分别定义了 客户端调用 和 服务端 返回的命令。</p><h3 id="4-3-binder-驱动文件操作"><a href="#4-3-binder-驱动文件操作" class="headerlink" title="4.3 binder 驱动文件操作"></a>4.3 binder 驱动文件操作</h3><p>上文已经提到，所有的操作定义在 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L3683">binder_fops</a> 结构体中，下面讲述这些操作。</p><p><strong>设备的打开 - binder_open() 函数</strong></p><p>用户空间在打开 <code>/dev/binder</code> 设备时，驱动会出发 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L3004">binder_open()</a> 函数的响应。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_open</span><span class="params">(struct inode *nodp, struct file *filp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span>;</span></div><div class="line"></div><div class="line">    <span class="comment">// 分配 binder_proc 数据结构内存</span></div><div class="line">    proc = kzalloc(<span class="keyword">sizeof</span>(*proc), GFP_KERNEL);</div><div class="line">    <span class="keyword">if</span> (proc == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> -ENOMEM;</div><div class="line"></div><div class="line">    <span class="comment">// 增加当前线程/进程的引用计数并赋值给tsk</span></div><div class="line">    get_task_struct(current);</div><div class="line">    proc-&gt;tsk = current;</div><div class="line">    <span class="comment">// 初始化队列</span></div><div class="line">    INIT_LIST_HEAD(&amp;proc-&gt;todo);</div><div class="line">    init_waitqueue_head(&amp;proc-&gt;wait);</div><div class="line">    proc-&gt;default_priority = task_nice(current);</div><div class="line"></div><div class="line">    binder_lock(__func__);</div><div class="line"></div><div class="line">    <span class="comment">// 增加BINDER_STAT_PROC的对象计数</span></div><div class="line">    binder_stats_created(BINDER_STAT_PROC);</div><div class="line">    <span class="comment">// 添加 proc_node 到 binder_procs 全局列表中，这样任何进程就可以访问到其他进程的 binder_proc 对象了</span></div><div class="line">    hlist_add_head(&amp;proc-&gt;proc_node, &amp;binder_procs);</div><div class="line">    <span class="comment">// 保存进程 id</span></div><div class="line">    proc-&gt;pid = current-&gt;group_leader-&gt;pid;</div><div class="line">    INIT_LIST_HEAD(&amp;proc-&gt;delivered_death);</div><div class="line">    <span class="comment">// 驱动文件 private_data 指向 proc</span></div><div class="line">    filp-&gt;private_data = proc;</div><div class="line"></div><div class="line">    binder_unlock(__func__);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>驱动文件释放 - binder_release() 函数</strong></p><p>在用户空间关闭驱动设备文件时，会调用 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L3068">binder_release()</a> 函数，清理 binder_proc 对象，释放占用的内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_release</span><span class="params">(struct inode *nodp, struct file *filp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></div><div class="line">    binder_defer_work(proc, BINDER_DEFERRED_RELEASE);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span></div><div class="line">binder_defer_work(struct binder_proc *proc, <span class="keyword">enum</span> binder_deferred_state defer)</div><div class="line">&#123;</div><div class="line">    mutex_lock(&amp;binder_deferred_lock);</div><div class="line">    proc-&gt;deferred_work |= defer;</div><div class="line">    <span class="keyword">if</span> (hlist_unhashed(&amp;proc-&gt;deferred_work_node)) &#123;</div><div class="line">        <span class="comment">// 添加到释放队列中</span></div><div class="line">        hlist_add_head(&amp;proc-&gt;deferred_work_node,</div><div class="line">                &amp;binder_deferred_list);</div><div class="line">        queue_work(binder_deferred_workqueue, &amp;binder_deferred_work);</div><div class="line">    &#125;</div><div class="line">    mutex_unlock(&amp;binder_deferred_lock);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>内存映射 - binder_mmap() 函数</strong></p><p><a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L2905">binder_mmap()</a> 函数把设备内存映射到用户进程地址空间中，这样就可以像操作用户内存那样操作设备内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_mmap</span><span class="params">(struct file *filp, struct vm_area_struct *vma)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vm_struct</span> *<span class="title">area</span>;</span></div><div class="line">    <span class="comment">// 获得 binder_proc 对象</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *failure_string;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_buffer</span> *<span class="title">buffer</span>;</span></div><div class="line"></div><div class="line">    <span class="comment">// 最多只分配 4M 的内存</span></div><div class="line">    <span class="keyword">if</span> ((vma-&gt;vm_end - vma-&gt;vm_start) &gt; SZ_4M)</div><div class="line">        vma-&gt;vm_end = vma-&gt;vm_start + SZ_4M;</div><div class="line"></div><div class="line">    <span class="comment">// 检查 flags</span></div><div class="line">    <span class="keyword">if</span> (vma-&gt;vm_flags &amp; FORBIDDEN_MMAP_FLAGS) &#123;</div><div class="line">        ret = -EPERM;</div><div class="line">        failure_string = <span class="string">"bad vm_flags"</span>;</div><div class="line">        <span class="keyword">goto</span> err_bad_arg;</div><div class="line">    &#125;</div><div class="line">    vma-&gt;vm_flags = (vma-&gt;vm_flags | VM_DONTCOPY) &amp; ~VM_MAYWRITE;</div><div class="line"></div><div class="line">    mutex_lock(&amp;binder_mmap_lock);</div><div class="line">    <span class="comment">// 检查是否已经映射</span></div><div class="line">    <span class="keyword">if</span> (proc-&gt;buffer) &#123;</div><div class="line">        ret = -EBUSY;</div><div class="line">        failure_string = <span class="string">"already mapped"</span>;</div><div class="line">        <span class="keyword">goto</span> err_already_mapped;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 申请内核虚拟内存空间</span></div><div class="line">    area = get_vm_area(vma-&gt;vm_end - vma-&gt;vm_start, VM_IOREMAP);</div><div class="line">    <span class="keyword">if</span> (area == <span class="literal">NULL</span>) &#123;</div><div class="line">        ret = -ENOMEM;</div><div class="line">        failure_string = <span class="string">"get_vm_area"</span>;</div><div class="line">        <span class="keyword">goto</span> err_get_vm_area_failed;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 将申请到的内存地址保存到 binder_proc 对象中</span></div><div class="line">    proc-&gt;buffer = area-&gt;addr;</div><div class="line">    proc-&gt;user_buffer_offset = vma-&gt;vm_start - (<span class="keyword">uintptr_t</span>)proc-&gt;buffer;</div><div class="line">    mutex_unlock(&amp;binder_mmap_lock);</div><div class="line"></div><div class="line">    <span class="comment">// 根据请求到的内存空间大小，分配给 binder_proc 对象的 pages， 用于保存指向物理页的指针</span></div><div class="line">    proc-&gt;pages = kzalloc(<span class="keyword">sizeof</span>(proc-&gt;pages[<span class="number">0</span>]) * ((vma-&gt;vm_end - vma-&gt;vm_start) / PAGE_SIZE), GFP_KERNEL);</div><div class="line">    <span class="keyword">if</span> (proc-&gt;pages == <span class="literal">NULL</span>) &#123;</div><div class="line">        ret = -ENOMEM;</div><div class="line">        failure_string = <span class="string">"alloc page array"</span>;</div><div class="line">        <span class="keyword">goto</span> err_alloc_pages_failed;</div><div class="line">    &#125;</div><div class="line">    proc-&gt;buffer_size = vma-&gt;vm_end - vma-&gt;vm_start;</div><div class="line"></div><div class="line">    vma-&gt;vm_ops = &amp;binder_vm_ops;</div><div class="line">    vma-&gt;vm_private_data = proc;</div><div class="line"></div><div class="line">    <span class="comment">// 分配一个页的物理内存</span></div><div class="line">    <span class="keyword">if</span> (binder_update_page_range(proc, <span class="number">1</span>, proc-&gt;buffer, proc-&gt;buffer + PAGE_SIZE, vma)) &#123;</div><div class="line">        ret = -ENOMEM;</div><div class="line">        failure_string = <span class="string">"alloc small buf"</span>;</div><div class="line">        <span class="keyword">goto</span> err_alloc_small_buf_failed;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 内存提供给 binder_buffer</span></div><div class="line">    buffer = proc-&gt;buffer;</div><div class="line">    <span class="comment">// 初始化 proc-&gt;buffers 链表</span></div><div class="line">    INIT_LIST_HEAD(&amp;proc-&gt;buffers);</div><div class="line">    <span class="comment">// 将 binder_buffer 对象放入到 proc-&gt;buffers 链表中</span></div><div class="line">    list_add(&amp;buffer-&gt;entry, &amp;proc-&gt;buffers);</div><div class="line">    buffer-&gt;<span class="built_in">free</span> = <span class="number">1</span>;</div><div class="line">    binder_insert_free_buffer(proc, buffer);</div><div class="line">    proc-&gt;free_async_space = proc-&gt;buffer_size / <span class="number">2</span>;</div><div class="line">    barrier();</div><div class="line">    proc-&gt;files = get_files_struct(proc-&gt;tsk);</div><div class="line">    proc-&gt;vma = vma;</div><div class="line">    proc-&gt;vma_vm_mm = vma-&gt;vm_mm;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>驱动命令接口 - binder_ioctl() 函数</strong></p><p>用户态程序调用 <code>ioctl</code> 系统函数向 <code>/dev/binder</code> 设备发送数据时，会触发 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L2734">binder_ioctl()</a> 函数响应。</p><p>上文数据结构中已经提到了 <code>binder_ioctl</code> 可以处理的 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L87">命令</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 核心命令，数据的读写</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_WRITE_READ       _IOWR(<span class="meta-string">'b'</span>, 1, struct binder_write_read)</span></div><div class="line"><span class="comment">// 设置最大线程数</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_SET_MAX_THREADS      _IOW(<span class="meta-string">'b'</span>, 5, size_t)</span></div><div class="line"><span class="comment">// 设置 context manager</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_SET_CONTEXT_MGR      _IOW(<span class="meta-string">'b'</span>, 7, int)</span></div><div class="line"><span class="comment">// 线程退出命令</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_THREAD_EXIT      _IOW(<span class="meta-string">'b'</span>, 8, int)</span></div><div class="line"><span class="comment">// binder 驱动的版本</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_VERSION          _IOWR(<span class="meta-string">'b'</span>, 9, struct binder_version)</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">binder_ioctl</span><span class="params">(struct file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> *<span class="title">thread</span>;</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> size = _IOC_SIZE(cmd);</div><div class="line">    <span class="keyword">void</span> __user *ubuf = (<span class="keyword">void</span> __user *)arg;</div><div class="line"></div><div class="line">    <span class="comment">// 检查是否有错误</span></div><div class="line">    ret = wait_event_interruptible(binder_user_error_wait, binder_stop_on_user_error &lt; <span class="number">2</span>);</div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">        <span class="keyword">goto</span> err_unlocked;</div><div class="line"></div><div class="line">    binder_lock(__func__);</div><div class="line">    <span class="comment">// 获取 binder_thread 对象</span></div><div class="line">    thread = binder_get_thread(proc);</div><div class="line">    <span class="keyword">if</span> (thread == <span class="literal">NULL</span>) &#123;</div><div class="line">        ret = -ENOMEM;</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (cmd) &#123;</div><div class="line">    <span class="keyword">case</span> BINDER_WRITE_READ: &#123;</div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">binder_write_read</span> <span class="title">bwr</span>;</span></div><div class="line">        <span class="keyword">if</span> (size != <span class="keyword">sizeof</span>(struct binder_write_read)) &#123;</div><div class="line">            ret = -EINVAL;</div><div class="line">            <span class="keyword">goto</span> err;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 从用户空间拷贝 binder_write_read 到 binder 驱动，储存在 bwr</span></div><div class="line">        <span class="keyword">if</span> (copy_from_user(&amp;bwr, ubuf, <span class="keyword">sizeof</span>(bwr))) &#123;</div><div class="line">            ret = -EFAULT;</div><div class="line">            <span class="keyword">goto</span> err;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (bwr.write_size &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 执行写入操作</span></div><div class="line">            ret = binder_thread_write(proc, thread, (<span class="keyword">void</span> __user *)bwr.write_buffer, bwr.write_size, &amp;bwr.write_consumed);</div><div class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</div><div class="line">                bwr.read_consumed = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span> (copy_to_user(ubuf, &amp;bwr, <span class="keyword">sizeof</span>(bwr)))</div><div class="line">                    ret = -EFAULT;</div><div class="line">                <span class="keyword">goto</span> err;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (bwr.read_size &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 执行读取操作</span></div><div class="line">            ret = binder_thread_read(proc, thread, (<span class="keyword">void</span> __user *)bwr.read_buffer, bwr.read_size, &amp;bwr.read_consumed, filp-&gt;f_flags &amp; O_NONBLOCK);</div><div class="line">            <span class="keyword">if</span> (!list_empty(&amp;proc-&gt;todo))</div><div class="line">                wake_up_interruptible(&amp;proc-&gt;wait);</div><div class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (copy_to_user(ubuf, &amp;bwr, <span class="keyword">sizeof</span>(bwr)))</div><div class="line">                    ret = -EFAULT;</div><div class="line">                <span class="keyword">goto</span> err;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 操作完成后将数据返回给用户空间</span></div><div class="line">        <span class="keyword">if</span> (copy_to_user(ubuf, &amp;bwr, <span class="keyword">sizeof</span>(bwr))) &#123;</div><div class="line">            ret = -EFAULT;</div><div class="line">            <span class="keyword">goto</span> err;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">case</span> BINDER_SET_MAX_THREADS:</div><div class="line">        <span class="comment">// 设置最大线程，从用户空间拷贝数据到 proc-&gt;max_threads</span></div><div class="line">        <span class="keyword">if</span> (copy_from_user(&amp;proc-&gt;max_threads, ubuf, <span class="keyword">sizeof</span>(proc-&gt;max_threads))) &#123;</div><div class="line">            ret = -EINVAL;</div><div class="line">            <span class="keyword">goto</span> err;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> BINDER_SET_CONTEXT_MGR:</div><div class="line">        <span class="comment">// 检查是否已经设置</span></div><div class="line">        <span class="keyword">if</span> (binder_context_mgr_node != <span class="literal">NULL</span>) &#123;</div><div class="line">            ret = -EBUSY;</div><div class="line">            <span class="keyword">goto</span> err;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 设置 context manager</span></div><div class="line">        ret = security_binder_set_context_mgr(proc-&gt;tsk);</div><div class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">goto</span> err;</div><div class="line">        <span class="keyword">if</span> (binder_context_mgr_uid != <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (binder_context_mgr_uid != current-&gt;cred-&gt;euid) &#123;</div><div class="line">                ret = -EPERM;</div><div class="line">                <span class="keyword">goto</span> err;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            binder_context_mgr_uid = current-&gt;cred-&gt;euid;</div><div class="line">        <span class="comment">// 创建 binder_context_mgr_node 节点</span></div><div class="line">        binder_context_mgr_node = binder_new_node(proc, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">        <span class="keyword">if</span> (binder_context_mgr_node == <span class="literal">NULL</span>) &#123;</div><div class="line">            ret = -ENOMEM;</div><div class="line">            <span class="keyword">goto</span> err;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 初始化节点数据</span></div><div class="line">        binder_context_mgr_node-&gt;local_weak_refs++;</div><div class="line">        binder_context_mgr_node-&gt;local_strong_refs++;</div><div class="line">        binder_context_mgr_node-&gt;has_strong_ref = <span class="number">1</span>;</div><div class="line">        binder_context_mgr_node-&gt;has_weak_ref = <span class="number">1</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> BINDER_THREAD_EXIT:</div><div class="line">        <span class="comment">// 线程退出，释放资源</span></div><div class="line">        binder_free_thread(proc, thread);</div><div class="line">        thread = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> BINDER_VERSION:</div><div class="line">        <span class="comment">// 将 binder 驱动版本号写入到用户空间 ubuf-&gt;protocol_version 中</span></div><div class="line">        <span class="keyword">if</span> (put_user(BINDER_CURRENT_PROTOCOL_VERSION, &amp;((struct binder_version *)ubuf)-&gt;protocol_version)) &#123;</div><div class="line">            ret = -EINVAL;</div><div class="line">            <span class="keyword">goto</span> err;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        ret = -EINVAL;</div><div class="line">        <span class="keyword">goto</span> err;</div><div class="line">    &#125;</div><div class="line">    ret = <span class="number">0</span>;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> struct binder_node *<span class="title">binder_new_node</span><span class="params">(struct binder_proc *proc,</span></span></div><div class="line"><span class="function"><span class="params">                       <span class="keyword">void</span> __user *ptr,</span></span></div><div class="line"><span class="function"><span class="params">                       <span class="keyword">void</span> __user *cookie)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> **<span class="title">p</span> = &amp;<span class="title">proc</span>-&gt;<span class="title">nodes</span>.<span class="title">rb_node</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> *<span class="title">parent</span> = <span class="title">NULL</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">node</span>;</span></div><div class="line"></div><div class="line">    <span class="comment">// 查找要插入节点的父节点</span></div><div class="line">    <span class="keyword">while</span> (*p) &#123;</div><div class="line">        parent = *p;</div><div class="line">        node = rb_entry(parent, struct binder_node, rb_node);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ptr &lt; node-&gt;ptr)</div><div class="line">            p = &amp;(*p)-&gt;rb_left;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ptr &gt; node-&gt;ptr)</div><div class="line">            p = &amp;(*p)-&gt;rb_right;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 为要插入节点分配内存空间</span></div><div class="line">    node = kzalloc(<span class="keyword">sizeof</span>(*node), GFP_KERNEL);</div><div class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    binder_stats_created(BINDER_STAT_NODE);</div><div class="line">    <span class="comment">// 插入节点</span></div><div class="line">    rb_link_node(&amp;node-&gt;rb_node, parent, p);</div><div class="line">    rb_insert_color(&amp;node-&gt;rb_node, &amp;proc-&gt;nodes);</div><div class="line">    <span class="comment">// 初始化</span></div><div class="line">    node-&gt;debug_id = ++binder_last_id;</div><div class="line">    node-&gt;proc = proc;</div><div class="line">    node-&gt;ptr = ptr;</div><div class="line">    node-&gt;cookie = cookie;</div><div class="line">    node-&gt;work.type = BINDER_WORK_NODE;</div><div class="line">    INIT_LIST_HEAD(&amp;node-&gt;work.entry);</div><div class="line">    INIT_LIST_HEAD(&amp;node-&gt;async_todo);</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>BINDER_WRITE_READ 处理过程</strong></p><p>在 binder 本地层中，我们看到在 <code>IPCThreadState::talkWithDriver()</code> 函数中， binder 本地层通过 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/native/libs/binder/IPCThreadState.cpp#L856">ioctl()(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr)</a> 命令的形式，与 binder 驱动交互。</p><p>可以看出 <code>ioctl()</code> 的第三个参数是一个 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.h#L69">binder_write_read</a> 结构体</p><p>binder.h 头文件中定义了两个数据类型, 一个是 <code>binder_write_read</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_write_read</span> &#123;</span></div><div class="line">    <span class="keyword">signed</span> <span class="keyword">long</span> write_size; <span class="comment">/* bytes to write */</span></div><div class="line">    <span class="keyword">signed</span> <span class="keyword">long</span> write_consumed; <span class="comment">/* bytes consumed by driver */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>   write_buffer;</div><div class="line">    <span class="keyword">signed</span> <span class="keyword">long</span> read_size;  <span class="comment">/* bytes to read */</span></div><div class="line">    <span class="keyword">signed</span> <span class="keyword">long</span> read_consumed;  <span class="comment">/* bytes consumed by driver */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>   read_buffer;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>其中 <code>write_size</code> 和 <code>read_size</code> 表示需要被读写的字节数， <code>write_consumed</code> 和 <code>read_consumed</code> 表示已经被 binder 驱动读写的字节数， <code>write_buffer</code> 和 <code>read_buffer</code> 则是指向被读写数据的指针。</p><p>具体的读写操作被 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L1852">binder_thread_write</a> 和 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L2266">binder_thread_read</a> 实现。</p><p><strong>数据写入 - binder_thread_write() 函数</strong></p><p>将用户空间数据写入到 binder 驱动，从驱动角度来看是读取的操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binder_thread_write</span><span class="params">(struct binder_proc *proc, struct binder_thread *thread,</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">void</span> __user *buffer, <span class="keyword">int</span> size, <span class="keyword">signed</span> <span class="keyword">long</span> *consumed)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">uint32_t</span> cmd;</div><div class="line">    <span class="comment">// 用户空间数据，起始地址和结束地址</span></div><div class="line">    <span class="keyword">void</span> __user *ptr = buffer + *consumed;</div><div class="line">    <span class="keyword">void</span> __user *end = buffer + size;</div><div class="line"></div><div class="line">    <span class="comment">// 循环读取</span></div><div class="line">    <span class="keyword">while</span> (ptr &lt; end &amp;&amp; thread-&gt;return_error == BR_OK) &#123;</div><div class="line">        <span class="comment">// 从用户空间获取操作命令</span></div><div class="line">        <span class="keyword">if</span> (get_user(cmd, (<span class="keyword">uint32_t</span> __user *)ptr))</div><div class="line">            <span class="keyword">return</span> -EFAULT;</div><div class="line">        ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</div><div class="line">        <span class="keyword">if</span> (_IOC_NR(cmd) &lt; ARRAY_SIZE(binder_stats.bc)) &#123;</div><div class="line">            <span class="comment">// 增加命令计数器</span></div><div class="line">            binder_stats.bc[_IOC_NR(cmd)]++;</div><div class="line">            proc-&gt;stats.bc[_IOC_NR(cmd)]++;</div><div class="line">            thread-&gt;stats.bc[_IOC_NR(cmd)]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">switch</span> (cmd) &#123;</div><div class="line">        <span class="comment">// 这四个命令用来增加或减少对象的引用计数， 操作目标 binder_ref</span></div><div class="line">        <span class="keyword">case</span> BC_INCREFS:</div><div class="line">        <span class="keyword">case</span> BC_ACQUIRE:</div><div class="line">        <span class="keyword">case</span> BC_RELEASE:</div><div class="line">        <span class="keyword">case</span> BC_DECREFS: &#123;</div><div class="line">            <span class="keyword">uint32_t</span> target;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_ref</span> *<span class="title">ref</span>;</span></div><div class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *debug_string;</div><div class="line"></div><div class="line">            <span class="comment">// 获取目标进程节点描述 desc</span></div><div class="line">            <span class="keyword">if</span> (get_user(target, (<span class="keyword">uint32_t</span> __user *)ptr))</div><div class="line">                <span class="keyword">return</span> -EFAULT;</div><div class="line">            ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</div><div class="line">            <span class="comment">// 索描述为 0 表示 context manager 进程</span></div><div class="line">            <span class="keyword">if</span> (target == <span class="number">0</span> &amp;&amp; binder_context_mgr_node &amp;&amp;</div><div class="line">                (cmd == BC_INCREFS || cmd == BC_ACQUIRE)) &#123;</div><div class="line">                <span class="comment">// 在 proc-&gt;refs_by_node.rb_node 红黑树中查找引用</span></div><div class="line">                ref = binder_get_ref_for_node(proc,</div><div class="line">                           binder_context_mgr_node);</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">                <span class="comment">// 在 proc-&gt;refs_by_desc.rb_node 红黑树中查找引用</span></div><div class="line">                ref = binder_get_ref(proc, target);</div><div class="line">            <span class="keyword">switch</span> (cmd) &#123;</div><div class="line">            <span class="keyword">case</span> BC_INCREFS:</div><div class="line">                debug_string = <span class="string">"IncRefs"</span>;</div><div class="line">                <span class="comment">// 增加弱引用计数</span></div><div class="line">                binder_inc_ref(ref, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BC_ACQUIRE:</div><div class="line">                debug_string = <span class="string">"Acquire"</span>;</div><div class="line">                <span class="comment">// 增加强引用计数</span></div><div class="line">                binder_inc_ref(ref, <span class="number">1</span>, <span class="literal">NULL</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BC_RELEASE:</div><div class="line">                debug_string = <span class="string">"Release"</span>;</div><div class="line">                <span class="comment">// 减少强引用计数</span></div><div class="line">                binder_dec_ref(ref, <span class="number">1</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BC_DECREFS:</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                debug_string = <span class="string">"DecRefs"</span>;</div><div class="line">                <span class="comment">// 减少弱引用计数</span></div><div class="line">                binder_dec_ref(ref, <span class="number">0</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> BC_INCREFS_DONE:</div><div class="line">        <span class="keyword">case</span> BC_ACQUIRE_DONE: &#123;</div><div class="line">            <span class="keyword">void</span> __user *node_ptr;</div><div class="line">            <span class="keyword">void</span> *cookie;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">node</span>;</span></div><div class="line"></div><div class="line">            <span class="comment">// 从用户空间读取 node_ptr</span></div><div class="line">            <span class="keyword">if</span> (get_user(node_ptr, (<span class="keyword">void</span> * __user *)ptr))</div><div class="line">                <span class="keyword">return</span> -EFAULT;</div><div class="line">            ptr += <span class="keyword">sizeof</span>(<span class="keyword">void</span> *);</div><div class="line">            <span class="comment">// 从用户空间读取 cookie</span></div><div class="line">            <span class="keyword">if</span> (get_user(cookie, (<span class="keyword">void</span> * __user *)ptr))</div><div class="line">                <span class="keyword">return</span> -EFAULT;</div><div class="line">            ptr += <span class="keyword">sizeof</span>(<span class="keyword">void</span> *);</div><div class="line">            <span class="comment">// 获得节点</span></div><div class="line">            node = binder_get_node(proc, node_ptr);</div><div class="line">            <span class="comment">// 没有找到则返回</span></div><div class="line">            <span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</div><div class="line">                binder_user_error(<span class="string">"binder: %d:%d "</span></div><div class="line">                    <span class="string">"%s u%p no match\n"</span>,</div><div class="line">                    proc-&gt;pid, thread-&gt;pid,</div><div class="line">                    cmd == BC_INCREFS_DONE ?</div><div class="line">                    <span class="string">"BC_INCREFS_DONE"</span> :</div><div class="line">                    <span class="string">"BC_ACQUIRE_DONE"</span>,</div><div class="line">                    node_ptr);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// cookie 不匹配则返回</span></div><div class="line">            <span class="keyword">if</span> (cookie != node-&gt;cookie) &#123;</div><div class="line">                binder_user_error(<span class="string">"binder: %d:%d %s u%p node %d"</span></div><div class="line">                    <span class="string">" cookie mismatch %p != %p\n"</span>,</div><div class="line">                    proc-&gt;pid, thread-&gt;pid,</div><div class="line">                    cmd == BC_INCREFS_DONE ?</div><div class="line">                    <span class="string">"BC_INCREFS_DONE"</span> : <span class="string">"BC_ACQUIRE_DONE"</span>,</div><div class="line">                    node_ptr, node-&gt;debug_id,</div><div class="line">                    cookie, node-&gt;cookie);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (cmd == BC_ACQUIRE_DONE) &#123;</div><div class="line">                node-&gt;pending_strong_ref = <span class="number">0</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                node-&gt;pending_weak_ref = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 减少节点使用计数</span></div><div class="line">            binder_dec_node(node, cmd == BC_ACQUIRE_DONE, <span class="number">0</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 释放 binder_bffer</span></div><div class="line">        <span class="keyword">case</span> BC_FREE_BUFFER: &#123;</div><div class="line">            <span class="keyword">void</span> __user *data_ptr;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_buffer</span> *<span class="title">buffer</span>;</span></div><div class="line"></div><div class="line">            <span class="comment">// 从用户空间获取 data_ptr</span></div><div class="line">            <span class="keyword">if</span> (get_user(data_ptr, (<span class="keyword">void</span> * __user *)ptr))</div><div class="line">                <span class="keyword">return</span> -EFAULT;</div><div class="line">            ptr += <span class="keyword">sizeof</span>(<span class="keyword">void</span> *);</div><div class="line"></div><div class="line">            <span class="comment">// 查找 binder_buffer</span></div><div class="line">            buffer = binder_buffer_lookup(proc, data_ptr);</div><div class="line">            <span class="comment">// 没有找到则返回</span></div><div class="line">            <span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;</div><div class="line">                binder_user_error(<span class="string">"binder: %d:%d "</span></div><div class="line">                    <span class="string">"BC_FREE_BUFFER u%p no match\n"</span>,</div><div class="line">                    proc-&gt;pid, thread-&gt;pid, data_ptr);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 不允许用户释放则返回</span></div><div class="line">            <span class="keyword">if</span> (!buffer-&gt;allow_user_free) &#123;</div><div class="line">                binder_user_error(<span class="string">"binder: %d:%d "</span></div><div class="line">                    <span class="string">"BC_FREE_BUFFER u%p matched "</span></div><div class="line">                    <span class="string">"unreturned buffer\n"</span>,</div><div class="line">                    proc-&gt;pid, thread-&gt;pid, data_ptr);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 将 buffer-&gt;transaction 置空</span></div><div class="line">            <span class="keyword">if</span> (buffer-&gt;transaction) &#123;</div><div class="line">                buffer-&gt;transaction-&gt;buffer = <span class="literal">NULL</span>;</div><div class="line">                buffer-&gt;transaction = <span class="literal">NULL</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (buffer-&gt;async_transaction &amp;&amp; buffer-&gt;target_node) &#123;</div><div class="line">                <span class="keyword">if</span> (list_empty(&amp;buffer-&gt;target_node-&gt;async_todo))</div><div class="line">                    buffer-&gt;target_node-&gt;has_async_transaction = <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    list_move_tail(buffer-&gt;target_node-&gt;async_todo.next, &amp;thread-&gt;todo);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 释放 binder_buffer 对象</span></div><div class="line">            trace_binder_transaction_buffer_release(buffer);</div><div class="line">            binder_transaction_buffer_release(proc, buffer, <span class="literal">NULL</span>);</div><div class="line">            binder_free_buf(proc, buffer);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// binder 数据传递处理</span></div><div class="line">        <span class="keyword">case</span> BC_TRANSACTION:</div><div class="line">        <span class="keyword">case</span> BC_REPLY: &#123;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction_data</span> <span class="title">tr</span>;</span></div><div class="line"></div><div class="line">            <span class="comment">// 从用户空间拷贝 binder_transaction_data 对象</span></div><div class="line">            <span class="keyword">if</span> (copy_from_user(&amp;tr, ptr, <span class="keyword">sizeof</span>(tr)))</div><div class="line">                <span class="keyword">return</span> -EFAULT;</div><div class="line">            ptr += <span class="keyword">sizeof</span>(tr);</div><div class="line">            <span class="comment">// 实际的传输函数，在下文讲解</span></div><div class="line">            binder_transaction(proc, thread, &amp;tr, cmd == BC_REPLY);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 设置 looper 为 BINDER_LOOPER_STATE_REGISTERED 状态</span></div><div class="line">        <span class="keyword">case</span> BC_REGISTER_LOOPER:</div><div class="line">            <span class="keyword">if</span> (thread-&gt;looper &amp; BINDER_LOOPER_STATE_ENTERED) &#123;</div><div class="line">                thread-&gt;looper |= BINDER_LOOPER_STATE_INVALID;</div><div class="line">                binder_user_error(<span class="string">"binder: %d:%d ERROR:"</span></div><div class="line">                    <span class="string">" BC_REGISTER_LOOPER called "</span></div><div class="line">                    <span class="string">"after BC_ENTER_LOOPER\n"</span>,</div><div class="line">                    proc-&gt;pid, thread-&gt;pid);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (proc-&gt;requested_threads == <span class="number">0</span>) &#123;</div><div class="line">                thread-&gt;looper |= BINDER_LOOPER_STATE_INVALID;</div><div class="line">                binder_user_error(<span class="string">"binder: %d:%d ERROR:"</span></div><div class="line">                    <span class="string">" BC_REGISTER_LOOPER called "</span></div><div class="line">                    <span class="string">"without request\n"</span>,</div><div class="line">                    proc-&gt;pid, thread-&gt;pid);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                proc-&gt;requested_threads--;</div><div class="line">                proc-&gt;requested_threads_started++;</div><div class="line">            &#125;</div><div class="line">            thread-&gt;looper |= BINDER_LOOPER_STATE_REGISTERED;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="comment">// 设置 looper 为 BINDER_LOOPER_STATE_ENTERED 状态</span></div><div class="line">        <span class="keyword">case</span> BC_ENTER_LOOPER:</div><div class="line">            <span class="keyword">if</span> (thread-&gt;looper &amp; BINDER_LOOPER_STATE_REGISTERED) &#123;</div><div class="line">                thread-&gt;looper |= BINDER_LOOPER_STATE_INVALID;</div><div class="line">                binder_user_error(<span class="string">"binder: %d:%d ERROR:"</span></div><div class="line">                    <span class="string">" BC_ENTER_LOOPER called after "</span></div><div class="line">                    <span class="string">"BC_REGISTER_LOOPER\n"</span>,</div><div class="line">                    proc-&gt;pid, thread-&gt;pid);</div><div class="line">            &#125;</div><div class="line">            thread-&gt;looper |= BINDER_LOOPER_STATE_ENTERED;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="comment">// 设置 looper 为 BINDER_LOOPER_STATE_EXITED 状态</span></div><div class="line">        <span class="keyword">case</span> BC_EXIT_LOOPER:</div><div class="line">            thread-&gt;looper |= BINDER_LOOPER_STATE_EXITED;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 发送 REQUEST_DEATH 或 CLEAR_DEATH 通知</span></div><div class="line">        <span class="keyword">case</span> BC_REQUEST_DEATH_NOTIFICATION:</div><div class="line">        <span class="keyword">case</span> BC_CLEAR_DEATH_NOTIFICATION: &#123;</div><div class="line">            <span class="keyword">uint32_t</span> target;</div><div class="line">            <span class="keyword">void</span> __user *cookie;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_ref</span> *<span class="title">ref</span>;</span></div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_ref_death</span> *<span class="title">death</span>;</span></div><div class="line"></div><div class="line">            <span class="comment">// 从用户空间获取 binder_ref 描述 desc</span></div><div class="line">            <span class="keyword">if</span> (get_user(target, (<span class="keyword">uint32_t</span> __user *)ptr))</div><div class="line">                <span class="keyword">return</span> -EFAULT;</div><div class="line">            ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</div><div class="line">            <span class="comment">// 从用户空间获取 cookie</span></div><div class="line">            <span class="keyword">if</span> (get_user(cookie, (<span class="keyword">void</span> __user * __user *)ptr))</div><div class="line">                <span class="keyword">return</span> -EFAULT;</div><div class="line">            ptr += <span class="keyword">sizeof</span>(<span class="keyword">void</span> *);</div><div class="line">            <span class="comment">// 获取 binder_ref 引用</span></div><div class="line">            ref = binder_get_ref(proc, target);</div><div class="line">            <span class="keyword">if</span> (ref == <span class="literal">NULL</span>) &#123;</div><div class="line">                binder_user_error(<span class="string">"binder: %d:%d %s "</span></div><div class="line">                    <span class="string">"invalid ref %d\n"</span>,</div><div class="line">                    proc-&gt;pid, thread-&gt;pid,</div><div class="line">                    cmd == BC_REQUEST_DEATH_NOTIFICATION ?</div><div class="line">                    <span class="string">"BC_REQUEST_DEATH_NOTIFICATION"</span> :</div><div class="line">                    <span class="string">"BC_CLEAR_DEATH_NOTIFICATION"</span>,</div><div class="line">                    target);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (cmd == BC_REQUEST_DEATH_NOTIFICATION) &#123;</div><div class="line">                <span class="keyword">if</span> (ref-&gt;death) &#123;</div><div class="line">                    binder_user_error(<span class="string">"binder: %d:%"</span></div><div class="line">                        <span class="string">"d BC_REQUEST_DEATH_NOTI"</span></div><div class="line">                        <span class="string">"FICATION death notific"</span></div><div class="line">                        <span class="string">"ation already set\n"</span>,</div><div class="line">                        proc-&gt;pid, thread-&gt;pid);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 为 binder_ref_death 对象分配内存空间</span></div><div class="line">                death = kzalloc(<span class="keyword">sizeof</span>(*death), GFP_KERNEL);</div><div class="line">                <span class="keyword">if</span> (death == <span class="literal">NULL</span>) &#123;</div><div class="line">                    thread-&gt;return_error = BR_ERROR;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 初始化 binder_ref_death 对象</span></div><div class="line">                binder_stats_created(BINDER_STAT_DEATH);</div><div class="line">                INIT_LIST_HEAD(&amp;death-&gt;work.entry);</div><div class="line">                death-&gt;cookie = cookie;</div><div class="line">                ref-&gt;death = death;</div><div class="line">                <span class="keyword">if</span> (ref-&gt;node-&gt;proc == <span class="literal">NULL</span>) &#123;</div><div class="line">                    ref-&gt;death-&gt;work.type = BINDER_WORK_DEAD_BINDER;</div><div class="line">                    <span class="keyword">if</span> (thread-&gt;looper &amp; (BINDER_LOOPER_STATE_REGISTERED | BINDER_LOOPER_STATE_ENTERED)) &#123;</div><div class="line">                        list_add_tail(&amp;ref-&gt;death-&gt;work.entry, &amp;thread-&gt;todo);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        list_add_tail(&amp;ref-&gt;death-&gt;work.entry, &amp;proc-&gt;todo);</div><div class="line">                        <span class="comment">// 唤醒目标进程</span></div><div class="line">                        wake_up_interruptible(&amp;proc-&gt;wait);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (ref-&gt;death == <span class="literal">NULL</span>) &#123;</div><div class="line">                    binder_user_error(<span class="string">"binder: %d:%"</span></div><div class="line">                        <span class="string">"d BC_CLEAR_DEATH_NOTIFI"</span></div><div class="line">                        <span class="string">"CATION death notificat"</span></div><div class="line">                        <span class="string">"ion not active\n"</span>,</div><div class="line">                        proc-&gt;pid, thread-&gt;pid);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                death = ref-&gt;death;</div><div class="line">                <span class="keyword">if</span> (death-&gt;cookie != cookie) &#123;</div><div class="line">                    binder_user_error(<span class="string">"binder: %d:%"</span></div><div class="line">                        <span class="string">"d BC_CLEAR_DEATH_NOTIFI"</span></div><div class="line">                        <span class="string">"CATION death notificat"</span></div><div class="line">                        <span class="string">"ion cookie mismatch "</span></div><div class="line">                        <span class="string">"%p != %p\n"</span>,</div><div class="line">                        proc-&gt;pid, thread-&gt;pid,</div><div class="line">                        death-&gt;cookie, cookie);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 将 ref-&gt;death 置空</span></div><div class="line">                ref-&gt;death = <span class="literal">NULL</span>;</div><div class="line">                <span class="keyword">if</span> (list_empty(&amp;death-&gt;work.entry)) &#123;</div><div class="line">                    death-&gt;work.type = BINDER_WORK_CLEAR_DEATH_NOTIFICATION;</div><div class="line">                    <span class="keyword">if</span> (thread-&gt;looper &amp; (BINDER_LOOPER_STATE_REGISTERED | BINDER_LOOPER_STATE_ENTERED)) &#123;</div><div class="line">                        list_add_tail(&amp;death-&gt;work.entry, &amp;thread-&gt;todo);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        list_add_tail(&amp;death-&gt;work.entry, &amp;proc-&gt;todo);</div><div class="line">                        <span class="comment">// 唤醒目标进程</span></div><div class="line">                        wake_up_interruptible(&amp;proc-&gt;wait);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    BUG_ON(death-&gt;work.type != BINDER_WORK_DEAD_BINDER);</div><div class="line">                    death-&gt;work.type = BINDER_WORK_DEAD_BINDER_AND_CLEAR;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> BC_DEAD_BINDER_DONE: &#123;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_work</span> *<span class="title">w</span>;</span></div><div class="line">            <span class="keyword">void</span> __user *cookie;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_ref_death</span> *<span class="title">death</span> = <span class="title">NULL</span>;</span></div><div class="line">            <span class="comment">// 从用户空间获取 cookie</span></div><div class="line">            <span class="keyword">if</span> (get_user(cookie, (<span class="keyword">void</span> __user * __user *)ptr))</div><div class="line">                <span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">            ptr += <span class="keyword">sizeof</span>(<span class="keyword">void</span> *);</div><div class="line">            list_for_each_entry(w, &amp;proc-&gt;delivered_death, entry) &#123;</div><div class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">binder_ref_death</span> *<span class="title">tmp_death</span> = <span class="title">container_of</span>(<span class="title">w</span>, <span class="title">struct</span> <span class="title">binder_ref_death</span>, <span class="title">work</span>);</span></div><div class="line">                <span class="keyword">if</span> (tmp_death-&gt;cookie == cookie) &#123;</div><div class="line">                    death = tmp_death;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (death == <span class="literal">NULL</span>) &#123;</div><div class="line">                binder_user_error(<span class="string">"binder: %d:%d BC_DEAD"</span></div><div class="line">                    <span class="string">"_BINDER_DONE %p not found\n"</span>,</div><div class="line">                    proc-&gt;pid, thread-&gt;pid, cookie);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            list_del_init(&amp;death-&gt;work.entry);</div><div class="line">            <span class="comment">// 如果 death-&gt;work.t 为 BINDER_WORK_DEAD_BINDER_AND_CLEAR 则修改为 BINDER_WORK_CLEAR_DEATH_NOTIFICATION</span></div><div class="line">            <span class="keyword">if</span> (death-&gt;work.t == BINDER_WORK_DEAD_BINDER_AND_CLEAR ) &#123;</div><div class="line">                death-&gt;work.type = BINDER_WORK_CLEAR_DEATH_NOTIFICATION;</div><div class="line">                <span class="keyword">if</span> (thread-&gt;looper &amp; (BINDER_LOOPER_STATE_REGISTERED | BINDER_LOOPER_STATE_ENTERED)) &#123;</div><div class="line">                    list_add_tail(&amp;death-&gt;work.entry, &amp;thread-&gt;todo);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    list_add_tail(&amp;death-&gt;work.entry, &amp;proc-&gt;todo);</div><div class="line">                    <span class="comment">// 唤醒目标进程</span></div><div class="line">                    wake_up_interruptible(&amp;proc-&gt;wait);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> -EINVAL;</div><div class="line">        &#125;</div><div class="line">        *consumed = ptr - buffer;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>binder_transaction() 函数</strong></p><p>在上文处理 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L2041">BC_TRANSACTION</a> 和 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L2042">BC_REPLY</a> 时，调用了 <a href="https://github.com/xdtianyu/android-msm-hammerhead-3.4-marshmallow/blob/master/drivers/staging/android/binder.c#L1417">binder_transaction()</a> 函数。我们继续追踪</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binder_transaction</span><span class="params">(struct binder_proc *proc,</span></span></div><div class="line"><span class="function"><span class="params">                   struct binder_thread *thread,</span></span></div><div class="line"><span class="function"><span class="params">                   struct binder_transaction_data *tr, <span class="keyword">int</span> reply)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">t</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_work</span> *<span class="title">tcomplete</span>;</span></div><div class="line">    <span class="keyword">size_t</span> *offp, *off_end;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">target_proc</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> *<span class="title">target_thread</span> = <span class="title">NULL</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">target_node</span> = <span class="title">NULL</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">target_list</span>;</span></div><div class="line">    <span class="keyword">wait_queue_head_t</span> *target_wait;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">in_reply_to</span> = <span class="title">NULL</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (reply) &#123;</div><div class="line">        <span class="comment">// BC_REPLY 处理流程</span></div><div class="line">        <span class="comment">// 得到 binder_transaction 对象</span></div><div class="line">        in_reply_to = thread-&gt;transaction_stack;</div><div class="line">        <span class="keyword">if</span> (in_reply_to == <span class="literal">NULL</span>) &#123;</div><div class="line">            return_error = BR_FAILED_REPLY;</div><div class="line">            <span class="keyword">goto</span> err_empty_call_stack;</div><div class="line">        &#125;</div><div class="line">        binder_set_nice(in_reply_to-&gt;saved_priority);</div><div class="line">        thread-&gt;transaction_stack = in_reply_to-&gt;to_parent;</div><div class="line">        <span class="comment">// 获取目标线程</span></div><div class="line">        target_thread = in_reply_to-&gt;from;</div><div class="line">        target_proc = target_thread-&gt;proc;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// BC_TRANSACTION 处理流程</span></div><div class="line">        <span class="comment">// 查找目标节点</span></div><div class="line">        <span class="keyword">if</span> (tr-&gt;target.handle) &#123;</div><div class="line">            struct binder_ref *ref;</div><div class="line">            <span class="comment">// 获取 binder_ref 对象</span></div><div class="line">            ref = binder_get_ref(proc, tr-&gt;target.handle);</div><div class="line">            target_node = ref-&gt;node;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 索引为 0 则返回 context manager</span></div><div class="line">            target_node = binder_context_mgr_node;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 得到目标进程</span></div><div class="line">        target_proc = target_node-&gt;proc;</div><div class="line">        <span class="keyword">if</span> (!(tr-&gt;flags &amp; TF_ONE_WAY) &amp;&amp; thread-&gt;transaction_stack) &#123;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">tmp</span>;</span></div><div class="line">            tmp = thread-&gt;transaction_stack;</div><div class="line">            <span class="keyword">while</span> (tmp) &#123;</div><div class="line">                <span class="keyword">if</span> (tmp-&gt;from &amp;&amp; tmp-&gt;from-&gt;proc == target_proc)</div><div class="line">                    <span class="comment">// 获得目标线程</span></div><div class="line">                    target_thread = tmp-&gt;from;</div><div class="line">                tmp = tmp-&gt;from_parent;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置要处理的目标进程或目标线程任务</span></div><div class="line">    <span class="keyword">if</span> (target_thread) &#123;</div><div class="line">        target_list = &amp;target_thread-&gt;todo;</div><div class="line">        target_wait = &amp;target_thread-&gt;wait;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        target_list = &amp;target_proc-&gt;todo;</div><div class="line">        target_wait = &amp;target_proc-&gt;wait;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 为 binder_transaction 对象分配内存空间</span></div><div class="line">    t = kzalloc(<span class="keyword">sizeof</span>(*t), GFP_KERNEL);</div><div class="line">    binder_stats_created(BINDER_STAT_TRANSACTION);</div><div class="line"></div><div class="line">    tcomplete = kzalloc(<span class="keyword">sizeof</span>(*tcomplete), GFP_KERNEL);</div><div class="line">    binder_stats_created(BINDER_STAT_TRANSACTION_COMPLETE);</div><div class="line"></div><div class="line">    <span class="comment">// 如果是同步传输(双向)，则将当前的 binder_thread 对象保存在 binder_transaction 对象的 from 中。</span></div><div class="line">    <span class="keyword">if</span> (!reply &amp;&amp; !(tr-&gt;flags &amp; TF_ONE_WAY))</div><div class="line">        t-&gt;from = thread;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        t-&gt;from = <span class="literal">NULL</span>;</div><div class="line">    <span class="comment">// 设置 binder_transaction 对象</span></div><div class="line">    t-&gt;sender_euid = proc-&gt;tsk-&gt;cred-&gt;euid;</div><div class="line">    t-&gt;to_proc = target_proc;</div><div class="line">    t-&gt;to_thread = target_thread;</div><div class="line">    t-&gt;code = tr-&gt;code;</div><div class="line">    t-&gt;flags = tr-&gt;flags;</div><div class="line">    t-&gt;priority = task_nice(current);</div><div class="line"></div><div class="line">    <span class="comment">// 为 binder_buffer 分配内存空间</span></div><div class="line">    t-&gt;buffer = binder_alloc_buf(target_proc, tr-&gt;data_size,</div><div class="line">        tr-&gt;offsets_size, !reply &amp;&amp; (t-&gt;flags &amp; TF_ONE_WAY));</div><div class="line">    <span class="comment">// 设置 binder_buffer</span></div><div class="line">    t-&gt;buffer-&gt;allow_user_free = <span class="number">0</span>;</div><div class="line">    t-&gt;buffer-&gt;debug_id = t-&gt;debug_id;</div><div class="line">    t-&gt;buffer-&gt;transaction = t;</div><div class="line">    t-&gt;buffer-&gt;target_node = target_node;</div><div class="line">    <span class="keyword">if</span> (target_node)</div><div class="line">        binder_inc_node(target_node, <span class="number">1</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    offp = (<span class="keyword">size_t</span> *)(t-&gt;buffer-&gt;data + ALIGN(tr-&gt;data_size, <span class="keyword">sizeof</span>(<span class="keyword">void</span> *)));</div><div class="line"></div><div class="line">    <span class="comment">// 从用户空间拷贝数据到 binder_buffer</span></div><div class="line">    <span class="keyword">if</span> (copy_from_user(t-&gt;buffer-&gt;data, tr-&gt;data.ptr.buffer, tr-&gt;data_size)) &#123;</div><div class="line">        return_error = BR_FAILED_REPLY;</div><div class="line">        <span class="keyword">goto</span> err_copy_data_failed;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (copy_from_user(offp, tr-&gt;data.ptr.offsets, tr-&gt;offsets_size)) &#123;</div><div class="line">        return_error = BR_FAILED_REPLY;</div><div class="line">        <span class="keyword">goto</span> err_copy_data_failed;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    off_end = (<span class="keyword">void</span> *)offp + tr-&gt;offsets_size;</div><div class="line">    <span class="keyword">for</span> (; offp &lt; off_end; offp++) &#123;</div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">flat_binder_object</span> *<span class="title">fp</span>;</span></div><div class="line">        <span class="comment">// 为 flat_binder_object 赋值</span></div><div class="line">        fp = (struct flat_binder_object *)(t-&gt;buffer-&gt;data + *offp);</div><div class="line">        <span class="comment">// 转换 binder 类型，如果是 BINDER 则转换为 HANDLE， 如果是 HANDLE 则转为 BANDLE</span></div><div class="line">        <span class="keyword">switch</span> (fp-&gt;type) &#123;</div><div class="line">        <span class="keyword">case</span> BINDER_TYPE_BINDER:</div><div class="line">        <span class="keyword">case</span> BINDER_TYPE_WEAK_BINDER: &#123;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_ref</span> *<span class="title">ref</span>;</span></div><div class="line">            <span class="comment">// 获取 binder_node 节点</span></div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">node</span> = <span class="title">binder_get_node</span>(<span class="title">proc</span>, <span class="title">fp</span>-&gt;<span class="title">binder</span>);</span></div><div class="line">            <span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</div><div class="line">                node = binder_new_node(proc, fp-&gt;binder, fp-&gt;cookie);</div><div class="line">                <span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</div><div class="line">                    return_error = BR_FAILED_REPLY;</div><div class="line">                    <span class="keyword">goto</span> err_binder_new_node_failed;</div><div class="line">                &#125;</div><div class="line">                node-&gt;min_priority = fp-&gt;flags &amp; FLAT_BINDER_FLAG_PRIORITY_MASK;</div><div class="line">                node-&gt;accept_fds = !!(fp-&gt;flags &amp; FLAT_BINDER_FLAG_ACCEPTS_FDS);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (fp-&gt;cookie != node-&gt;cookie) &#123;</div><div class="line">                <span class="keyword">goto</span> err_binder_get_ref_for_node_failed;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 获取 binder_ref 对象</span></div><div class="line">            ref = binder_get_ref_for_node(target_proc, node);</div><div class="line">            <span class="comment">// 转换类型</span></div><div class="line">            <span class="keyword">if</span> (fp-&gt;type == BINDER_TYPE_BINDER)</div><div class="line">                fp-&gt;type = BINDER_TYPE_HANDLE;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                fp-&gt;type = BINDER_TYPE_WEAK_HANDLE;</div><div class="line">            fp-&gt;handle = ref-&gt;desc;</div><div class="line">            binder_inc_ref(ref, fp-&gt;type == BINDER_TYPE_HANDLE,</div><div class="line">                       &amp;thread-&gt;todo);</div><div class="line">        &#125; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> BINDER_TYPE_HANDLE:</div><div class="line">        <span class="keyword">case</span> BINDER_TYPE_WEAK_HANDLE: &#123;</div><div class="line">            <span class="comment">// 获取 binder_ref 对象</span></div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_ref</span>*<span class="title">ref</span> = <span class="title">binder_get_ref</span>(<span class="title">proc</span>, <span class="title">fp</span>-&gt;<span class="title">handle</span>);</span></div><div class="line">            <span class="comment">// 转换类型</span></div><div class="line">            <span class="keyword">if</span> (ref-&gt;node-&gt;proc == target_proc) &#123;</div><div class="line">                <span class="keyword">if</span> (fp-&gt;type == BINDER_TYPE_HANDLE)</div><div class="line">                    fp-&gt;type = BINDER_TYPE_BINDER;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    fp-&gt;type = BINDER_TYPE_WEAK_BINDER;</div><div class="line">                fp-&gt;binder = ref-&gt;node-&gt;ptr;</div><div class="line">                fp-&gt;cookie = ref-&gt;node-&gt;cookie;</div><div class="line">                binder_inc_node(ref-&gt;node, fp-&gt;type == BINDER_TYPE_BINDER, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                struct binder_ref *new_ref;</div><div class="line">                new_ref = binder_get_ref_for_node(target_proc, ref-&gt;node);</div><div class="line">                fp-&gt;handle = new_ref-&gt;desc;</div><div class="line">                binder_inc_ref(new_ref, fp-&gt;type == BINDER_TYPE_HANDLE, <span class="literal">NULL</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 文件类型</span></div><div class="line">        <span class="keyword">case</span> BINDER_TYPE_FD: &#123;</div><div class="line">            <span class="keyword">int</span> target_fd;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></div><div class="line">            <span class="comment">// 获得文件对象</span></div><div class="line">            file = fget(fp-&gt;handle);</div><div class="line">            <span class="comment">// 分配一个新的文件描述符</span></div><div class="line">            target_fd = task_get_unused_fd_flags(target_proc, O_CLOEXEC);</div><div class="line">            task_fd_install(target_proc, target_fd, file);</div><div class="line">            fp-&gt;handle = target_fd;</div><div class="line">        &#125; <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            return_error = BR_FAILED_REPLY;</div><div class="line">            <span class="keyword">goto</span> err_bad_object_type;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (reply) &#123;</div><div class="line">        <span class="comment">// BC_REPLY 处理流程, binder_transaction 中释放 binder_transaction 对象</span></div><div class="line">        binder_pop_transaction(target_thread, in_reply_to);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(t-&gt;flags &amp; TF_ONE_WAY)) &#123;</div><div class="line">        <span class="comment">// 同步状态(双向)需要设置回复</span></div><div class="line">        t-&gt;need_reply = <span class="number">1</span>;</div><div class="line">        t-&gt;from_parent = thread-&gt;transaction_stack;</div><div class="line">        thread-&gt;transaction_stack = t;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 异步传输不需要设置回复</span></div><div class="line">        <span class="keyword">if</span> (target_node-&gt;has_async_transaction) &#123;</div><div class="line">            target_list = &amp;target_node-&gt;async_todo;</div><div class="line">            target_wait = <span class="literal">NULL</span>;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            target_node-&gt;has_async_transaction = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    t-&gt;work.type = BINDER_WORK_TRANSACTION;</div><div class="line">    list_add_tail(&amp;t-&gt;work.entry, target_list);</div><div class="line">    tcomplete-&gt;type = BINDER_WORK_TRANSACTION_COMPLETE;</div><div class="line">    list_add_tail(&amp;tcomplete-&gt;entry, &amp;thread-&gt;todo);</div><div class="line">    <span class="keyword">if</span> (target_wait)</div><div class="line">        <span class="comment">// 唤醒目标线程</span></div><div class="line">        wake_up_interruptible(target_wait);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>数据读取 - binder_thread_read() 函数</strong></p><p>用户空间从 binder 驱动读取数据，从驱动角度来看是写出的操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_thread_read</span><span class="params">(struct binder_proc *proc,</span></span></div><div class="line"><span class="function"><span class="params">                  struct binder_thread *thread,</span></span></div><div class="line"><span class="function"><span class="params">                  <span class="keyword">void</span>  __user *buffer, <span class="keyword">int</span> size,</span></span></div><div class="line"><span class="function"><span class="params">                  <span class="keyword">signed</span> <span class="keyword">long</span> *consumed, <span class="keyword">int</span> non_block)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">void</span> __user *ptr = buffer + *consumed;</div><div class="line">    <span class="keyword">void</span> __user *end = buffer + size;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> wait_for_proc_work;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (*consumed == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 第一次操作时向用户空间返回 BR_NOOP 命令</span></div><div class="line">        <span class="keyword">if</span> (put_user(BR_NOOP, (<span class="keyword">uint32_t</span> __user *)ptr))</div><div class="line">            <span class="keyword">return</span> -EFAULT;</div><div class="line">        ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">retry:</div><div class="line">    <span class="comment">// 获取将要处理的任务</span></div><div class="line">    wait_for_proc_work = thread-&gt;transaction_stack == <span class="literal">NULL</span> &amp;&amp;</div><div class="line">                list_empty(&amp;thread-&gt;todo);</div><div class="line">    <span class="keyword">if</span> (wait_for_proc_work) &#123;</div><div class="line">        <span class="keyword">if</span> (!(thread-&gt;looper &amp; (BINDER_LOOPER_STATE_REGISTERED |</div><div class="line">                    BINDER_LOOPER_STATE_ENTERED))) &#123;</div><div class="line">            binder_user_error(<span class="string">"binder: %d:%d ERROR: Thread waiting "</span></div><div class="line">                <span class="string">"for process work before calling BC_REGISTER_"</span></div><div class="line">                <span class="string">"LOOPER or BC_ENTER_LOOPER (state %x)\n"</span>,</div><div class="line">                proc-&gt;pid, thread-&gt;pid, thread-&gt;looper);</div><div class="line">            wait_event_interruptible(binder_user_error_wait,</div><div class="line">                         binder_stop_on_user_error &lt; <span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">        binder_set_nice(proc-&gt;default_priority);</div><div class="line">        <span class="keyword">if</span> (non_block) &#123;</div><div class="line">            <span class="comment">// 非阻塞且没有数据则返回 EAGAIN</span></div><div class="line">            <span class="keyword">if</span> (!binder_has_proc_work(proc, thread))</div><div class="line">                ret = -EAGAIN;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            <span class="comment">// 阻塞则进入睡眠状态，等待可操作的任务</span></div><div class="line">            ret = wait_event_freezable_exclusive(proc-&gt;wait, binder_has_proc_work(proc, thread));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (non_block) &#123;</div><div class="line">            <span class="keyword">if</span> (!binder_has_thread_work(thread))</div><div class="line">                ret = -EAGAIN;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            ret = wait_event_freezable(thread-&gt;wait, binder_has_thread_work(thread));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    binder_lock(__func__);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (wait_for_proc_work)</div><div class="line">        proc-&gt;ready_threads--;</div><div class="line">    thread-&gt;looper &amp;= ~BINDER_LOOPER_STATE_WAITING;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ret)</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">uint32_t</span> cmd;</div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction_data</span> <span class="title">tr</span>;</span></div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">binder_work</span> *<span class="title">w</span>;</span></div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">t</span> = <span class="title">NULL</span>;</span></div><div class="line"></div><div class="line">        <span class="comment">// 获取 binder_work 对象</span></div><div class="line">        <span class="keyword">if</span> (!list_empty(&amp;thread-&gt;todo))</div><div class="line">            w = list_first_entry(&amp;thread-&gt;todo, struct binder_work, entry);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!list_empty(&amp;proc-&gt;todo) &amp;&amp; wait_for_proc_work)</div><div class="line">            w = list_first_entry(&amp;proc-&gt;todo, struct binder_work, entry);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (ptr - buffer == <span class="number">4</span> &amp;&amp; !(thread-&gt;looper &amp; BINDER_LOOPER_STATE_NEED_RETURN)) <span class="comment">/* no data added */</span></div><div class="line">                <span class="keyword">goto</span> retry;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (end - ptr &lt; <span class="keyword">sizeof</span>(tr) + <span class="number">4</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (w-&gt;type) &#123;</div><div class="line">        <span class="keyword">case</span> BINDER_WORK_TRANSACTION: &#123;</div><div class="line">            <span class="comment">// 获取 binder_transaction 对象</span></div><div class="line">            t = container_of(w, struct binder_transaction, work);</div><div class="line">        &#125; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> BINDER_WORK_TRANSACTION_COMPLETE: &#123;</div><div class="line">            cmd = BR_TRANSACTION_COMPLETE;</div><div class="line">            <span class="comment">// 返回 BR_TRANSACTION_COMPLETE 命令</span></div><div class="line">            <span class="keyword">if</span> (put_user(cmd, (<span class="keyword">uint32_t</span> __user *)ptr))</div><div class="line">                <span class="keyword">return</span> -EFAULT;</div><div class="line">            ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</div><div class="line"></div><div class="line">            binder_stat_br(proc, thread, cmd);</div><div class="line"></div><div class="line">            <span class="comment">// 从 work 链表中删除并释放内存</span></div><div class="line">            list_del(&amp;w-&gt;entry);</div><div class="line">            kfree(w);</div><div class="line">            binder_stats_deleted(BINDER_STAT_TRANSACTION_COMPLETE);</div><div class="line">        &#125; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> BINDER_WORK_NODE: &#123;</div><div class="line">            <span class="comment">// 获得 binder_node 节点</span></div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">node</span> = <span class="title">container_of</span>(<span class="title">w</span>, <span class="title">struct</span> <span class="title">binder_node</span>, <span class="title">work</span>);</span></div><div class="line">            <span class="keyword">uint32_t</span> cmd = BR_NOOP;</div><div class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *cmd_name;</div><div class="line">            <span class="comment">// 根据节点类型，增加/获取、减少/释放节点索引</span></div><div class="line">            <span class="keyword">int</span> strong = node-&gt;internal_strong_refs || node-&gt;local_strong_refs;</div><div class="line">            <span class="keyword">int</span> weak = !hlist_empty(&amp;node-&gt;refs) || node-&gt;local_weak_refs || strong;</div><div class="line">            <span class="comment">// 构造 BR_* 命令</span></div><div class="line">            <span class="keyword">if</span> (weak &amp;&amp; !node-&gt;has_weak_ref) &#123;</div><div class="line">                cmd = BR_INCREFS;</div><div class="line">                cmd_name = <span class="string">"BR_INCREFS"</span>;</div><div class="line">                node-&gt;has_weak_ref = <span class="number">1</span>;</div><div class="line">                node-&gt;pending_weak_ref = <span class="number">1</span>;</div><div class="line">                node-&gt;local_weak_refs++;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strong &amp;&amp; !node-&gt;has_strong_ref) &#123;</div><div class="line">                cmd = BR_ACQUIRE;</div><div class="line">                cmd_name = <span class="string">"BR_ACQUIRE"</span>;</div><div class="line">                node-&gt;has_strong_ref = <span class="number">1</span>;</div><div class="line">                node-&gt;pending_strong_ref = <span class="number">1</span>;</div><div class="line">                node-&gt;local_strong_refs++;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strong &amp;&amp; node-&gt;has_strong_ref) &#123;</div><div class="line">                cmd = BR_RELEASE;</div><div class="line">                cmd_name = <span class="string">"BR_RELEASE"</span>;</div><div class="line">                node-&gt;has_strong_ref = <span class="number">0</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!weak &amp;&amp; node-&gt;has_weak_ref) &#123;</div><div class="line">                cmd = BR_DECREFS;</div><div class="line">                cmd_name = <span class="string">"BR_DECREFS"</span>;</div><div class="line">                node-&gt;has_weak_ref = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 向用户空间返回命令</span></div><div class="line">            <span class="keyword">if</span> (cmd != BR_NOOP) &#123;</div><div class="line">                <span class="keyword">if</span> (put_user(cmd, (<span class="keyword">uint32_t</span> __user *)ptr))</div><div class="line">                    <span class="keyword">return</span> -EFAULT;</div><div class="line">                ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</div><div class="line">                <span class="keyword">if</span> (put_user(node-&gt;ptr, (<span class="keyword">void</span> * __user *)ptr))</div><div class="line">                    <span class="keyword">return</span> -EFAULT;</div><div class="line">                ptr += <span class="keyword">sizeof</span>(<span class="keyword">void</span> *);</div><div class="line">                <span class="keyword">if</span> (put_user(node-&gt;cookie, (<span class="keyword">void</span> * __user *)ptr))</div><div class="line">                    <span class="keyword">return</span> -EFAULT;</div><div class="line">                ptr += <span class="keyword">sizeof</span>(<span class="keyword">void</span> *);</div><div class="line"></div><div class="line">                binder_stat_br(proc, thread, cmd);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                list_del_init(&amp;w-&gt;entry);</div><div class="line">                <span class="keyword">if</span> (!weak &amp;&amp; !strong) &#123;</div><div class="line">                    rb_erase(&amp;node-&gt;rb_node, &amp;proc-&gt;nodes);</div><div class="line">                    kfree(node);</div><div class="line">                    binder_stats_deleted(BINDER_STAT_NODE);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> BINDER_WORK_DEAD_BINDER:</div><div class="line">        <span class="keyword">case</span> BINDER_WORK_DEAD_BINDER_AND_CLEAR:</div><div class="line">        <span class="keyword">case</span> BINDER_WORK_CLEAR_DEATH_NOTIFICATION: &#123;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_ref_death</span> *<span class="title">death</span>;</span></div><div class="line">            <span class="keyword">uint32_t</span> cmd;</div><div class="line"></div><div class="line">            <span class="comment">// 获取 binder_ref_death 对象</span></div><div class="line">            death = container_of(w, struct binder_ref_death, work);</div><div class="line">            <span class="comment">// 构造返回命令</span></div><div class="line">            <span class="keyword">if</span> (w-&gt;type == BINDER_WORK_CLEAR_DEATH_NOTIFICATION)</div><div class="line">                cmd = BR_CLEAR_DEATH_NOTIFICATION_DONE;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                cmd = BR_DEAD_BINDER;</div><div class="line">            <span class="comment">// 向用户空间返回命令</span></div><div class="line">            <span class="keyword">if</span> (put_user(cmd, (<span class="keyword">uint32_t</span> __user *)ptr))</div><div class="line">                <span class="keyword">return</span> -EFAULT;</div><div class="line">            ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</div><div class="line">            <span class="comment">// 将 cookie 返回给用户空间</span></div><div class="line">            <span class="keyword">if</span> (put_user(death-&gt;cookie, (<span class="keyword">void</span> * __user *)ptr))</div><div class="line">                <span class="keyword">return</span> -EFAULT;</div><div class="line">            ptr += <span class="keyword">sizeof</span>(<span class="keyword">void</span> *);</div><div class="line">            binder_stat_br(proc, thread, cmd);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (w-&gt;type == BINDER_WORK_CLEAR_DEATH_NOTIFICATION) &#123;</div><div class="line">                list_del(&amp;w-&gt;entry);</div><div class="line">                kfree(death);</div><div class="line">                binder_stats_deleted(BINDER_STAT_DEATH);</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">                list_move(&amp;w-&gt;entry, &amp;proc-&gt;delivered_death);</div><div class="line">            <span class="keyword">if</span> (cmd == BR_DEAD_BINDER)</div><div class="line">                <span class="keyword">goto</span> done; <span class="comment">/* DEAD_BINDER notifications can cause transactions */</span></div><div class="line">        &#125; <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!t)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (t-&gt;buffer-&gt;target_node) &#123;</div><div class="line">            <span class="comment">// 获得 binder_node 节点</span></div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">target_node</span> = <span class="title">t</span>-&gt;<span class="title">buffer</span>-&gt;<span class="title">target_node</span>;</span></div><div class="line">            <span class="comment">// 将数据封装到 binder_transaction_data 对象</span></div><div class="line">            tr.target.ptr = target_node-&gt;ptr;</div><div class="line">            tr.cookie =  target_node-&gt;cookie;</div><div class="line">            t-&gt;saved_priority = task_nice(current);</div><div class="line">            <span class="keyword">if</span> (t-&gt;priority &lt; target_node-&gt;min_priority &amp;&amp;</div><div class="line">                !(t-&gt;flags &amp; TF_ONE_WAY))</div><div class="line">                binder_set_nice(t-&gt;priority);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!(t-&gt;flags &amp; TF_ONE_WAY) ||</div><div class="line">                 t-&gt;saved_priority &gt; target_node-&gt;min_priority)</div><div class="line">                binder_set_nice(target_node-&gt;min_priority);</div><div class="line">            <span class="comment">// 设置返回的命令类型</span></div><div class="line">            cmd = BR_TRANSACTION;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            tr.target.ptr = <span class="literal">NULL</span>;</div><div class="line">            tr.cookie = <span class="literal">NULL</span>;</div><div class="line">            cmd = BR_REPLY;</div><div class="line">        &#125;</div><div class="line">        tr.code = t-&gt;code;</div><div class="line">        tr.flags = t-&gt;flags;</div><div class="line">        tr.sender_euid = t-&gt;sender_euid;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (t-&gt;from) &#123;</div><div class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">sender</span> = <span class="title">t</span>-&gt;<span class="title">from</span>-&gt;<span class="title">proc</span>-&gt;<span class="title">tsk</span>;</span></div><div class="line">            tr.sender_pid = task_tgid_nr_ns(sender,</div><div class="line">                            current-&gt;nsproxy-&gt;pid_ns);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            tr.sender_pid = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tr.data_size = t-&gt;buffer-&gt;data_size;</div><div class="line">        tr.offsets_size = t-&gt;buffer-&gt;offsets_size;</div><div class="line">        tr.data.ptr.buffer = (<span class="keyword">void</span> *)t-&gt;buffer-&gt;data +</div><div class="line">                    proc-&gt;user_buffer_offset;</div><div class="line">        tr.data.ptr.offsets = tr.data.ptr.buffer +</div><div class="line">                    ALIGN(t-&gt;buffer-&gt;data_size,</div><div class="line">                        <span class="keyword">sizeof</span>(<span class="keyword">void</span> *));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (put_user(cmd, (<span class="keyword">uint32_t</span> __user *)ptr))</div><div class="line">            <span class="keyword">return</span> -EFAULT;</div><div class="line">        ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</div><div class="line">        <span class="comment">// 拷贝 binder_transaction_data 对象到用户空间</span></div><div class="line">        <span class="keyword">if</span> (copy_to_user(ptr, &amp;tr, <span class="keyword">sizeof</span>(tr)))</div><div class="line">            <span class="keyword">return</span> -EFAULT;</div><div class="line">        ptr += <span class="keyword">sizeof</span>(tr);</div><div class="line"></div><div class="line">        binder_stat_br(proc, thread, cmd);</div><div class="line"></div><div class="line">        <span class="comment">// 移除 binder_transaction 并释放空间</span></div><div class="line">        list_del(&amp;t-&gt;work.entry);</div><div class="line">        t-&gt;buffer-&gt;allow_user_free = <span class="number">1</span>;</div><div class="line">        <span class="comment">// 如果是同步操作，则将 thread 对象保存在 binder_transaction 中，返回给发送方进程, 否则释放 binder_transaction 对象</span></div><div class="line">        <span class="keyword">if</span> (cmd == BR_TRANSACTION &amp;&amp; !(t-&gt;flags &amp; TF_ONE_WAY)) &#123;</div><div class="line">            t-&gt;to_parent = thread-&gt;transaction_stack;</div><div class="line">            t-&gt;to_thread = thread;</div><div class="line">            thread-&gt;transaction_stack = t;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            t-&gt;buffer-&gt;transaction = <span class="literal">NULL</span>;</div><div class="line">            kfree(t);</div><div class="line">            binder_stats_deleted(BINDER_STAT_TRANSACTION);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从上述代码可以看出 binder 驱动的具体实现，以及是如何发送和接收数据的。</p><h2 id="5-Binder-与系统服务"><a href="#5-Binder-与系统服务" class="headerlink" title="5. Binder 与系统服务"></a>5. Binder 与系统服务</h2><h3 id="5-1-Context-getSystemService"><a href="#5-1-Context-getSystemService" class="headerlink" title="5.1 Context.getSystemService()"></a>5.1 Context.getSystemService()</h3><p>Android 系统在启动后会在后台运行很多系统服务提供给应用使用，这些 <a href="http://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T" target="_blank" rel="external">服务</a>) 主要有 <code>WindowManager, LayoutInflater, ActivityManager, PowerManager, AlarmManager, NotificationManager, KeyguardManager, LocationManager, SearchManager, Vibrator, ConnectivityManager, WifiManager, AudioManager, MediaRouter, TelephonyManager, SubscriptionManager, InputMethodManager, UiModeManager, DownloadManager, BatteryManager, JobScheduler, NetworkStatsManager</code></p><p>我们可以通过 <code>Context.getSystemService(String name)</code> 来获取 <a href="http://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String" target="_blank" rel="external">服务</a>)。</p><p>例如 可以通过如下方法从 xml 中插入新的视图</p><pre><code>LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);inflater.inflate(R.layout.view, root, true);</code></pre><h3 id="5-2-Context-getSystemService-源码分析"><a href="#5-2-Context-getSystemService-源码分析" class="headerlink" title="5.2 Context.getSystemService() 源码分析"></a>5.2 Context.getSystemService() 源码分析</h3><p>追踪 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/ContextImpl.java#L1364">ContextImpl</a> <code>getSystemService()</code> 源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSystemService</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> SystemServiceRegistry.getSystemService(<span class="keyword">this</span>, name);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>继续追踪 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/SystemServiceRegistry.java#L719">SystemServiceRegistry</a> 源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Gets a system service from a given context.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getSystemService</span><span class="params">(ContextImpl ctx, String name)</span> </span>&#123;</div><div class="line">    ServiceFetcher&lt;?&gt; fetcher = SYSTEM_SERVICE_FETCHERS.get(name);</div><div class="line">    <span class="keyword">return</span> fetcher != <span class="keyword">null</span> ? fetcher.getService(ctx) : <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>追踪 <code>SYSTEM_SERVICE_FETCHERS</code> 可以发现在 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/SystemServiceRegistry.java#L318">SystemServiceRegistry</a> 静态区中注册了几乎所有的系统服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">registerService(Context.LAYOUT_INFLATER_SERVICE, LayoutInflater.class,</div><div class="line">        <span class="keyword">new</span> CachedServiceFetcher&lt;LayoutInflater&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> LayoutInflater <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PhoneLayoutInflater(ctx.getOuterContext());</div><div class="line">    &#125;&#125;);</div><div class="line"></div><div class="line">registerService(Context.LOCATION_SERVICE, LocationManager.class,</div><div class="line">        <span class="keyword">new</span> CachedServiceFetcher&lt;LocationManager&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> LocationManager <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> </span>&#123;</div><div class="line">        IBinder b = ServiceManager.getService(Context.LOCATION_SERVICE);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LocationManager(ctx, ILocationManager.Stub.asInterface(b));</div><div class="line">    &#125;&#125;);</div></pre></td></tr></table></figure><p>上面代码片断中，<a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/app/SystemServiceRegistry.java#L322">PhoneLayoutInflater</a> 最终回到了 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/view/LayoutInflater.java#L204">LayoutInflater</a>。而 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/location/java/android/location/LocationManager.java#L315">LocationManager</a> 则是对 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/location/java/android/location/ILocationManager.aidl#L39">ILocationManager</a> 的封装。可以发现，在 <a href="https://github.com/xdtianyu/android-6.0.0_r1/tree/master/frameworks/base/location/java/android/location">frameworks/base/location/java/android/location</a> 包下含有大量的 AIDL 文件。</p><p>继续追踪 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/os/ServiceManager.java#L49">ServiceManager.getService(Context.LOCATION_SERVICE)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IServiceManager <span class="title">getIServiceManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sServiceManager != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> sServiceManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Find the service manager</span></div><div class="line">    sServiceManager = ServiceManagerNative.asInterface(BinderInternal.getContextObject());</div><div class="line">    <span class="keyword">return</span> sServiceManager;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Returns a reference to a service with the given name.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> name the name of the service to get</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> a reference to the service, or &lt;code&gt;null&lt;/code&gt; if the service doesn't exist</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IBinder <span class="title">getService</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        IBinder service = sCache.get(name);</div><div class="line">        <span class="keyword">if</span> (service != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> service;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> getIServiceManager().getService(name);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">        Log.e(TAG, <span class="string">"error in getService"</span>, e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从上面代码片断可以看出，<code>ServiceManager</code> 会从 <code>sCache</code> 缓存或 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/os/ServiceManagerNative.java#L33">IServiceManager</a> 中查找服务并返回一个 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/os/IBinder.java#L85">IBinder</a> 对象。这个 <code>IBinder</code> 就是一个远程对象，可以通过它与其他进程交互。</p><p>继续深入 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/os/ServiceManager.java#L55">getIServiceManager().getService(name)</a> , 进入 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/os/ServiceManagerNative.java#L33">ServiceManagerNative</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Cast a Binder object into a service manager interface, generating</span></div><div class="line"><span class="comment"> * a proxy if needed.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IServiceManager <span class="title">asInterface</span><span class="params">(IBinder obj)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    IServiceManager in =</div><div class="line">        (IServiceManager)obj.queryLocalInterface(descriptor);</div><div class="line">    <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> in;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServiceManagerProxy(obj);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceManagerProxy</span> <span class="keyword">implements</span> <span class="title">IServiceManager</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceManagerProxy</span><span class="params">(IBinder remote)</span> </span>&#123;</div><div class="line">        mRemote = remote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mRemote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">getService</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        Parcel data = Parcel.obtain();</div><div class="line">        Parcel reply = Parcel.obtain();</div><div class="line">        data.writeInterfaceToken(IServiceManager.descriptor);</div><div class="line">        data.writeString(name);</div><div class="line">        mRemote.transact(GET_SERVICE_TRANSACTION, data, reply, <span class="number">0</span>);</div><div class="line">        IBinder binder = reply.readStrongBinder();</div><div class="line">        reply.recycle();</div><div class="line">        data.recycle();</div><div class="line">        <span class="keyword">return</span> binder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IBinder mRemote;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从上边代码片断可以看到，<code>ServiceManager.getIServiceManager()</code> 返回的是一个 <code>ServiceManagerProxy</code>, 而 <code>ServiceManager.getService()</code> 则是在 <code>ServiceManagerProxy</code> 中通过 <code>ServiceManager</code> 的远程 <code>Binder</code> 对象 <code>mRemote</code>，操作 <code>Parcel</code> 数据，调用 <a href="https://github.com/xdtianyu/android-6.0.0_r1/blob/master/frameworks/base/core/java/android/os/IBinder.java#L223">IBinder.transact(int code, Parcel data, Parcel reply, int flags)</a> 方法来发送请求，并通过 <code>reply.readStrongBinder()</code> 返回了要查找的服务的远程对象。</p><p>可以看到，系统服务的获取方式也是通过 AIDL 的方式实现的。</p><h2 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a>6. 结论</h2><p>1. Binder 的实现涉及到 kernel 驱动，本地层，JNI 和应用层，贯穿了整个 Ａndroid 系统。系统服务获取、Activity/Service 启动、Intent的传递等都离不开 binder,要掌握 binder 的原理需要深入到系统的每一层代码。</p><p>2. 上层的 <code>android.os.Binder</code> 只是对 binder 的又一次抽象封装，我们在应用中一般也不会直接使用。</p><p>3. AIDL 本质上是一个用于封装 Binder 操作的工具，最终的进程间通信由 Binder 的 <code>transact</code> 和 <code>onTransact</code> 完成。我们在应用中实现 AIDL 接口，可以快速实现进程间通信。</p><h2 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h2><p><a href="http://wangkuiwu.github.io/2014/09/01/Binder-Introduce/" target="_blank" rel="external">Android Binder机制</a></p><p><a href="http://blog.csdn.net/luoshengyang/article/details/6618363" target="_blank" rel="external">Android进程间通信（IPC）机制Binder</a></p><p><a href="https://www.nds.rub.de/media/attachments/files/2012/03/binder.pdf" target="_blank" rel="external">Android Binder</a></p><p><a href="http://rts.lab.asu.edu/web_438/project_final/CSE_598_Android_Architecture_Binder.pdf" target="_blank" rel="external">Android Architecture Binder</a></p><p><a href="http://liuxiangtian.github.io/2016/01/07/AIDL%E4%B8%8EBinder%E6%A1%86%E6%9E%B6%E6%B5%85%E8%B0%88/" target="_blank" rel="external">AIDL与Binder框架浅谈</a></p><p><a href="https://github.com/hehonghui/android-tech-frontier/blob/master/issue-22/Binder%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90.md">Binder框架解析</a></p><p><a href="http://events.linuxfoundation.org/images/stories/slides/abs2013_gargentas.pdf" target="_blank" rel="external">Deep Dive into Android IPC/Binder Framework at Android Builders Summit 2013</a></p><p><a href="https://www.youtube.com/watch?v=NWhyADzgoiI" target="_blank" rel="external">Android Builders Summit 2013 - Deep Dive into Android IPC/Binder Framework (video)</a></p><p><a href="http://blog.csdn.net/u010961631/article/details/20479507" target="_blank" rel="external">Binder源码分析之驱动层（原）</a></p><p><a href="http://blog.csdn.net/yangwen123/article/details/9316987" target="_blank" rel="external">深入分析Android Binder 驱动</a></p><p><a href="http://blog.csdn.net/qq429205464/article/details/7822442" target="_blank" rel="external">构造IOCTL命令的学习心得—–_IO, _IOR, _IOW, _IOWR 幻数的理解</a></p><p><a href="http://blog.csdn.net/21cnbao/article/details/8087354" target="_blank" rel="external">Service与Android系统设计（7）— Binder驱动</a></p><p><a href="https://web.archive.org/web/20101016004342/http://www.gmier.com/node/11" target="_blank" rel="external">Android Binder</a></p><p><a href="http://www.cnblogs.com/zhangxinyan/p/3487889.html" target="_blank" rel="external">Binder机制，从Java到C （7. Native Service）</a></p><hr><p><strong>待补充的内容</strong></p><p>1. 客户端 bindService() 流程及源码分析</p><p>2. Binder Native 层其他源码文件分析</p><p>3. 系统服务（SystemService）详细列表及在本地层的源码分析</p><p>4. SystemManager 源码分析</p><p>5. 完善 binder 驱动内容，补充关系图</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AsyncTask源码分析</title>
    <link href="https://github.com/itgoyo/2017/07/26/AsyncTask%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"/>
    <id>https://github.com/itgoyo/2017/07/26/AsyncTask源码分析.html</id>
    <published>2017-07-26T11:36:58.000Z</published>
    <updated>2017-11-23T13:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;label=Star" alt=""></p><p>项目地址： <a href="https://github.com/itgoyo/AndroidSource-Analysis">https://github.com/itgoyo/AndroidSource-Analysis</a></p><p>简介： Android源码分析，让你更清楚的理解每一个组件的功能与用法。</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>AsyncTask是android提供的一种异步消息处理的解决方案，能简化我们在子线程中更新UI控件，使用AsyncTask你将看不到任何关于操作线程的代码</p><h2 id="2-版本差别"><a href="#2-版本差别" class="headerlink" title="2. 版本差别"></a>2. 版本差别</h2><p>2.1 线程池配置</p><ul><li>android3.0以前线程池配置，代码如下所示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = <span class="number">5</span>;<span class="comment">//核心线程数量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = <span class="number">128</span>;<span class="comment">//线程池中允许的最大线程数目</span></div><div class="line"></div><div class="line"><span class="comment">//当线程数目大于核心线程数目时，如果超过这个keepAliveTime时间，那么空闲的线程会被终止</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> it KEEP_ALIVE = <span class="number">10</span>;</div><div class="line">……    </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor sExecutor = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE,    </div><div class="line">        MAXIMUM_POOL_SIZE, KEEP_ALIVE, TimeUnit.SECONDS, sWorkQueue, sThreadFactory);</div></pre></td></tr></table></figure><p>android3.0以后更加灵活，根据cpu核数配置<code>CORE_POOL_SIZE</code>和<code>MAXIMUM_POOL_SIZE</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据cpu的大小来配置核心的线程</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = CPU_COUNT + <span class="number">1</span>;<span class="comment">//核心线程数量</span></div><div class="line"><span class="comment">//线程池中允许的最大线程数目</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE = <span class="number">1</span>;<span class="comment">//空闲线程的超时时间</span></div></pre></td></tr></table></figure><p>2.2 串行和并行，引用来自<a href="http://www.jianshu.com/p/a8b1861f2efc" target="_blank" rel="external">这篇文章</a></p><ul><li>android 1.5以前的时候<code>execute</code>是串行执行的</li><li>android 1.6直到android 2.3.2被修改为并行执行，执行任务的线程池就是THREAD_POOL_EXECUTOR</li><li>android 3.0以后，默认任务是串行执行的，如果想要并行执行任务可调用<code>executeOnExecutor(Executor exec, Params.. params)</code></li></ul><p>具体用法可参照<a href="http://glanwang.com/post/android/android-asynctaskde-pian-zhu" target="_blank" rel="external">Android AsyncTask的骗术</a></p><h2 id="3-基本用法"><a href="#3-基本用法" class="headerlink" title="3. 基本用法"></a>3. 基本用法</h2><h3 id="3-1-继承AsyncTask，设置子类三个泛型的参数"><a href="#3-1-继承AsyncTask，设置子类三个泛型的参数" class="headerlink" title="3.1 继承AsyncTask，设置子类三个泛型的参数"></a>3.1 继承AsyncTask，设置子类三个泛型的参数</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>Params     异步任务处理的参数</li><li>Progress   异步任务执行过程中返回给主线程的进度值，通过publishProgress()方法发送出去</li><li>Result     异步任务执行结束返回的结果的结果类型，可以为boolean，或者bitmap等类型</li></ul><h3 id="3-2-子类必须实现的抽象方法"><a href="#3-2-子类必须实现的抽象方法" class="headerlink" title="3.2 子类必须实现的抽象方法"></a>3.2 子类必须实现的抽象方法</h3><ul><li>onPreExecute</li></ul><p>执行后台耗时操作前被调用，通常用于完成一些初始化操作，比如2.3例子中初始化dialog的操作，或者一些集合容器</p><ul><li>doInBackGround</li></ul><p>必须实现，异步执行后台线程将要完成的任务(该方法在子线程运行，下面源码会分析到)</p><ul><li>onProgressUpdate</li></ul><p>在doInBackGround方法中调用publishProgress方法，AsyncTask就会主动调用onProgressUpdate实现更新</p><p>任务的执行进度</p><ul><li>onPostExecute</li></ul><p>当doInBackGround完成后，系统会自动调用，销毁一些dialog的操作，并将doInBackGround方法返回的值传给该方法</p><p>执行的大致流程是：</p><p><code>onPreExecute</code>-&gt; <code>doInBackGround</code>-&gt;<code>onProgressUpdate(调用publishProgress的时候)</code>-&gt;<code>onPostExecute</code></p><h3 id="3-3-用法案例"><a href="#3-3-用法案例" class="headerlink" title="3.3 用法案例"></a>3.3 用法案例</h3><p>1、实例化子类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//串行实例化</span></div><div class="line"><span class="keyword">new</span> DownAsyncTask().extcute();</div><div class="line"><span class="comment">//并行实例化</span></div><div class="line"><span class="keyword">new</span> DownAsyncTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,<span class="string">""</span>);</div></pre></td></tr></table></figure></p><p>2、点击查看，<a href="https://github.com/white37/AndroidSdkSourceAnalysis/blob/master/source/AsyntaskActivity.java">代码案例</a></p><h3 id="3-4-取消异步任务"><a href="#3-4-取消异步任务" class="headerlink" title="3.4 取消异步任务"></a>3.4 取消异步任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AsyncTask.cancel(mayInterruptIfRunning);</div></pre></td></tr></table></figure><p>mayInterruptIfRunning是boolean类型的(注意这里true和false的区别)，其调用流程：AsyncTask.cancel() -&gt; FutureTask.cancel()。FutureTask.cancel()的源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</div><div class="line"><span class="comment">//检测当前状态是否是NEW,如果不是，说明任务已经完成或取消或中断，所以直接返回。</span></div><div class="line">      <span class="keyword">if</span> (!(state == NEW &amp;&amp;</div><div class="line">            U.compareAndSwapInt(<span class="keyword">this</span>, STATE, NEW,</div><div class="line">                mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      <span class="keyword">try</span> &#123;    <span class="comment">// in case call to interrupt throws exception</span></div><div class="line">          <span class="comment">//如果mayInterruptIfRunning为true的时候，线程就会调用interrupt()方法，抛出异常。</span></div><div class="line">          <span class="keyword">if</span> (mayInterruptIfRunning) &#123;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  Thread t = runner;</div><div class="line">                  <span class="keyword">if</span> (t != <span class="keyword">null</span>)</div><div class="line">                  <span class="comment">//调用interrupt方法，状态设置为INTERRUPTING，然后试着中断线程，完成后设置状态为INTERRUPTED</span></div><div class="line">                      t.interrupt();</div><div class="line">              &#125; <span class="keyword">finally</span> &#123; <span class="comment">// final state</span></div><div class="line">                  U.putOrderedInt(<span class="keyword">this</span>, STATE, INTERRUPTED);</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="comment">//通知等待线程的结果（因为FutureTask.get()法获得计算结果的唯一方法，如果计算没有完成，此方法会堵塞直到计算完成）</span></div><div class="line">          finishCompletion();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>以下是我代码例子中<code>doInBackground()</code>中注释的，这里主要是为了强调true和false的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">        Thread.sleep(<span class="number">2000</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e)</div><div class="line">    &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li><p>如果线程处于休眠状态，为true则正在执行的线程将会中断，抛出异常，但执行的任务线程会继续执行完毕调用<code>onCanceled()</code>。为false则正在执行的线程不会中断，任务线程执行完毕调用<code>onCanceled()</code></p></li><li><p>如果线程不处于休眠状态，为true和false都没有区别，任务线程执行完毕后调用<code>onCanceled()</code><br>正确地取消要在<code>doInBackground(Void... params)</code>使用<code>isCancelled()</code>来判断，退出循环操作。如下面的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (progress &lt; <span class="number">10000</span>) &#123;</div><div class="line">        progress = progress + <span class="number">2</span>;</div><div class="line">        Log.i(<span class="string">"当前的进度"</span>, <span class="string">"progress=="</span> + progress);</div><div class="line">        publishProgress(progress);</div><div class="line">        <span class="comment">//判断是不是调用了AsyncTask.cancel(mayInterruptIfRunning)，如果已经调用了，</span></div><div class="line">        <span class="keyword">if</span>(isCancelled())</div><div class="line">        &#123;</div><div class="line">           <span class="keyword">break</span>;<span class="comment">//跳出循环，马上调用onCancelled()方法，不需要等doInBackground执行完任务</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="4-AsyncTask源码分析-基于android3-0以后分析"><a href="#4-AsyncTask源码分析-基于android3-0以后分析" class="headerlink" title="4. AsyncTask源码分析(基于android3.0以后分析)"></a>4. AsyncTask源码分析(基于android3.0以后分析)</h2><h3 id="4-1-AsyncTask构造函数"><a href="#4-1-AsyncTask构造函数" class="headerlink" title="4.1 AsyncTask构造函数"></a>4.1 AsyncTask构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**AsyncTask的构造函数源码片段**/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</div><div class="line">     mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">         <span class="comment">//异步任务执行的时候回调call方法</span></div><div class="line">         <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">             mTaskInvoked.set(<span class="keyword">true</span>);</div><div class="line">             <span class="comment">//设置线程的优先级</span></div><div class="line">             Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">             <span class="comment">//noinspection unchecked</span></div><div class="line">             Result result = doInBackground(mParams);</div><div class="line">             Binder.flushPendingCommands();</div><div class="line">             <span class="comment">//将结果发送出去</span></div><div class="line">             <span class="keyword">return</span> postResult(result);</div><div class="line">         &#125;</div><div class="line">     &#125;;</div><div class="line"></div><div class="line">     mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class="line">         <span class="comment">//任务执行完毕后会调用done方法</span></div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</div><div class="line">             <span class="keyword">try</span> &#123;</div><div class="line">                 <span class="comment">//get()表示获取mWorker的call的返回值，即Result.然后看postResultIfNotInvoked方法</span></div><div class="line">                 postResultIfNotInvoked(get());</div><div class="line">             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                 android.util.Log.w(LOG_TAG, e);</div><div class="line">             &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">                 <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>,</div><div class="line">                         e.getCause());</div><div class="line">             &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</div><div class="line">                 postResultIfNotInvoked(<span class="keyword">null</span>);</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>AsyncTask的实例化是在UI线程中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//@MainThread表示这个动作是在UI线程中完成</span></div><div class="line"><span class="meta">@MainThread</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>构造函数初始化了两个成员变量mWorker和mFuture。mWorker为WorkerRunnable类型的匿名内部类实例对象（实现了Callable接口），mFuture为FutureTask类型的匿名内部类实例对象，将mWorker作为mFuture的形参（重写了FutureTask类的done方法）。</p><ul><li>WorkerRunnable是一个实现了Callable的抽象类，扩展了Callable多了一个Params参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerRunnable</span>&lt;<span class="title">Params</span>, <span class="title">Result</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Result</span>&gt;</span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">        Params[] mParams;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面讲述下Callable和Runnable的区别</p><ul><li>Callable的接口方法是call，Runnable是run</li><li>Callable可以带返回值，Runnable不行，结果通过Future.get()获取</li><li>Callable可以捕获异常，Runnable不行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableAndFuture</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Callable&lt;Integer&gt; callable = <span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">//那WorkerRunnable的回调方法call肯定是在FutureTask中调用的</span></div><div class="line">        FutureTask&lt;Integer&gt; future = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(callable)</div><div class="line">      );</div><div class="line">        <span class="keyword">new</span> Thread(future).start();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">5000</span>);<span class="comment">// 可能做一些事情</span></div><div class="line">            System.out.println(future.get());</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>FutureTask的构造函数如下，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="comment">//将AsyncTask里面初始化的callable赋值给FutureTask里面的callable，证实了WorkerRunnable的回调方法call肯定是在FutureTask中调用的</span></div><div class="line">    <span class="keyword">this</span>.callable = callable;</div><div class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>查看FutureTask类，它实现了接口Runnable<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; // 实现了<span class="title">RunnableFuture</span>接口</span></div></pre></td></tr></table></figure></p><p>作为Runnable被线程执行，同时将Callable作为构造函数的参数传入，这样组合的好处是，假设有一个很耗时的返回值需要计算，并且这个返回值不是立刻需要的话，就可以使用这个组合，用另一个线程去计算返回值，而当前线程在使用这个返回值之前可以做其它的操作，等到需要这个返回值时，再通过Future得到。FutureTask的run方法要开始回调WorkerRunable的call方法了，call里面调用doInBackground(mParams)，终于回到我们后台任务了，调用我们AsyncTask子类的<code>doInBackground()</code>，由此可以看出<code>doInBackground()</code>是在子线程中执行的，如下图所示</p><p><img src="/images/FutureTask.png" alt=""></p><h3 id="4-2-核心方法"><a href="#4-2-核心方法" class="headerlink" title="4.2 核心方法"></a>4.2 核心方法</h3><p>1、execute()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</div><div class="line"></div><div class="line"> <span class="comment">/** AsyncTask类的execute方法**/</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</div><div class="line">    <span class="comment">//调用executeOnExecutor方法</span></div><div class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当执行execute方法时，实际上是调用了executeOnExecutor方法。这里传递了两个参数，一个是sDefaultExecutor，一个是params。从上面的源码可以看出，sDefaultExecutor其实是一个SerialExecutor对象，实现了串行线程队列。params其实最终会赋给doInBackground方法去处理。</p><p>2、executeOnExecutor()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//exec执行AsyncTask.execute()方法时传递进来的参数sDefaultExecutor，这个sDefaultExecutor其实就是SerialExecutor对象。默认是串行执行的</span></div><div class="line"><span class="comment">//若想变成并发执行exec可以传入AsyncTask.THREAD_POOL_EXECUTOR。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></div><div class="line"><span class="function"><span class="params">            Params... params)</span> </span>&#123;</div><div class="line">        <span class="comment">//如果一个任务已经进入执行的状态，再执行就会抛异常。这就决定了一个AsyncTask只能执行一次</span></div><div class="line">        <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</div><div class="line">            <span class="keyword">switch</span> (mStatus) &#123;</div><div class="line">                <span class="keyword">case</span> RUNNING:</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></div><div class="line">                            + <span class="string">" the task is already running."</span>);</div><div class="line">                <span class="keyword">case</span> FINISHED:</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></div><div class="line">                            + <span class="string">" the task has already been executed "</span></div><div class="line">                            + <span class="string">"(a task can be executed only once)"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//一旦executeOnExecutor调用了就标记为运行状态</span></div><div class="line">        mStatus = Status.RUNNING;</div><div class="line"><span class="comment">//实际是调用子类里面的onPreExecute</span></div><div class="line">        onPreExecute();</div><div class="line"><span class="comment">//将处理的参数类型赋值给mWorker</span></div><div class="line">        mWorker.mParams = params;</div><div class="line">        <span class="comment">//execute是调用SERIAL_EXECUTOR的execute，mFuture就是之前AsyncTask构造初始化赋值的FutureTask。</span></div><div class="line">        exec.execute(mFuture);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>这里要说明一下，AsyncTask的异步任务有三种状态</p><ul><li>PENDING 待执行状态。当AsyncTask被创建时，就进入了PENDING状态。</li><li>RUNNING 运行状态。当调用executeOnExecutor，就进入了RUNNING状态。</li><li>FINISHED 结束状态。当AsyncTask完成(用户cancel()或任务执行完毕)时，就进入了FINISHED状态。</li></ul><p>3、SerialExecutor的execute方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</div><div class="line"><span class="comment">//循环数组实现的双向Queue。大小是2的倍数，默认是16。有队头队尾两个下标</span></div><div class="line">      <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</div><div class="line">      <span class="comment">//当前正在运行的runnable</span></div><div class="line">      Runnable mActive;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">          <span class="comment">//添加到双端队列里面去</span></div><div class="line">          mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                  <span class="keyword">try</span> &#123;</div><div class="line">                  <span class="comment">//执行的是mFuture就是之前AsyncTask构造初始化赋值的FutureTask的run()方法</span></div><div class="line">                      r.run();</div><div class="line">                  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                  <span class="comment">//无论执行结果如何都会取出下一个任务执行</span></div><div class="line">                      scheduleNext();</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;);</div><div class="line">          <span class="comment">//如果没有活动的runnable，从双端队列里面取出一个runnable放到线程池中运行</span></div><div class="line">          <span class="comment">//第一个请求任务过来的时候mActive是空的</span></div><div class="line">          <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">//取出下一个任务来执行</span></div><div class="line">              scheduleNext();</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="comment">//从双端队列中取出一个任务</span></div><div class="line">          <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">//线程池执行取出来的任务，真正执行任务的</span></div><div class="line">              THREAD_POOL_EXECUTOR.execute(mActive);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;<span class="comment">//java</span></div></pre></td></tr></table></figure></p><p>exec.execute(mFuture)执行时，SerialExecutor将FutureTask作为参数执行execute方法。在execute方法中，假设FutureTask插入进了两个以上的任务队列到mTasks中，第一次过来mActive==null，通过<code>mTasks.poll()</code>取出一个任务丢给线程池运行，线程池执行r.run，其实就是执行FutureTask的run方法，因为传递进来的r参数就是mFuture。等到上一个线程执完r.run()完之后，这里是通过一个try-finally代码块，并在finally中调用了scheduleNext()方法，保证无论发生什么情况，scheduleNext()都会取出下一个任务执行。接着因为mActive不为空了，不会再执行<code>`scheduleNext()</code>，由于存在一个循环队列，每个 Runnable 被执行的时候，都进入去队列，然后在执行完后出队，才会进入下一个 Runnable 的执行流程。由此可知道这是一个串行的执行过程，同一时刻只会有一个线程正在执行，其余的均处于等待状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                mTaskInvoked.set(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">                <span class="comment">//noinspection unchecked</span></div><div class="line">                Result result = doInBackground(mParams);<span class="comment">//调用子类的doInBackground</span></div><div class="line">                Binder.flushPendingCommands();</div><div class="line">                <span class="keyword">return</span> postResult(result);<span class="comment">//执行完后通过postResult结果传递出去</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div></pre></td></tr></table></figure><p>上文中提到调用<code>call()</code>的流程：SerialExecutor.execute() -&gt; FutureTask.run() -&gt; WorkerRunnable.call()  如果回调了<code>call()</code>方法，就会调用了<code>doInBackground(mParams)</code>方法，这都是在子线程中执行的。执行完后，将结果通过<code>postResult(result)</code>发送出去。</p><p>4、AsyncTask的postResult方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="comment">//获取一个handler，等到一个消息，将结果封装在Message</span></div><div class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">            <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));<span class="comment">//new AsyncTaskResult&lt;Result&gt;(this, result)将得到的结果再做了一层封装</span></div><div class="line">    <span class="comment">//将消息发送到主线程，会回调handleMessage()方法</span></div><div class="line">    message.sendToTarget();</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>因为<code>postResult(Result result)</code>还是在子线程中调用的，如果要发送给主线程，必须通过Handler。源码中使用sHandler并带着MESSAGE_POST_RESULT和封装了任务执行结果的对象AsyncTaskResult，然后message.sendToTarget()开始发消息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">synchronized</span> (AsyncTask.class) &#123;</div><div class="line">          <span class="keyword">if</span> (sHandler == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">//初始化一个InternalHandler，用与将结果发送给主线程</span></div><div class="line">              sHandler = <span class="keyword">new</span> InternalHandler();</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> sHandler;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>并在InternalHandler的handleMessage中开始处理消息，InternalHandler的源码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 这个handler是关联到主线程的</span></div><div class="line">        <span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">                <span class="comment">// There is only one result</span></div><div class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">                result.mTask.onProgressUpdate(result.mData);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>这里根据消息的类型进行了判断，如果是MESSAGE_POST_RESULT消息，就会去执行finish()方法，<code>finish()</code>源码如下文所示：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (isCancelled()) &#123;  </div><div class="line">        onCancelled(result);  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        onPostExecute(result);  </div><div class="line">    &#125;  </div><div class="line">    mStatus = Status.FINISHED;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>如果任务已经取消了，调用<code>onCancelled</code>方法，如果没被取消，则调用onPostExecute()方法。</p><ul><li>如果<code>doInBackground(Void... params)</code>调用<code>publishProgress()</code>方法，实际就是发送一条MESSAGE_POST_PROGRESS消息，就会去执行onProgressUpdate()方法。<code>publishProgress()</code>的源码如下文所示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WorkerThread</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isCancelled()) &#123;</div><div class="line">        getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果你还不够清晰，请看下面的这个流程图</p><p><img src="images/AsyncTask流程图.png" alt=""></p><h2 id="5-AsyncTask需要注意的坑"><a href="#5-AsyncTask需要注意的坑" class="headerlink" title="5. AsyncTask需要注意的坑"></a>5. AsyncTask需要注意的坑</h2><ul><li>AsyncTask的对象必须在主线程中实例化，execute方法也要在主线程调用(查看3.1节-AsyncTask构造函数)</li><li>同一个AsyncTask任务只能被执行一次，即只能调用一次execute方法，多次调用时将会抛异常（查看3.2里面的第二小节）</li><li>cancel()方法无法直接中断子线程，只是更改了中断的标志位。控制异步任务执行结束后不会回调onPostExecute()。正确的取消异步任务要cancel()方法+doInbacground()做判断跳出循环</li><li>AsyncTask在Activity通常作为匿名的内部类来使用，如果 AsyncTask 中的异步任务在 Activity 退出时还没执行完或者阻塞了，那么这个保持的外部的 Activity 实例得不到释放（内部类保持隐式外部类的实例的引用），最后导致会引起OOM，解决办法是：在 AsyncTask 使用弱引用外部实例，或者保证在 Activity 退出时，所有的 AsyncTask 已执行完成或被取消</li><li>会产生阻塞问题，尤其是单任务顺序执行的情况下，一个任务执行时间过长会阻塞其他任务的执行</li><li>不建议使用AsyncTask进行网络操作</li></ul><p>AsyncTasks should ideally be used for short operations (a few seconds at the most.) If you need to keep threads running for long periods of time, it is highly recommended you use the various APIs。</p><p>Android文档中有写到AsyncTask应该处理几秒钟的操作（通常为轻量的本地IO操作），由于网络操作存在不确定性，可能达到几秒以上，所以不建议使用。</p><h2 id="6-版本兼容AsyncTaskCompat"><a href="#6-版本兼容AsyncTaskCompat" class="headerlink" title="6. 版本兼容AsyncTaskCompat"></a>6. 版本兼容AsyncTaskCompat</h2><p><a href="http://www.jianshu.com/p/b283b5b704e5" target="_blank" rel="external">有兴趣的可以看这篇文章</a></p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>尽管AsyncTask现在已经很少使用了，但是它的一些设计思路可以借鉴到我们的框架中。比如我们的代码中尽量设计灵活一些，就像AysnTask里面存在串行、并行的操作一样，提供用户同的api，让用户在不同的场景下选择不同的业务逻辑处理。</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/AndroidSource-Analysis.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a href
      
    
    </summary>
    
      <category term="源码分析" scheme="https://github.com/itgoyo/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio插件大全</title>
    <link href="https://github.com/itgoyo/2017/07/25/AndroidStudio%E6%8F%92%E4%BB%B6%E5%A4%A7%E5%85%A8.html"/>
    <id>https://github.com/itgoyo/2017/07/25/AndroidStudio插件大全.html</id>
    <published>2017-07-25T13:30:45.000Z</published>
    <updated>2017-11-23T15:31:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/itgoyo/Android-Studio-Plugins.svg?style=social&amp;label=Star" alt=""></p><p>#1.<a href="http://plugins.jetbrains.com/plugin/7654?pr=androidstudio" target="_blank" rel="external">GsonFormat</a><br>快速将json字符串转换成一个Java Bean，免去我们根据json字符串手写对应Java Bean的过程。</p><p><img src="http://plugins.jetbrains.com/files/7654/screenshot_15729.png" alt=""></p><p>使用方法：快捷键Alt+S也可以使用Alt+Insert选择GsonFormat</p><h1 id="2-Android-ButterKnife-Zelezny"><a href="#2-Android-ButterKnife-Zelezny" class="headerlink" title="2.Android ButterKnife Zelezny"></a>2.<a href="http://plugins.jetbrains.com/plugin/7369?pr=androidstudio" target="_blank" rel="external">Android ButterKnife Zelezny</a></h1><p>配合ButterKnife实现注解，从此不用写findViewById，想着就爽啊。在Activity，Fragment，Adapter中选中布局xml的资源id自动生成butterknife注解。</p><p><img src="http://plugins.jetbrains.com/files/7369/screenshot_14384.png" alt=""></p><p>使用方法：Ctrl+Shift+B选择图上所示选项</p><h1 id="3-Android-Code-Generator"><a href="#3-Android-Code-Generator" class="headerlink" title="3.Android Code Generator"></a>3.<a href="http://plugins.jetbrains.com/plugin/7595?pr=androidstudio" target="_blank" rel="external">Android Code Generator</a></h1><p>根据布局文件快速生成对应的Activity，Fragment，Adapter，Menu。</p><p><img src="http://plugins.jetbrains.com/files/7595/screenshot_14834.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7595/screenshot_14833.png" alt=""></p><h1 id="4-Android-Parcelable-code-generator"><a href="#4-Android-Parcelable-code-generator" class="headerlink" title="4.Android Parcelable code generator"></a>4.<a href="http://plugins.jetbrains.com/plugin/7332?pr=androidstudio" target="_blank" rel="external">Android Parcelable code generator</a></h1><p>JavaBean序列化，快速实现Parcelable接口。</p><p><img src="https://segmentfault.com/image?src=http://img.blog.csdn.net/20160416104459926&amp;objectId=1190000005092842&amp;token=ab29ed79d41be9e42b3a3d2ed1ec3bef" alt=""></p><h1 id="5-Android-Methods-Count"><a href="#5-Android-Methods-Count" class="headerlink" title="5.Android Methods Count"></a>5.<a href="http://plugins.jetbrains.com/plugin/8076?pr=androidstudio" target="_blank" rel="external">Android Methods Count</a></h1><p>显示依赖库中得方法数</p><p><img src="http://plugins.jetbrains.com/files/8076/screenshot_15509.png" alt=""></p><h1 id="6-Lifecycle-Sorter"><a href="#6-Lifecycle-Sorter" class="headerlink" title="6.Lifecycle Sorter"></a>6.<a href="http://plugins.jetbrains.com/plugin/7742?pr=androidstudio" target="_blank" rel="external">Lifecycle Sorter</a></h1><p>可以根据Activity或者fragment的生命周期对其生命周期方法位置进行先后排序，快捷键Ctrl + alt + K</p><p><img src="http://plugins.jetbrains.com/files/7742/screenshot_15071.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7742/screenshot_15070.png" alt=""></p><h1 id="7-CodeGlance"><a href="#7-CodeGlance" class="headerlink" title="7.CodeGlance"></a>7.<a href="http://plugins.jetbrains.com/plugin/7275?pr=androidstudio" target="_blank" rel="external">CodeGlance</a></h1><p>在右边可以预览代码，实现快速定位</p><p><img src="http://plugins.jetbrains.com/files/7275/screenshot_14294.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7275/screenshot_14295.png" alt=""></p><h1 id="8-findBugs-IDEA"><a href="#8-findBugs-IDEA" class="headerlink" title="8.findBugs-IDEA"></a>8.<a href="http://plugins.jetbrains.com/plugin/3847?pr=androidstudio" target="_blank" rel="external">findBugs-IDEA</a></h1><p>查找bug的插件，Android Studio也提供了代码审查的功能（Analyze-Inspect Code…）</p><p><img src="http://plugins.jetbrains.com/oldimg/screenshots/FindBugs-IDEA_2541.png" alt=""></p><h1 id="9-ADB-WIFI"><a href="#9-ADB-WIFI" class="headerlink" title="9.ADB WIFI"></a>9.<a href="http://plugins.jetbrains.com/plugin/7856?pr=androidstudio" target="_blank" rel="external">ADB WIFI</a></h1><p>使用wifi无线调试你的app，无需root权限<br>也可参考以下文章：<br><a href="http://www.jianshu.com/p/21d1b65d92a4" target="_blank" rel="external">Android wifi无线调试App新玩法ADB WIFI</a></p><p><img src="http://plugins.jetbrains.com/files/7856/screenshot_15153.png" alt=""></p><h1 id="10-AndroidPixelDimenGenerator"><a href="#10-AndroidPixelDimenGenerator" class="headerlink" title="10.AndroidPixelDimenGenerator"></a>10.<a href="https://github.com/succlz123/AndroidPixelDimenGenerator">AndroidPixelDimenGenerator</a></h1><p>Android Studio自动生成dimen.xml文件插件</p><p><img src="https://github.com/succlz123/AndroidPixelDimenGenerator/raw/master/snapshot/1.jpeg" alt=""></p><h1 id="11-JsonOnlineViewer"><a href="#11-JsonOnlineViewer" class="headerlink" title="11.JsonOnlineViewer"></a>11.<a href="http://plugins.jetbrains.com/plugin/7838?pr=androidstudio" target="_blank" rel="external">JsonOnlineViewer</a></h1><p>在Android Studio中请求、调试接口</p><p><img src="http://plugins.jetbrains.com/files/7838/screenshot_15113.png" alt=""></p><h1 id="12-Android-Styler"><a href="#12-Android-Styler" class="headerlink" title="12.Android Styler"></a>12.<a href="http://plugins.jetbrains.com/plugin/7972?pr=androidstudio" target="_blank" rel="external">Android Styler</a></h1><p>根据xml自动生成style代码的插件</p><p><img src="http://plugins.jetbrains.com/files/7972/screenshot_15340.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7972/screenshot_15339.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7972/screenshot_15338.png" alt=""></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage:"></a>Usage:</h2><p>a. copy lines with future style from your layout.xml file<br>b. paste it to styles.xml file with Ctrl+Shift+D (or context menu)<br>c. enter name of new style in the modal window<br>d. your style is prepared!</p><h1 id="13-Android-Drawable-Importer"><a href="#13-Android-Drawable-Importer" class="headerlink" title="13.Android Drawable Importer"></a>13.<a href="http://plugins.jetbrains.com/plugin/7658?pr=androidstudio" target="_blank" rel="external">Android Drawable Importer</a></h1><p>这是一个非常强大的图片导入插件。它导入Android图标与Material图标的Drawable ，批量导入Drawable ，多源导入Drawable（即导入某张图片各种dpi对应的图片）</p><p><img src="http://plugins.jetbrains.com/files/7658/screenshot_15535.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7658/screenshot_15691.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7658/screenshot_15533.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7658/screenshot_15537.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7658/screenshot_15536.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7658/screenshot_15534.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7658/screenshot_15532.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7658/screenshot_15351.png" alt=""></p><h1 id="14-SelectorChapek-for-Android"><a href="#14-SelectorChapek-for-Android" class="headerlink" title="14.SelectorChapek for Android"></a>14.<a href="http://plugins.jetbrains.com/plugin/7298?pr=androidstudio" target="_blank" rel="external">SelectorChapek for Android</a></h1><p>通过资源文件命名自动生成Selector文件。</p><p><img src="http://plugins.jetbrains.com/files/7298/screenshot_14292.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7298/screenshot_14291.png" alt=""><br><img src="http://plugins.jetbrains.com/files/7298/screenshot_14290.png" alt=""></p><h1 id="15-GenerateSerialVersionUID"><a href="#15-GenerateSerialVersionUID" class="headerlink" title="15.GenerateSerialVersionUID"></a>15.<a href="http://plugins.jetbrains.com/plugin/185?pr=androidstudio" target="_blank" rel="external">GenerateSerialVersionUID</a></h1><p>实现Serializable序列化bean</p><p>Adds a new action ‘SerialVersionUID’ in the generate menu (alt + ins). The action adds an serialVersionUID field in the current class or updates it if it already exists, and assigns it the same value the standard ‘serialver’ JDK tool would return. The action is only visible when IDEA is not rebuilding its indexes, the class is serializable and either no serialVersionUID field exists or its value is different from the one the ‘serialver’ tool would return.</p><h1 id="16-genymotion"><a href="#16-genymotion" class="headerlink" title="16.genymotion"></a>16.<a href="http://plugins.jetbrains.com/plugin/7269?pr=androidstudio" target="_blank" rel="external">genymotion</a></h1><p>速度较快的android模拟器</p><p><img src="http://plugins.jetbrains.com/files/7269/screenshot_14278.png" alt=""></p><h1 id="17-LeakCanary"><a href="#17-LeakCanary" class="headerlink" title="17.LeakCanary"></a>17.<a href="https://github.com/square/leakcanary">LeakCanary</a></h1><p>帮助你在开发阶段方便的检测出内存泄露的问题，使用起来更简单方便。<br>可以参考以下文章：<br><a href="http://www.liaohuqiu.net/cn/posts/leak-canary-read-me/" target="_blank" rel="external">LeakCanary 中文使用说明</a></p><p><img src="http://stormzhang.com/image/leakcaneray.png" alt=""></p><h1 id="18-Android-Postfix-Completion"><a href="#18-Android-Postfix-Completion" class="headerlink" title="18.Android Postfix Completion"></a>18.<a href="http://plugins.jetbrains.com/plugin/7775?pr=androidstudio" target="_blank" rel="external">Android Postfix Completion</a></h1><p>可根据后缀快速完成代码，这个属于拓展吧，系统已经有这些功能，如sout、notnull等，这个插件在原有的基础上增添了一些新的功能，我更想做的是通过原作者的代码自己定制功能，那就更爽了</p><p><img src="http://plugins.jetbrains.com/files/7775/screenshot_15042.png" alt=""></p><h1 id="19-Android-Holo-Colors-Generator"><a href="#19-Android-Holo-Colors-Generator" class="headerlink" title="19.Android Holo Colors Generator"></a>19.<a href="https://plugins.jetbrains.com/plugin/7366?pr=" target="_blank" rel="external">Android Holo Colors Generator</a></h1><p>通过自定义Holo主题颜色生成对应的Drawable和布局文件</p><p><img src="https://plugins.jetbrains.com/files/7366/screenshot_14379.png" alt=""></p><h1 id="20-dagger-intellij-plugin"><a href="#20-dagger-intellij-plugin" class="headerlink" title="20.dagger-intellij-plugin"></a>20.<a href="https://github.com/square/dagger-intellij-plugin">dagger-intellij-plugin</a></h1><p>dagger可视化辅助工具</p><p><img src="https://github.com/square/dagger-intellij-plugin/raw/master/images/inject-to-provide.gif" alt=""></p><h1 id="21-GradleDependenciesHelperPlugin"><a href="#21-GradleDependenciesHelperPlugin" class="headerlink" title="21.GradleDependenciesHelperPlugin"></a>21.<a href="https://github.com/ligi/GradleDependenciesHelperPlugin">GradleDependenciesHelperPlugin</a></h1><p>maven gradle 依赖支持自动补全</p><p><img src="https://camo.githubusercontent.com/d9b1b39eda21e0e33b656e2821f01897d915f7c5/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d51364e7970315864594c772f556a73325a5175666634492f414141414141414144624d2f624d704c516742664d6b632f773538372d683330392d6e6f2f696465615f677261646c655f706c7567696e2e706e67" alt=""></p><h1 id="22-RemoveButterKnife"><a href="#22-RemoveButterKnife" class="headerlink" title="22.RemoveButterKnife"></a>22.<a href="https://github.com/u3shadow/RemoveButterKnife">RemoveButterKnife</a></h1><p>ButterKnife这个第三方库每次更新之后，绑定view的注解都会改变，从bind,到inject，再到bindview，搞得很多人都不敢升级，一旦升级，就会有巨量的代码需要手动修改，非常痛苦<br>当我们有一些非常棒的代码需要拿到其他项目使用，但是我们发现，那个项目对第三方库的使用是有限制的，我们不能使用butterknife，这时候，我们又得从注解改回findviewbyid<br>针对上面的两种情况，如果view比较少还好说，如果有几十个view，那么我们一个个的手动删除注解，写findviewbyid语句，简直是一场噩梦（别问我为什么知道这是噩梦）<br>所以，这种有规律又重复简单的工作为什么不能用一个插件来实现呢？于是RemoveButterKnife的想法就出现了。</p><p><a href="http://www.u3coding.com/2016/06/24/androidstudio-plugin-removebutterknife-di/" target="_blank" rel="external">具体介绍</a></p><p><img src="https://camo.githubusercontent.com/0327cda5b531ab6f2b803abe295c42225668d28d/687474703a2f2f7777772e7533636f64696e672e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031362f30362f312e676966" alt=""></p><h1 id="23-AndroidProguardPlugin"><a href="#23-AndroidProguardPlugin" class="headerlink" title="23.AndroidProguardPlugin"></a>23.<a href="https://github.com/zhonghanwen/AndroidProguardPlugin">AndroidProguardPlugin</a></h1><p>一键生成项目混淆代码插件，值得你安装~(不过目前可能有些第三方项目的混淆还未添加完全)</p><p><img src="http://7xrnko.com1.z0.glb.clouddn.com/androidproguard1.gif" alt=""></p><h1 id="24-otto-intellij-plugin"><a href="#24-otto-intellij-plugin" class="headerlink" title="24.otto-intellij-plugin"></a>24.<a href="https://github.com/square/otto-intellij-plugin">otto-intellij-plugin</a></h1><p>otto事件导航工具。</p><p><img src="https://github.com/square/otto-intellij-plugin/raw/master/images/produce-to-subscribe.gif" alt=""><br><img src="https://github.com/square/otto-intellij-plugin/raw/master/images/event-to-subscribe.gif" alt=""></p><h1 id="25-eventbus-intellij-plugin"><a href="#25-eventbus-intellij-plugin" class="headerlink" title="25.eventbus-intellij-plugin"></a>25.<a href="https://github.com/kgmyshin/eventbus-intellij-plugin">eventbus-intellij-plugin</a></h1><p>eventbus导航插件(对于最新版的 EventBus 3.0.0 好像无效,请替换为eventbus3-intellij-plugin此插件地址在本文第51个)</p><p><img src="https://raw.githubusercontent.com/kgmyshin/eventbus-intellij-plugin/master/art/cap.gif" alt=""></p><h1 id="26-idea-markdown"><a href="#26-idea-markdown" class="headerlink" title="26.idea-markdown"></a>26.<a href="https://github.com/nicoulaj/idea-markdown">idea-markdown</a></h1><p>markdown插件</p><p><img src="https://github.com/nicoulaj/idea-markdown/raw/assets/screenshots/preview.png" alt=""></p><h1 id="27-Sexy-Editor"><a href="#27-Sexy-Editor" class="headerlink" title="27.Sexy Editor"></a>27.<a href="https://plugins.jetbrains.com/plugin/1833?pr=androidstudio" target="_blank" rel="external">Sexy Editor</a></h1><p>设置AS代码编辑区的背景图</p><p>首先点击界面的设置按钮 进入设置界面，选中Plugins,右边选择 Browser … ，输入Sexy … 下面自动弹出候选插件，右边点击Install 安装<br><img src="http://d.hiphotos.baidu.com/zhidao/wh%3D600%2C800/sign=f57bdd37f0246b607b5bba72dbc83674/4b90f603738da9777260054fb651f8198618e303.jpg" alt=""><br>安装成功 后需要重启AS<br><img src="http://h.hiphotos.baidu.com/zhidao/wh%3D600%2C800/sign=77e4e517fdf2b211e47b8d48fab04900/1c950a7b02087bf46d0dd48df4d3572c10dfcff5.jpg" alt=""><br>重启完成之后 进入设置界面 选择other Setting 下的Sexy Editor ， 右侧 insert 一张或多张图片即可，上面的其他设置可以设置方位 间隔时间 透明度等等，设置完成后，要关闭打开的文件，重新打开项目文件即可在代码编辑区显示插入的图片，作为代码编辑区的背景图。<br><img src="http://h.hiphotos.baidu.com/zhidao/wh%3D600%2C800/sign=5cd9b28564d9f2d320442ce999dca62b/34fae6cd7b899e51289eb77044a7d933c8950d45.jpg" alt=""></p><h1 id="28-folding-plugin"><a href="#28-folding-plugin" class="headerlink" title="28.folding-plugin"></a>28.<a href="https://github.com/dmytrodanylyk/folding-plugin">folding-plugin</a></h1><p>布局文件分组的插件</p><p><img src="https://github.com/dmytrodanylyk/folding-plugin/raw/master/screenshots/Preview.png" alt=""></p><h1 id="29-Android-DPI-Calculator"><a href="#29-Android-DPI-Calculator" class="headerlink" title="29.Android-DPI-Calculator"></a>29.<a href="https://github.com/JerzyPuchalski/Android-DPI-Calculator">Android-DPI-Calculator</a></h1><p>DPI计算插件</p><p><img src="https://camo.githubusercontent.com/ce3be2aaa3b1f70b90f5b825c529694509d70313/68747470733a2f2f7261772e6769746875622e636f6d2f4a65727a7950756368616c736b692f416e64726f69642d4450492d43616c63756c61746f722f6d61737465722f696d672f6469616c6f672e706e67" alt=""></p><p>使用：<br><img src="https://camo.githubusercontent.com/598d3b5c9efc5f0b57b58c25a79a323d06307fad/68747470733a2f2f7261772e6769746875622e636f6d2f4a65727a7950756368616c736b692f416e64726f69642d4450492d43616c63756c61746f722f6d61737465722f696d672f616374696f6e2e706e67" alt=""><br>或者<br><img src="https://camo.githubusercontent.com/7a8f977de7a1ba6cd23fb64cbd37566690c27cdc/68747470733a2f2f7261772e6769746875622e636f6d2f4a65727a7950756368616c736b692f416e64726f69642d4450492d43616c63756c61746f722f6d61737465722f696d672f6d656e752e706e67" alt=""></p><h1 id="30-gradle-retrolambda"><a href="#30-gradle-retrolambda" class="headerlink" title="30.gradle-retrolambda"></a>30.<a href="https://github.com/evant/gradle-retrolambda">gradle-retrolambda</a></h1><p>在java 6 7中使用 lambda表达式插件</p><p>修改编译的jdk为java8:<br><img src="http://img.blog.csdn.net/20160311101644127" alt=""></p><h1 id="31-Android-Studio-Prettify"><a href="#31-Android-Studio-Prettify" class="headerlink" title="31.Android Studio Prettify"></a>31.<a href="https://plugins.jetbrains.com/plugin/7405" target="_blank" rel="external">Android Studio Prettify</a></h1><p>可以将代码中的字符串写在string.xml文件中</p><p>选中字符串鼠标右键选择图中所示<br><img src="https://plugins.jetbrains.com/files/7405/screenshot_14417.png" alt=""></p><p>这个插件还可以自动书写findViewById<br><img src="https://plugins.jetbrains.com/files/7405/screenshot_14418.png" alt=""></p><p><img src="https://plugins.jetbrains.com/files/7405/screenshot_14416.png" alt=""></p><p><img src="https://plugins.jetbrains.com/files/7405/screenshot_14501.png" alt=""></p><p><img src="https://plugins.jetbrains.com/files/7405/screenshot_14419.png" alt=""></p><p><img src="https://plugins.jetbrains.com/files/7405/screenshot_14415.png" alt=""></p><h1 id="32-Material-Theme-UI"><a href="#32-Material-Theme-UI" class="headerlink" title="32.Material Theme UI"></a>32.<a href="https://plugins.jetbrains.com/plugin/8006?pr=" target="_blank" rel="external">Material Theme UI</a></h1><p>添加Material主题到你的AS</p><p><img src="https://plugins.jetbrains.com/files/8006/screenshot_15722.png" alt=""></p><p><img src="https://plugins.jetbrains.com/files/8006/screenshot_15723.png" alt=""></p><p><img src="https://plugins.jetbrains.com/files/8006/screenshot_15721.png" alt=""></p><h1 id="33-ignore"><a href="#33-ignore" class="headerlink" title="33..ignore"></a>33.<a href="https://plugins.jetbrains.com/plugin/7495?pr=" target="_blank" rel="external">.ignore</a></h1><p>我们都知道在Git 中想要过滤掉一些不想提交的文件，可以把相应的文件添加到.gitignore 中，而.gitignore 这个Android Studio 插件根据不同的语言来选择模板，就不用自己在费事添加一些文件了，而且还有自动补全功能，过滤文件再也不要复制文件名了。我们做项目的时候，并不是所有文件都是要提交的，比如构建的build 文件夹，本地配置文件，每个Module 生成的iml 文件，但是我们每次add，commit 都会不小心把它们添加上去，而gitignore 就是解决这种痛点的，如果你不想提交的文件，就可以在创建项目的时候将这个文件中添加即可，将一些通用的东西屏蔽掉。</p><p><img src="https://plugins.jetbrains.com/files/7495/screenshot_14960.png" alt=""></p><p><img src="https://plugins.jetbrains.com/files/7495/screenshot_14958.png" alt=""></p><p><img src="https://plugins.jetbrains.com/files/7495/screenshot_14959.png" alt=""></p><h1 id="34-CheckStyle-IDEA"><a href="#34-CheckStyle-IDEA" class="headerlink" title="34.CheckStyle-IDEA"></a>34.<a href="https://plugins.jetbrains.com/plugin/1065?pr=" target="_blank" rel="external">CheckStyle-IDEA</a></h1><p>CheckStyle-IDEA 是一个检查代码风格的插件，比如像命名约定，Javadoc，类设计等方面进行代码规范和风格的检查，你们可以遵从像Google Oracle 的Java 代码指南 ，当然也可以按照自己的规则来设置配置文件，从而有效约束你自己更好地遵循代码编写规范。</p><h1 id="35-Markdown-Navigator"><a href="#35-Markdown-Navigator" class="headerlink" title="35.Markdown Navigator"></a>35.<a href="https://plugins.jetbrains.com/plugin/7896?pr=" target="_blank" rel="external">Markdown Navigator</a></h1><p>github:<a href="https://github.com/vsch/idea-multimarkdown/wiki">Markdown Navigator</a><br>Markdown插件</p><p><img src="https://plugins.jetbrains.com/files/7896/screenshot_15818.png" alt=""></p><h1 id="36-ECTranslation"><a href="#36-ECTranslation" class="headerlink" title="36.ECTranslation"></a>36.<a href="https://github.com/Skykai521/ECTranslation">ECTranslation</a></h1><p>Android Studio Plugin,Translate English to Chinese. Android Studio 翻译插件,可以将英文翻译为中文。</p><p><img src="https://github.com/Skykai521/ECTranslation/raw/master/img/translation_img.png" alt=""></p><h1 id="37-PermissionsDispatcher-plugin"><a href="#37-PermissionsDispatcher-plugin" class="headerlink" title="37.PermissionsDispatcher plugin"></a>37.<a href="https://plugins.jetbrains.com/plugin/8349" target="_blank" rel="external">PermissionsDispatcher plugin</a></h1><p>github:<a href="https://github.com/shiraji/permissions-dispatcher-plugin">PermissionsDispatcher plugin</a><br>自动生成6.0权限的代码</p><p><img src="https://github.com/shiraji/permissions-dispatcher-plugin/raw/master/website/images/pd.gif" alt=""></p><h1 id="38-WakaTime"><a href="#38-WakaTime" class="headerlink" title="38.WakaTime"></a>38.<a href="https://plugins.jetbrains.com/plugin/7425?pr=" target="_blank" rel="external">WakaTime</a></h1><p>github:<a href="https://github.com/wakatime/jetbrains-wakatime">WakaTime</a><br>记录你在IDE上的工作时间</p><p><img src="https://plugins.jetbrains.com/files/7425/screenshot_14794.png" alt=""></p><h1 id="39-AndroidWiFiADB"><a href="#39-AndroidWiFiADB" class="headerlink" title="39.AndroidWiFiADB"></a>39.<a href="https://github.com/pedrovgs/AndroidWiFiADB">AndroidWiFiADB</a></h1><p>无线调试应用</p><p><img src="https://github.com/pedrovgs/AndroidWiFiADB/raw/master/art/screenshot1.gif" alt=""></p><p><img src="https://github.com/pedrovgs/AndroidWiFiADB/raw/master/art/android_devices_window.png" alt=""></p><h1 id="40-AndroidLocalizationer"><a href="#40-AndroidLocalizationer" class="headerlink" title="40.AndroidLocalizationer"></a>40.<a href="https://github.com/westlinkin/AndroidLocalizationer">AndroidLocalizationer</a></h1><p>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件</p><p><img src="https://raw.githubusercontent.com/westlinkin/AndroidLocalizationer/master/screen_shot_3.png" alt=""></p><p><img src="https://raw.githubusercontent.com/westlinkin/AndroidLocalizationer/master/screen_shot_2.png" alt=""></p><h1 id="41-TranslationPlugin"><a href="#41-TranslationPlugin" class="headerlink" title="41.TranslationPlugin"></a>41.<a href="https://github.com/YiiGuxing/TranslationPlugin">TranslationPlugin</a></h1><p>又一翻译插件,可中英互译。</p><p><img src="https://raw.githubusercontent.com/YiiGuxing/TranslationPlugin/master/images/1.png" alt=""></p><p><img src="https://raw.githubusercontent.com/YiiGuxing/TranslationPlugin/master/images/3.png" alt=""></p><h1 id="42-SingletonTest"><a href="#42-SingletonTest" class="headerlink" title="42.SingletonTest"></a>42.<a href="https://github.com/luhaoaimama1/SingletonTest">SingletonTest</a></h1><p>快速生成单例模式的预设</p><p><img src="https://github.com/luhaoaimama1/SingletonTest/raw/master/demo/tip1.png" alt=""></p><p><img src="https://github.com/luhaoaimama1/SingletonTest/raw/master/demo/tip2.png" alt=""></p><p><img src="https://github.com/luhaoaimama1/SingletonTest/raw/master/demo/tip3.png" alt=""></p><h1 id="43-BorePlugin"><a href="#43-BorePlugin" class="headerlink" title="43.BorePlugin"></a>43.<a href="https://github.com/boredream/BorePlugin">BorePlugin</a></h1><p>Android Studio 自动生成布局代码插件</p><p><img src="https://github.com/boredream/BorePlugin/raw/master/screenshot/LayoutCreator.gif" alt=""></p><h2 id="代码生成规则"><a href="#代码生成规则" class="headerlink" title="代码生成规则"></a>代码生成规则</h2><p>a.自动遍历目标布局中所有带id的文件, 无id的不会识别处理<br>b.控件生成的变量名默认为id名称, 可以在弹出确认框右侧的名称输入栏中自行修改<br>c.所有的Button或者带clickable=true的控件, 都会自动在代码中生成setOnClickListener相关代码<br>d.所有EditText控件, 都会在代码中生成非空判断代码, 如果为空会提示EditText的hint内容, 如果hint为空则提示xxx字符串不能为空字样, 最后会把所有输入框的验证合并到一个submit方法中<br>e.会自动识别布局中的include标签, 并读取对应布局中的控件</p><h1 id="44-jimu-Mirror"><a href="#44-jimu-Mirror" class="headerlink" title="44.jimu Mirror"></a>44.<a href="http://www.jimumirror.com/mirror-downloads/" target="_blank" rel="external">jimu Mirror</a></h1><p>能够实时预览Android布局，它会监听布局文件的改动，如果有代码变化，就会立即刷新UI。</p><h1 id="45-jRebel-For-Android"><a href="#45-jRebel-For-Android" class="headerlink" title="45.jRebel For Android"></a>45.<a href="http://zeroturnaround.com/software/jrebel-for-android/" target="_blank" rel="external">jRebel For Android</a></h1><p>不仅能够做到UI布局的实时预览，它甚至做到了让你更改java代码后就能实时替换apk中的类文件，达到应用实时刷新，官网的介绍是：Skip build, install and run，因此它可以节约我们很多很多的时间，它的效果也十分不错。</p><p><img src="http://zeroturnaround.com/wp-content/uploads/2015/04/Android_Card1_2x.png" alt=""></p><p><img src="http://zeroturnaround.com/wp-content/uploads/2015/04/Android_Card2_2x.png" alt=""></p><p><img src="http://zeroturnaround.com/wp-content/uploads/2015/04/Android_Card3_2x.png" alt=""></p><h1 id="46-sdk-manager-plugin"><a href="#46-sdk-manager-plugin" class="headerlink" title="46.sdk-manager-plugin"></a>46.<a href="https://github.com/JakeWharton/sdk-manager-plugin">sdk-manager-plugin</a></h1><p>SDK管理插件，自动检测更新并下载。(图片与插件无关哈)</p><p><img src="https://camo.githubusercontent.com/95469d65798f62a50a9fcabe21e2cc303a1b859c/687474703a2f2f692e696d6775722e636f6d2f384a734a587a6e2e6a7067" alt=""></p><h1 id="47-Codota"><a href="#47-Codota" class="headerlink" title="47.Codota"></a>47.<a href="http://www.codota.com/" target="_blank" rel="external">Codota</a></h1><p>搜索最好的Android代码。(Studio里面直接可以搜到此插件)</p><h1 id="48-LayoutFormatter"><a href="#48-LayoutFormatter" class="headerlink" title="48.LayoutFormatter"></a>48.<a href="https://github.com/drakeet/LayoutFormatter">LayoutFormatter</a></h1><p>drakeet 开发一个一键格式化你的 XML 文件的 Android Studio 插件，至于为什么不用 Android Studio 自带的格式化功能而用这个插件，可以看下作者的一篇 Blog -&gt; <a href="https://drakeet.me/layoutformatter" target="_blank" rel="external">当我们谈 XML 布局文件代码的优雅性</a></p><p><img src="http://ww1.sinaimg.cn/large/86e2ff85gw1f383wa95tej21ge0m5ai0.jpg" alt=""></p><h1 id="49-android-strings-search-plugin"><a href="#49-android-strings-search-plugin" class="headerlink" title="49.android-strings-search-plugin"></a>49.<a href="https://github.com/konifar/android-strings-search-plugin">android-strings-search-plugin</a></h1><p>一个可以通过输入文字找到strings.xml资源的插件</p><p><img src="https://github.com/konifar/android-strings-search-plugin/raw/master/art/demo.gif" alt=""></p><h1 id="50-ideaVim"><a href="#50-ideaVim" class="headerlink" title="50.ideaVim"></a>50.<a href="http://plugins.jetbrains.com/plugin/164?pr=androidstudio" target="_blank" rel="external">ideaVim</a></h1><p>vim 本身就是一款很优秀的文本编辑器，而Android Studio 更是一款编写APP应用的神器。如果两个款优秀的软件结合在一起感觉会怎样呢？<br>详细请看文章:<a href="http://www.jianshu.com/p/43862126b88f" target="_blank" rel="external">Android Studio ＋Vim</a></p><p><img src="http://upload-images.jianshu.io/upload_images/1825722-8b55d9654777599e.gif?imageMogr2/auto-orient/strip" alt=""></p><h1 id="51-eventbus3-intellij-plugin"><a href="#51-eventbus3-intellij-plugin" class="headerlink" title="51.eventbus3-intellij-plugin"></a>51.<a href="https://github.com/likfe/eventbus3-intellij-plugin/blob/master/README-zh.md">eventbus3-intellij-plugin</a></h1><p>引导 EventBus 的 post 和 event(对于最新版的 EventBus 3.0.0 有效)<br>主要Bug修复工作：<br>修改包名和方法名以适应 EventBus 3.X<br>替换一个在新版的 intellij plugin SDK 已经不存在的类<br>增加若干 try-catch ，防止插件崩溃</p><p><img src="https://raw.githubusercontent.com/likfe/eventbus3-intellij-plugin/master/art/cap.gif" alt=""></p><h1 id="52-Exynap"><a href="#52-Exynap" class="headerlink" title="52.Exynap"></a>52.<a href="http://exynap.com/" target="_blank" rel="external">Exynap</a></h1><p>Exynap 一个帮助开发者自动生成样板代码的 AndroidStudio 插件</p><p><img src="http://exynap.com/images/anim01.gif" alt=""></p><h1 id="53-gradle-cleaner-intellij-plugin"><a href="#53-gradle-cleaner-intellij-plugin" class="headerlink" title="53.gradle-cleaner-intellij-plugin"></a>53.<a href="https://github.com/Softwee/gradle-cleaner-intellij-plugin">gradle-cleaner-intellij-plugin</a></h1><p>Force clear delaying &amp; no longer needed Gradle tasks.</p><p><img src="https://camo.githubusercontent.com/cb48bca7f8bd0b513f350f7320c74054d1b9fbce/687474703a2f2f6936352e74696e797069632e636f6d2f726a687863382e706e67" alt=""></p><h1 id="54-MVPHelper"><a href="#54-MVPHelper" class="headerlink" title="54.MVPHelper"></a>54.<a href="http://androidwing.net/index.php/27" target="_blank" rel="external">MVPHelper</a></h1><p>一款Intellj IDEA 和Android Studio的插件，可以为MVP生成接口以及实现类，解放双手。<br>具体请查看<a href="http://androidwing.net/index.php/27" target="_blank" rel="external">Android Studio插件之MVPHelper，一键生成MVP代码</a>一文</p><p><img src="https://github.com/githubwing/MVPHelper/raw/master/img/mvp_presenter.gif" alt=""></p><p>如果还有更好玩更好用的插件欢迎fork + pull request</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/itgoyo/Android-Studio-Plugins.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#1.&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="学习资料" scheme="https://github.com/itgoyo/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android进阶资料大全</title>
    <link href="https://github.com/itgoyo/2017/07/22/Android%E8%BF%9B%E9%98%B6%E8%B5%84%E6%96%99%E5%A4%A7%E5%85%A8.html"/>
    <id>https://github.com/itgoyo/2017/07/22/Android进阶资料大全.html</id>
    <published>2017-07-22T09:29:25.000Z</published>
    <updated>2017-11-23T13:04:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#书籍">书籍</a></li><li><a href="#开发环境工具">开发环境/工具</a></li><li><a href="#博客">博客</a></li><li><a href="#社区">社区</a></li><li><a href="#开源项目学习">开源项目学习</a></li><li><a href="#android-开发者杂志周刊">Android 开发者杂志周刊</a></li><li><a href="#awesome-系列">Awesome 系列</a></li><li><a href="#动画系列">动画系列</a></li><li><a href="#material-design-设计">Material Design 设计</a></li><li><a href="#素材">素材</a></li><li><a href="#开源库收集">开源库收集</a></li><li><a href="#设计模式">设计模式</a></li><li><a href="#实践篇">实践篇</a></li><li><a href="#git-教程">Git 教程</a></li><li><a href="#文档">文档</a></li><li><a href="#其它资料收集">其它资料收集</a></li><li><a href="#知乎上的讨论">知乎上的讨论</a></li><li><a href="#贡献者">贡献者</a></li><li><a href="#license">License</a></li></ul><p>=============================================================</p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><table><thead><tr><th>书籍名称</th><th>推荐理由</th></tr></thead><tbody><tr><td><a href="http://www.amazon.cn/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3-%E5%9F%83%E5%8F%B2%E5%B0%94/dp/B0011F7WU4/ref=sr_1_1?ie=UTF8&amp;qid=1428138267&amp;sr=8-1&amp;keywords=java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3" target="_blank" rel="external">Thinking In Java 中文版</a></td><td>学习 Android 开发, 首先需要 Java 基础, 这里推荐 Thinking In Java, Thinking In Java 是 Java 的经典书籍, 是学习 Java 语言必备书籍</td></tr><tr><td><a href="http://www.amazon.cn/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81-Android-%E9%83%AD%E9%9C%96/dp/B00LVHTI9U/ref=sr_1_1?ie=UTF8&amp;qid=1428138432&amp;sr=8-1&amp;keywords=%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E2%80%94%E2%80%94android+%E9%83%AD%E9%9C%96" target="_blank" rel="external">第一行代码</a></td><td>郭霖大神的杰作, 郭神在CSDN中的博客文章非常不错, 书我看了, 非常适合新手, 里面的内容非常棒, 建议结合郭神博客文章一起来学习</td></tr><tr><td><a href="http://item.jd.com/11689014.html" target="_blank" rel="external">疯狂Android讲义第三版</a></td><td>作者是李刚, 这本书是基于 Android 5.0 来讲的, 我看过第二版, 这本书给我第一感觉就是很厚, 但里面内容写的还是很详细的, 代码很多, 可以跟着代码一步步敲</td></tr><tr><td><a href="http://www.amazon.cn/Android%E7%BE%A4%E8%8B%B1%E4%BC%A0-%E5%BE%90%E5%AE%9C%E7%94%9F/dp/B01481RAA4/ref=sr_1_1?m=A1AJ19PSB66TGU&amp;s=books&amp;ie=UTF8&amp;qid=1442198757&amp;sr=1-1&amp;keywords=android%E7%BE%A4%E8%8B%B1%E4%BC%A0" target="_blank" rel="external">Android群英传</a></td><td>本书作者 @Tomcat 的猫, 曾就职于上海 TCL 通讯, 从事 Alcatel(阿尔卡特) Android 手机系统的定制工作, 活跃于 CSDN, 目前就职于上海沪江网 Android 开发部RD项目组, 负责沪江 App 的功能预研</td></tr><tr><td><a href="http://product.china-pub.com/4806147" target="_blank" rel="external">Android开发艺术探索</a></td><td>由@任玉刚Coder所著, 是一本 Android 进阶类书籍, 采用理论, 源码和实践相结合的方式来阐述高水准的 Android 应用开发要点. 本书从三个方面来组织内容: 第一, 介绍 Android 开发者不容易掌握的一些知识点: 第二,结合Android源代码和应用层开发过程, 融会贯通, 介绍一些比较深入的知识点: 第三, 介绍一些核心技术和Android的性能优化思想.</td></tr><tr><td><a href="http://book.douban.com/subject/26649050/" target="_blank" rel="external">App 研发录</a></td><td>本书作者是包建强, 本书是作者多年 App 开发的经验总结, 从 App 架构的角度, 重点总结了 Android 应用开发中常见的实用技巧和疑难问题解决方法, 为打造高质量 App 提供有价值的实践指导, 迅速提升应用开发能力和解决疑难问题的能力. 这本书非常有利于 Android 开发者进阶.</td></tr><tr><td><a href="http://book.douban.com/subject/26644935/" target="_blank" rel="external">Android 设计模式源码分析</a></td><td>本书作者是开发技术前线创立者之一 Mr.Simple, 该书从 Android 源码的角度由浅入深地剖析设计模式的运用, 让工程师们把设计与模式重视起来, 提升自己的设计能力与代码质量</td></tr></tbody></table><h2 id="开发环境-工具"><a href="#开发环境-工具" class="headerlink" title="开发环境/工具"></a>开发环境/工具</h2><p>(附上: 由 <a href="http://weibo.com/234959219" target="_blank" rel="external">@脉脉不得语</a> 收集维护超多开发工具下载地址 <a href="https://github.com/inferjay/AndroidDevTools">AndroidDevTools</a>, 后五个工具资料在 <a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a> 博客中找到的,<a href="http://stormzhang.com/android/2015/05/26/android-tools/" target="_blank" rel="external">地址</a>)</p><table><thead><tr><th>环境/工具</th><th>简述</th></tr></thead><tbody><tr><td><a href="http://developer.android.com/sdk/index.html" target="_blank" rel="external">Android Studio</a></td><td>这个开发工具上手需要一定的时间, 自从 Google 推出1.0正式版, 这个工具一直火爆, 目前 github 上面的绝大多数开源项目都是使用 Android Studio 工具, 这就是 Android 开发工具的未来, 所以极力推荐 Android 开发人员使用这个工具, 该工具已更新到 2.0 预览版, 性能逐渐稳定提高, 没有之前那么卡了</td></tr><tr><td><a href="https://www.genymotion.com/#!/download" target="_blank" rel="external">Genymotion</a></td><td>强大好用高性能的 Android 模拟器, 自带的那个模拟器简直不忍直视, 启动超慢的, 跟这个没法比, 无论你是用 Eclipse 还是 Android Studio 里面都有 Genymotion 插件</td></tr><tr><td><a href="https://github.com/skylot/jadx">jadx</a></td><td>一个 Android 反编译神器, 不同于常见的 <a href="https://github.com/pxb1988/dex2jar">dex2jar</a>, 这个反编译器生成代码的 try/catch 次数更少, View也不再是数字 id 了, 可读性更高</td></tr><tr><td><a href="https://github.com/importre/android-selector-intellij-plugin">android-selector</a></td><td>可以根据指定颜色生成 Selector Drawable 的插件</td></tr><tr><td><a href="https://github.com/ligi/GradleDependenciesHelperPlugin">GradleDependenciesHelperPlugin</a></td><td>Gradle 依赖自动补全插件</td></tr><tr><td><a href="http://blog.avlyun.com/show/%E3%80%8Asv%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97%E3%80%8B/" target="_blank" rel="external">Smali Viewer</a></td><td>sv 是一款免费 APK 分析软件, 对你感兴趣的 APP 分析看看它们都用了些什么, 对你学习借鉴有一定帮助</td></tr><tr><td><a href="https://github.com/dmytrodanylyk/folding-plugin">folding-plugin</a></td><td>layout 文件夹里的布局文件一般很长很长没有目录, 这个插件就可以把 layout 分好层级结构, 类似 src 下目录结构</td></tr><tr><td><a href="https://github.com/Vektah/CodeGlance">CodeGlance</a></td><td>在编辑代码最右侧, 显示一块代码小地图</td></tr><tr><td><a href="https://plugins.jetbrains.com/plugin/?idea&amp;id=4509" target="_blank" rel="external">Statistic</a></td><td>统计整个项目行数的插件, 这可表示我们日日夜夜辛辛苦苦必备插件</td></tr><tr><td><a href="https://github.com/nicoulaj/idea-markdown">idea-markdown</a></td><td>在 AS 中编写 Markdown 文件, 可以直接预览网页显示效果, 对于你经常编写 Markdown 文件的你值得拥有这个插件</td></tr><tr><td><a href="http://facebook.github.io/stetho/" target="_blank" rel="external">Stetho</a></td><td>Stetho 是 Facebook 出品的一个强大的 Android 调试工具,使用该工具你可以在 Chrome Developer Tools 查看 App 的布局, 网络请求(仅限使用 Volley, okhttp 的网络请求库), sqlite, preference, 一切都是可视化的操作,无须自己在去使用 adb, 也不需要 root 你的设备</td></tr><tr><td><a href="https://github.com/google/android-classyshark">ClassyShark</a></td><td>ClassyShark 是 Google 发布的一款可以查看 Android 可执行文件的浏览工具, 支持.dex, .aar, .so, .apk, .jar, .class, .xml 等文件格式, 分析里面的内容包括 classes.dex 文件, 包方法数量, 类, 字符串, 使用的 NativeLibrary 等</td></tr><tr><td><a href="https://github.com/pedrovgs/AndroidWiFiADB">AndroidWiFiADB</a></td><td>使用 WiFi 连接而不需要 USB 连接 Android 设备达到安装, 运行, 调试应用的目的</td></tr><tr><td><a href="https://github.com/jshiell/checkstyle-idea">checkstyle-idea</a></td><td>Checkstyle-idea 是一款检查自己写的代码是否符合规范的插件, 该插件是根据 checkstyle.xml 文件来检查的, checkstyle.xml 文件可以由自己自己定义, 也可以使用一些大公司定义的规范, 如果不懂得如何定义, 可以查看 <a href="http://checkstyle.sourceforge.net/checks.html" target="_blank" rel="external">官方文档</a>, 该插件的详细介绍以及使用, 可以看一下咕咚大侠写的 <a href="http://gudong.name/2016/04/07/checkstyle.html" target="_blank" rel="external">文章</a></td></tr><tr><td><a href="https://github.com/Skykai521/ECTranslation">ECTranslation</a></td><td>ECTranslation 是 Android Studio 开发工具的一个翻译插件, 可以将英文翻译为中文, 英语基础差的童鞋装上它就可以轻松阅读 Android 源码啦</td></tr><tr><td><a href="https://plugins.jetbrains.com/plugin/8076?pr=androidstudio" target="_blank" rel="external">Android Methods Count</a></td><td>统计 Android 依赖库中方法的总个数, 避免应用方法数超过 65K 问题</td></tr><tr><td><a href="https://github.com/westlinkin/AndroidLocalizationer">AndroidLocalizationer</a></td><td>可用于将项目中的 string 资源自动翻译为其他语言的插件, 其翻译支持使用 Microsoft Translator 或 Google Translation</td></tr><tr><td><a href="https://github.com/avast/android-butterknife-zelezny">ButterKnife Zelezny</a></td><td>ButterKnife 生成器, 使用起来非常简单方便, 为你简写了很多 findViewId 代码, 如果你不了解 ButterKnife 的可以到<a href="http://stormzhang.com/openandroid/android/2014/01/12/android-butterknife/" target="_blank" rel="external">这里</a>看看</td></tr><tr><td><a href="https://github.com/inmite/android-selector-chapek">SelectorChapek</a></td><td>设计师给我们提供好了各种资源, 每个按钮都要写一个selector是不是很麻烦? 这么这个插件就为解决这个问题而生, 你只需要做的是告诉设计师们按照规范命名就好了, 其他一键搞定</td></tr><tr><td><a href="https://github.com/zzz40500/GsonFormat">GsonFormat</a></td><td>现在大多数服务端 api 都以 json 数据格式返回, 而客户端需要根据 api 接口生成相应的实体类, 这个插件把这个过程自动化了, 赶紧使用起来吧</td></tr><tr><td><a href="https://github.com/mcharmas/android-parcelable-intellij-plugin">ParcelableGenerator</a></td><td>Android中的序列化有两种方式, 分别是实现 Serializable 接口和 Parcelable 接口, 但在 Android 中是推荐使用 Parcelable, 只不过我们这种方式要比Serializable方式要繁琐, 那么有了这个插件一切就ok了</td></tr><tr><td><a href="https://github.com/square/leakcanary">LeakCanary</a></td><td>良心企业 Square 最近刚开源的一个非常有用的工具, 强烈推荐, 帮助你在开发阶段方便的检测出内存泄露的问题, 使用起来更简单方便, 而且我们团队第一时间使用帮助我们发现了不少问题, 英文不好的这里有雷锋同志翻译的中文版 <a href="http://www.liaohuqiu.net/cn/posts/leak-canary-read-me/" target="_blank" rel="external">LeakCanary 中文使用说明</a></td></tr><tr><td><a href="https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/" target="_blank" rel="external">更多</a></td><td>该作者收集整理了 40 个插件, 可以说是史上最全的了</td></tr></tbody></table><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><table><thead><tr><th>博客地址</th><th>博主信息</th></tr></thead><tbody><tr><td><a href="http://android-developers.blogspot.com/" target="_blank" rel="external">Android Developers Blog</a></td><td>Android官网博客, 在上面可以关注 Android 最新的进展与最权威的博客(需翻墙)</td></tr><tr><td><a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a></td><td>博主是上海薄荷科技开发主管, 他的博客分享了他从编程白痴到自学 Android 一路走过的经验, 写了一篇 <a href="http://stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路</a> 帮助了无数人, 里面还有很多好的文章非常适合新手入门, 并且是微信公众号「AndroidDeveloper」的运营者, 可以算是 Android 界最有影响力的公众号之一了, 强烈推荐关注</td></tr><tr><td><a href="http://hukai.me/" target="_blank" rel="external">胡凯</a></td><td>目前就职于腾讯上海从事 Android 开发的工作, 发起 Google Android 官方培训课程中文版翻译, 这课程是学习 Android 应用开发的绝佳资料</td></tr><tr><td><a href="http://www.trinea.cn/" target="_blank" rel="external">Trinea</a></td><td>目前在滴滴负责 Android 客户端技术, 他是开源库项目收集达人, 你想要的开源库<a href="https://github.com/Trinea">上面</a>都有, 并且发起 Android 开源项目源码解析, 在使用开源库的同时也可以知道其中原理, 大家可以去关注一下, <a href="http://p.codekk.com" target="_blank" rel="external">地址</a></td></tr><tr><td><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖</a></td><td>博主郭霖是大神, 人人都称”郭神”, 是第一行代码的作者, 博主在 CSDN 上所写的文章都非常值得学习</td></tr><tr><td><a href="http://blog.daimajia.com/" target="_blank" rel="external">代码家</a></td><td>90后 Android 大神, 称作库达人, 博主收集了很多 Android 开源库, 博主自己也做了很多开源库, 非常值得学习</td></tr><tr><td><a href="http://www.lightskystreet.com/" target="_blank" rel="external">light_sky</a></td><td>Android 开发工程师, 目前在北京工作. Google big fan, 热爱开源, 热爱分享, 活跃于 GitHub, G+, Twitter, 捕捉Android最新资讯和技术, ViewPagerIndicator 开源项目分析者</td></tr><tr><td><a href="http://blog.csdn.net/lmj623565791/" target="_blank" rel="external">张鸿洋</a></td><td>张鴻洋是 CSDN 博客专家, 博主在 CSDN 所发布的每一篇文章都是干货, 都很值得大家去学习</td></tr><tr><td><a href="http://blog.csdn.net/xyz_lmn" target="_blank" rel="external">张兴业</a></td><td>张兴业同样也是 CSDN 博客专家, 博主专注移动互联网开发, 关注移动支付业务</td></tr><tr><td><a href="http://blog.csdn.net/lzyzsd/" target="_blank" rel="external">hi大头鬼hi</a></td><td>hi大头鬼hi 是阿里巴巴集团的一名 Android 工程师, 擅长 Android, RxJava, RxAndroid, ReactNative, Node.js, 大前端, 可谓是全栈工程师, 如果你对 RxJava 技术感兴趣, 不妨到他的博客看看, 他写了一系列有关 RxJava 的介绍</td></tr><tr><td><a href="https://github.com/android-cn/android-dev-cn">更多</a></td><td>这里面收集了很多国内外开发者的信息, 大家可以去看看</td></tr></tbody></table><h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://stackoverflow.com/" target="_blank" rel="external">StackOverFlow</a></td><td>IT 界的问答社区, 你开发当中所遇到的问题基本上都能在这里能寻找到你想要的答案</td></tr><tr><td><a href="https://segmentfault.com/t/android" target="_blank" rel="external">SegmentFault</a></td><td>SegmentFault 是一个专注于解决编程问题, 提高开发技能的社区</td></tr><tr><td><a href="http://blog.csdn.net/mobile/newest.html" target="_blank" rel="external">CSDN</a></td><td>CSDN 是全球最大中文IT技术社区</td></tr><tr><td><a href="http://gold.xitu.io/explore/android" target="_blank" rel="external">稀土掘金</a></td><td>高质量的技术分享社区</td></tr><tr><td><a href="http://chinagdg.org/" target="_blank" rel="external">谷歌开发者社区(GDG)</a></td><td>GDG 是 Google Developer Groups 的缩写, 中文名称是谷歌开发者社区</td></tr></tbody></table><h2 id="开源项目学习"><a href="#开源项目学习" class="headerlink" title="开源项目学习"></a>开源项目学习</h2><table><thead><tr><th>项目名称</th><th>项目简介</th></tr></thead><tbody><tr><td><a href="https://github.com/google/iosched">Google I/O 2014</a></td><td>Google I/O Android App 使用了当时最新推出的 Material Design 设计</td></tr><tr><td><a href="https://github.com/googlesamples/android-UniversalMusicPlayer">Google play music</a></td><td>一个跨多个平台音乐播放器</td></tr><tr><td><a href="https://github.com/google/santa-tracker-android?utm_source=www.race604.com">Google Santa Tracker for Android</a></td><td>Google 开源的一个儿童教育和娱乐的 App</td></tr><tr><td><a href="https://github.com/pockethub/PocketHub">github客户端</a></td><td>开源者 github 团队, 支持项目的 lssues 和 Gists 并集成了新闻 feed 以便及时获取来自组织好友和资料库的更新信息, 还提供了一个用于快速访问你创建,监控以及发布 issue 面板, 可查看并将问题加到收藏夹</td></tr><tr><td><a href="https://github.com/klinker24/Talon-for-Twitter">Talon-for-Twitter</a></td><td>一个完整版 Twitter 第三方客户端, 属于顶级水平, 而且在源代码 100% 开源, 学习资源让你取之不尽</td></tr><tr><td><a href="https://github.com/daimajia/AnimeTaste">Anime Taste</a></td><td>开发者是代码家为 AnimeTaste 全球动画精选开发的 Android 客户端, 国内很少见的精彩而且开源的 APP, 获得豌豆荚110期设计奖</td></tr><tr><td><a href="https://github.com/daimajia/EverMemo">EverMemo</a></td><td>开发者是代码家, EverMemo 是一款让你快速记录与分享灵感的随身便签, 极简的界面与卡片式布局, 让你记录与查找便签更有效率</td></tr><tr><td><a href="https://github.com/stormzhang/9GAG">9GAG</a></td><td>开发者是 stormzhang 博主,这个开源项目教你使用 Studio, Gradle 以及一些流行的开源库快速开发一个不错的 Android 客户端</td></tr><tr><td><a href="https://github.com/MiCode/Notes">MIUI 便签</a></td><td>MiCode 便签是小米便签的社区开源版, 由 MIUI 团队（ww.miui.com）发起并贡献第一批代码, 遵循 NOTICE 文件所描述的开源协议</td></tr><tr><td><a href="https://github.com/drakeet/Seashell-app">贝壳单词</a></td><td>开发者是许晓峰(Drakeet), 获得豌豆荚设计奖, 这个是初期版本, 新版没有开源, 但是在博主的博客当中将一些新版的内容都剥离出来写成了文章,可以去学习一下</td></tr><tr><td><a href="https://github.com/romannurik/muzei">Muzei Live Wallpaper</a></td><td>开发者是 Ian Lake , 就职于 Google, 这款是定时更换桌面精美壁纸 App</td></tr><tr><td><a href="https://github.com/qii/weiciyuan">四次元-新浪微博客户端</a></td><td>一个仿新浪微博客户端 App, 基本都含有新浪微博的功能, 开源团队写了一份 wiki 文档, 可以去学习一下该 App 是如何实现的</td></tr><tr><td><a href="https://github.com/bxbxbai/ZhuanLan">知乎专栏</a></td><td>开发者是白瓦力, 项目结构清晰, 代码分包合理, 很棒. 很适合新手去学习如何搭建一个 App 结构, 熟悉开发一个完整 App 的流程</td></tr><tr><td><a href="https://github.com/eoecn/android-app">eoe 客户端</a></td><td>eoe 社区Android客户端</td></tr><tr><td><a href="http://git.oschina.net/oschina/android-app" target="_blank" rel="external">oschina</a></td><td>开源中国社区 Android 客户端, 此开源的是 v1 版本, v2 版本将在 2015 年年中开源</td></tr><tr><td><a href="https://github.com/kyze8439690/v2ex-daily-android">v2ex</a></td><td>开发者是<a href="http://yanghui.name/about/" target="_blank" rel="external">杨辉</a>, 这个是 v2ex Android 第三方客户端</td></tr><tr><td><a href="https://github.com/chrislacy/TweetLanes">Tweet Lanes</a></td><td>功能比较完整的 Twitter 客户端</td></tr><tr><td><a href="https://github.com/mvarnagiris/financius-public">Financius</a></td><td>一款简单易用个人理财 Android 程序</td></tr><tr><td><a href="https://coding.net/u/coding/p/Coding-Android/git" target="_blank" rel="external">Coding</a></td><td>Coding 类似于 github 一个代码托管平台, 这个是 Coding 的 Android 版客户端</td></tr><tr><td><a href="https://github.com/zxing/zxing">ZXing</a></td><td>二维码扫描工具,市场上许多应用的二维码扫描工具都是从这个修改得到的</td></tr><tr><td><a href="https://github.com/chrisbanes/photup">photup</a></td><td>编辑机批量上传照片到 facebook 上,代码分包合理,很棒,不过这个项目依赖的开源项目比较多, 比较难编译</td></tr><tr><td><a href="https://github.com/ginatrapani/todo.txt-android">todo.txt-android</a></td><td>todo.txt 官方 Android 应用, 一个极简的将待办事件记录在 .txt 文件中</td></tr><tr><td><a href="https://github.com/JayFang1993/ScanBook">扫扫图书</a></td><td>一个让你懂得如何去选择一本书的 APP, 具有扫描搜索查询图书的信息功能</td></tr><tr><td><a href="https://github.com/tvbarthel/ChaseWhisplyProject">ChaseWhisplyProject</a></td><td>开启摄像头在你所在位置寻找鬼魂, 进行打鬼游戏</td></tr><tr><td><a href="https://github.com/AntennaPod/AntennaPod">AntennaPod</a></td><td>AntennaPod 是一个自由, 开源的播客客户端, 支持 Atom 和 RSS Feed</td></tr><tr><td><a href="https://github.com/openproject/AndroidDigest">干柴</a></td><td>开发者是冯建, 一个专注收集 android 相关干货(文摘,名博,github等等)资源 App</td></tr><tr><td><a href="https://github.com/manmal/hn-android">Hacker News</a></td><td>一个查看黑客新闻报道和评论的 App</td></tr><tr><td><a href="https://github.com/madeye/proxydroid">proxydroid</a></td><td>ProxyDroid 是一个帮助你在你的 Android 设备上设置代理 (HTTP / SOCKS4 / SOCKS5)</td></tr><tr><td><a href="https://git.oschina.net/way/AliGesture" target="_blank" rel="external">AliGesture</a></td><td>Android平台手势识别应用, 简单的手势就可以进入预置的应用, 方便快捷</td></tr><tr><td><a href="https://coding.net/u/youzi/p/Zhidu-Android/git/tree/master" target="_blank" rel="external">指读</a></td><td>指读顾名思义就是用手指去阅读浩瀚的书海</td></tr><tr><td><a href="https://github.com/KJFrame/KJMusic">KJ 音乐</a></td><td>开发者是<a href="http://blog.kymjs.com/about/" target="_blank" rel="external">张涛</a>, 快捷音乐使用到<a href="https://github.com/kymjs/KJFrameForAndroid">KJFrameForAndroid</a>开发框架, 拥有界面绚丽, 操作简单, 播放手机本地音乐, 在线收听音乐等功能, 还支持: 新浪微博, 百度账号, QQ 账号的一键登录</td></tr><tr><td><a href="http://git.oschina.net/tonlin/android-app" target="_blank" rel="external">哎嘛</a></td><td>OSCHINA 第三方客户端, 这个版本界面比官方版本界面好看多了, 使用的是 Material Design, 界面看上去非常清爽舒服</td></tr><tr><td><a href="http://git.oschina.net/wlemuel/Cotable/tree/master/" target="_blank" rel="external">码厩</a></td><td>博客园第三方客户端, 使用到缓存技术, 当你打开一次之后的博客内容, 会自动保存到设备中, 下次打开阅读同一文章时不需要再利用网络加载, 大家如果想为自己 App 搞缓存的, 可以研究一下该 App 是如何实现的喔</td></tr><tr><td><a href="http://git.oschina.net/ywwxhz/cnBeta-reader" target="_blank" rel="external">cnBeta 第三方阅读器</a></td><td>该 App 是 cnBeta(中文业界资讯站) 第三方阅读客户端, 界面也是使用 Material Design, 还加上一些动画效果, 让人阅读文章起来不会感觉枯燥, 值得去研究学习一下</td></tr><tr><td><a href="https://github.com/PaperAirplane-Dev-Team/BlackLight">BlackLight</a></td><td>BlackLight是由纸飞机开发团队开发的一款Android上的新浪微博第三方轻量级客户端</td></tr><tr><td><a href="https://github.com/actorapp/actor-platform">Actor</a></td><td>Actor(优聆) 是一款即时通讯 App, 解决网络通讯差的情况, 支持离线消息和文件存储, 自动与手机联系人建立联系等等</td></tr><tr><td><a href="https://github.com/nickbutcher/plaid">Plaid</a></td><td>一个遵循 Material Design 的一个设计新闻客户端，里面的一些完全MD的一些特效很棒，同时整个客户端的框架设计也很有参考意义</td></tr><tr><td><a href="https://github.com/SkillCollege/SimplifyReader">SimplifyReader</a></td><td>一款基于 Google Material Design 设计开发的 Android 客户端, 包括新闻简读, 图片浏览, 视频爽看, 音乐轻听以及二维码扫描五个子模块, 项目采取的是MVP架构开发</td></tr><tr><td><a href="https://github.com/CycloneAxe/phphub-android">PHPHub-Android</a></td><td>PHPHub Android 客户端, 项目架构使用 nucleus 简化 MVP 架构, API 请求返回数据使用 RxJava 进行处理, 客户端使用了独特的二维码扫码登录, 有兴趣的可以去研究一下</td></tr><tr><td><a href="https://github.com/MummyDing/Leisure">Leisure</a></td><td>闲暇(Leisure)是一款集”知乎日报”, “果壳科学人”, “新华网新闻”以及”豆瓣图书”于一体的阅读类 Android 应用, 项目里面有多语言切换、夜间模式以及无图模式, 如果你还不知道这些技术怎么实现, 不妨参考一下这个项目</td></tr><tr><td><a href="https://github.com/drakeet/Meizhi">Meizhi</a></td><td>开发者是许晓峰(Drakeet), 该 app 是数据来自代码家干货网站 <a href="http://gank.io" target="_blank" rel="external">gank.io</a>, 有很多开发者都纷纷为这网站做客户端 app, 因为代码家大神开放该网站的 Api, 更重要的是该网站每天除了有干货还有漂亮妹子看呢, 该 App 使用到的技术有 RxJava + Retrofit, 代码结构非常清晰, 值得一看的开源 App.</td></tr><tr><td><a href="https://github.com/sfsheng0322/Bingo">Bingo</a></td><td>开发者是<a href="http://weibo.com/u/3852192525" target="_blank" rel="external">孙福生</a>, Bingo 是一款 IT 阅读学习类的开源软件, 作者收集一些干货学习内容, 你也可以在 App 上分享你的认为干货文章, 该项目使用动态代理 AOP 编程框架, 使开发起来更简洁, 更高效. 里面有一个功能就是多种主题切换, 感兴趣的可以看看怎么实现</td></tr></tbody></table><h2 id="Android-开发者杂志周刊"><a href="#Android-开发者杂志周刊" class="headerlink" title="Android 开发者杂志周刊"></a>Android 开发者杂志周刊</h2><p>( 前五个资料来自 <a href="http://drakeet.me/" target="_blank" rel="external">Drakeet</a> 收集整理的, 资料原链接 <a href="http://www.jianshu.com/p/54c4a19ffa68" target="_blank" rel="external">地址</a> )</p><table><thead><tr><th>周刊名</th><th>周刊简介</th></tr></thead><tbody><tr><td><a href="http://androidweekly.net/" target="_blank" rel="external">Android Weekly</a></td><td>Android Weekly 是由Android 团队的成员和国外知名的 Android 开发者维护, 分享的内容不仅仅只有干货, 而且还有最新的技术分享, 也是Android 开发圈子最早, 最有名的周报</td></tr><tr><td><a href="http://www.androidweekly.cn/" target="_blank" rel="external">Android 开发技术周报</a></td><td>Android 开发技术周报是由<a href="http://weibo.com/234959219" target="_blank" rel="external">@脉脉不嘚語</a> 维护更新, 截止到现在, 已经发布了28 期, 分享的都是高质量的文章教程, 代码库, 工具, 新闻视频, 设计等</td></tr><tr><td><a href="http://zhuanlan.zhihu.com/andlib" target="_blank" rel="external">Android 科学院</a></td><td>由 <a href="http://weibo.com/duguguiyu?from=feed&amp;loc=at&amp;nick=duguguiyu" target="_blank" rel="external">@duguguiyu</a>和豌豆荚一小撮工程师组成, 分享的都是最新的 Android 技术: 虽然更新频率不是很高, 但是质量确是很高的, 值得一看的</td></tr><tr><td><a href="http://www.devtf.cn/?cat=2" target="_blank" rel="external">开发技术前线</a></td><td>开发技术前线是一个高质量技术文章的聚合网站, 主要分享 Android, iOS, 以及招聘等内容</td></tr><tr><td><a href="http://app.memect.com/" target="_blank" rel="external">App 开发日报</a></td><td>App 开发日报主要关注移动应用的开发, 它每天一刊, 分享的内容主要来自微博上知名的开发者推荐的内容, 因此质量基本上是有保证的</td></tr><tr><td><a href="http://www.infoq.com/cn/author/%E9%83%AD%E4%BA%AE" target="_blank" rel="external">Android 开发周报</a></td><td>Android 开发周报是郭亮在连载更新在 Infoq 的周刊, 它不仅分享 Android 的相关新闻, 新工具, 而且还有更加深入的, 所以对于新生老人都很适合</td></tr><tr><td><a href="http://gank.io/" target="_blank" rel="external">干货集中营</a></td><td>由 <a href="http://blog.daimajia.com/" target="_blank" rel="external">代码家</a> 维护更新, 周一到周五每天中午分享, 分享内容有漂亮妹子, Android 干货, iOS 干货, App, 技术以外推荐, 还有休息视频</td></tr><tr><td><a href="http://www.androidblog.cn/" target="_blank" rel="external">Android Blog 周刊</a></td><td>AndroidBlog 是由 <a href="http://weibo.com/u/2106134235?refer_flag=1001030201_&amp;is_hot=1" target="_blank" rel="external">Jomeslu</a> 收录的, 目前就职于搜狐, 该周刊分享内容主要有一周国内外热门技术博客, 优秀的类库, 以及一些有趣的新闻, 看了前几期分享的内容质量都是很高的, 因此值得推荐给大家</td></tr></tbody></table><h2 id="Awesome-系列"><a href="#Awesome-系列" class="headerlink" title="Awesome 系列"></a>Awesome 系列</h2><ul><li><a href="https://github.com/snowdream/awesome-android">awesome android(1)</a></li><li><a href="https://github.com/JStumpp/awesome-android">awesome_android(2)</a></li><li><a href="https://github.com/wasabeef/awesome-android-ui">awesome_android_UI</a></li><li><a href="https://github.com/wasabeef/awesome-android-libraries">awesome_android_libraries</a></li><li><a href="https://github.com/akullpp/awesome-java">awesome_java</a></li><li><a href="https://github.com/lightSky/Awesome-MaterialDesign">awesome_materialdesign</a></li><li><a href="https://github.com/sindresorhus/awesome">awesome 系列之终极版</a></li><li><a href="https://github.com/liaohuqiu/android-dynamic-load-awesome">android-dynamic-load-awesome</a></li></ul><h2 id="动画系列"><a href="#动画系列" class="headerlink" title="动画系列"></a>动画系列</h2><ul><li><a href="https://github.com/hitherejoe/animate">animate</a></li><li><a href="https://github.com/Animatious/awesome-animation">awesome-animation</a></li><li><a href="https://github.com/lgvalle/Material-Animations">Material-Animations</a></li><li><a href="https://github.com/daimajia/AndroidViewAnimations">AndroidViewAnimations</a></li></ul><h2 id="Material-Design-设计"><a href="#Material-Design-设计" class="headerlink" title="Material Design 设计"></a>Material Design 设计</h2><ul><li><a href="https://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">Material Design 教程</a></li><li><a href="https://github.com/1sters/material_design_zh_2">Material Design 教程(中文版)</a></li><li><a href="https://github.com/navasmdc/MaterialDesignLibrary">Material Design Android Library </a>(Material Design 开源库, 很多效果可以直接拿来用)</li><li><a href="http://www.aplesson.com/?p=650" target="_blank" rel="external">十大Material Design开源项目</a></li></ul><h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><ul><li><a href="http://tool.c7sky.com/webcolor/" target="_blank" rel="external">常用色彩搭配表</a></li><li><a href="http://www.colorhunt.co/" target="_blank" rel="external">ColorHunt-色彩搭配</a></li><li><a href="http://www.materialpalette.com/" target="_blank" rel="external">在线 Material Design 界面调色板</a></li><li><a href="http://www.materialup.com/" target="_blank" rel="external">Material Design设计模板与素材</a></li><li><a href="https://icons8.com/" target="_blank" rel="external">App Icon 图标</a></li><li><a href="https://iconstore.co/" target="_blank" rel="external">Icon Store</a></li><li><a href="https://design.google.com/icons/" target="_blank" rel="external">Material icons</a></li><li><a href="http://iconfont.cn/" target="_blank" rel="external">Iconfont</a></li></ul><h2 id="开源库收集"><a href="#开源库收集" class="headerlink" title="开源库收集"></a>开源库收集</h2><ul><li><a href="http://alamkanak.github.io/android-libraries-and-resources/" target="_blank" rel="external">Android Libraries and Resources </a></li><li><a href="http://android-arsenal.com/" target="_blank" rel="external">Android Arsenal </a>(一个专门收集 android 开源库的网站, 网站经常更新)</li><li><a href="https://github.com/Trinea/android-open-project">Android 开源项目汇总 </a>(Trinea 大神收集的)</li><li><a href="http://codekk.com/open-source-project-analysis" target="_blank" rel="external">Android 开源项目源码分析 </a>(在懂得使用这些开源项目同时, 也应该了解当中的原理)</li><li><a href="http://www.jcodecraeer.com/plus/list.php?tid=31" target="_blank" rel="external">泡在网上的日子</a></li><li><a href="http://www.android-gems.com/" target="_blank" rel="external">android-gems</a>(国内外很多开发者都在这里上传他们最新的项目, 还带有 apk 下载)</li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li><a href="https://github.com/iluwatar/java-design-patterns#model-view-presenter">java-design-patterns</a></li><li><a href="https://github.com/simple-android-framework-exchange/android_design_patterns_analysis">Android源码设计模式分析项目</a></li><li><a href="http://blog.csdn.net/zhangerqing/article/details/8194653" target="_blank" rel="external">Java之美[从菜鸟到高手演变]之设计模式</a></li></ul><h2 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h2><ul><li><a href="https://github.com/futurice/android-best-practices/blob/master/translations/Chinese/README.cn.md">Android 开发最佳实践</a></li><li><a href="http://hukai.me/android-dev-patterns/" target="_blank" rel="external">Android 开发最佳实践 </a>(来自<a href="http://hukai.me/" target="_blank" rel="external">胡凯</a>总结)</li><li><a href="http://sr1.me/way-to-explore/2015/03/25/best-practice-for-android-ui.html" target="_blank" rel="external">Android 最佳实践之 UI 篇</a></li><li><a href="http://blog.csdn.net/zhaokaiqiang1992/article/details/45419023" target="_blank" rel="external">Android 屏幕适配全攻略</a></li><li><a href="http://www.hamberluo.cn/2015/04/27/semi-android-newer" target="_blank" rel="external">给半新人的app开发指南</a></li><li><a href="https://github.com/FX-Max/Point-of-Android">Android 一些重要知识点解析整理</a></li><li><a href="http://www.imooc.com/article/1287" target="_blank" rel="external">Android 开发人员应避免的 10 个误区</a></li><li><a href="https://github.com/tianzhijiexian/Android-Best-Practices/blob/master/2015.9/reflect/reflect.md">Java 反射最佳实践</a></li><li><a href="http://www.csdn.net/article/2015-09-18/2825737/1" target="_blank" rel="external">Android 内存优化之 OOM</a></li><li><a href="http://blog.csdn.net/vipzjyno1/article/details/23542617" target="_blank" rel="external">Android 命名规范</a></li><li><a href="https://github.com/tianzhijiexian/Android-Best-Practices/blob/master/2015.10/adapter/adapter.md">Adapter 优化方案的探索</a></li><li><a href="https://github.com/tangqi92/Android-Tips">Android-Tips</a></li><li><a href="http://adbshell.com/" target="_blank" rel="external">最全 Android ADB Shell</a></li><li><a href="https://github.com/CharonChui/AndroidNote">AndroidNote</a></li><li><a href="https://github.com/l123456789jy/Lazy">Android 常用工具类</a></li><li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0218/3978.html" target="_blank" rel="external">创建安卓 app 的 30 个经验教训</a></li><li><a href="http://www.trinea.cn/android/android-image-cache-compare/" target="_blank" rel="external">Android 三大图片缓存原理、特性对比</a></li><li><a href="http://www.trinea.cn/android/performance/" target="_blank" rel="external">Android 性能优化总结</a></li><li><a href="http://www.eoeandroid.com/thread-570919-1-1.html" target="_blank" rel="external">Android 实用代码片段整合 </a></li><li><a href="http://www.phpxs.com/code/1001775" target="_blank" rel="external">36 个 Android 开发常用代码片段</a></li><li><a href="https://github.com/jiang111/awesome-android-tips">收集了大家常用的一些 Android 的模板代码</a></li><li><a href="http://keeganlee.me/post/android/20150709" target="_blank" rel="external">Android 技术积累: 开发规范</a></li><li><a href="http://keeganlee.me/post/architecture/20160114" target="_blank" rel="external">App 架构设计经验谈</a></li><li><a href="http://blog.csdn.net/yyh352091626/article/details/50957851" target="_blank" rel="external">关于 Android 开发的 40 条优化建议</a></li><li><a href="http://gold.xitu.io/entry/56cd6ebb99a6ce005a2887e3" target="_blank" rel="external">如何提高安卓代码的质量和语法</a></li><li><a href="http://www.jianshu.com/p/4f152bc8f4f3" target="_blank" rel="external">我的 Android 开发实战经验总结</a></li><li><a href="http://www.wangchenlong.org/2016/02/23/tips/1603/231-android-tips-1/" target="_blank" rel="external">Android Tips 系列</a></li><li><a href="http://www.jianshu.com/p/28111d29eee4" target="_blank" rel="external">如何自学 Android</a></li><li><a href="https://github.com/JackyAndroid/AndroidInterview-Q-A">国内一线互联网公司内部面试题库</a></li></ul><h2 id="Git-教程"><a href="#Git-教程" class="headerlink" title="Git 教程"></a>Git 教程</h2><p>新手看完这几份教程基本上知道怎么使用 Git 了</p><ul><li><a href="http://jlord.us/git-it/challenges/get_git.html" target="_blank" rel="external">GitHub 团队美女写的一套 Git 使用教程</a></li><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">ProGit 中文版</a></li><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的 Git 教程</a></li><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">Git 简易指南</a></li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><a href="http://developer.android.com/reference/android/package-summary.html" target="_blank" rel="external">Android 官方 API 文档</a>(网站需要翻墙，不翻墙可以<a href="http://pan.baidu.com/s/1dDu3LVb" target="_blank" rel="external">下载</a>离线文件)</li><li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Android 官方培训课程中文版</a>(由胡凯发起对 Google Android 官方培训课程翻译的中文版)</li></ul><h2 id="其它资料收集"><a href="#其它资料收集" class="headerlink" title="其它资料收集"></a>其它资料收集</h2><ul><li><a href="http://www.eoeandroid.com/forum.php?mod=viewthread&amp;tid=571335&amp;highlight=10%E4%B8%AA%E5%BE%88%E6%A3%92" target="_blank" rel="external">10 个很棒的学习 Android 开发的网站</a></li><li><a href="http://android.jobbole.com/80815/" target="_blank" rel="external">Android 开发, 你应该知道的学习资源</a></li><li><a href="https://github.com/ColorfulCat/AndroidGuide">AndroidCat 安卓书签网</a></li><li><a href="http://www.jianshu.com/p/e961f1633d7a" target="_blank" rel="external">每个 Android 开发者都应该了解的资源列表</a></li><li><a href="http://www.jianshu.com/p/54902270249d" target="_blank" rel="external">Android 开发者网址导航</a></li><li><a href="https://github.com/ruijun/Android-Dev-Favorites">Android 开发收藏夹</a></li><li><a href="https://github.com/Tim9Liu9/TimLiu-Android">TimLiu-Android</a>(TimLiu 总结的 Android 开源项目及库)</li><li><a href="https://github.com/JohnTsaiAndroid/AndroidTips">AndroidTips</a></li></ul><h2 id="知乎上的讨论"><a href="#知乎上的讨论" class="headerlink" title="知乎上的讨论"></a>知乎上的讨论</h2><ul><li><a href="http://www.zhihu.com/question/19775981" target="_blank" rel="external">有哪些 Android 大牛的 blog 值得推荐?</a></li><li><a href="http://www.zhihu.com/question/23804819" target="_blank" rel="external">GitHub 上都有哪些值得关注学习的 Android项目?</a></li><li><a href="https://www.zhihu.com/question/28481864" target="_blank" rel="external">GitHub 上有哪些适合新人围观的 Android 项目?</a></li><li><a href="http://www.zhihu.com/question/28841081" target="_blank" rel="external">2015 年移动设备界面设计有哪些趋势?</a></li><li><a href="http://www.zhihu.com/question/33636939" target="_blank" rel="external">Android开发中, 有哪些让你觉得相见恨晚的方法,类或接口?</a></li><li><a href="https://www.zhihu.com/question/28527388" target="_blank" rel="external">Android Studio有哪些非常好用的插件?</a></li><li><a href="https://www.zhihu.com/question/32037895" target="_blank" rel="external">Android 开发有哪些新技术出现?</a></li><li><a href="https://www.zhihu.com/question/19804692" target="_blank" rel="external">有哪些优秀的 Android 应用开源项目, 特效, 设计资料推荐?</a></li><li><a href="https://www.zhihu.com/question/26687642" target="_blank" rel="external">有没有适合 Android 开发初学者的 App 源码推荐?</a></li><li><a href="https://www.zhihu.com/question/29939631" target="_blank" rel="external">Android有什么好的技术点适合进行技术分享?</a></li><li><a href="https://www.zhihu.com/question/27482725" target="_blank" rel="external">Android Studio有什么奇技淫巧?</a></li><li><a href="https://www.zhihu.com/question/37433825" target="_blank" rel="external">Android 开发: 开始一个项目前, 做好哪些准备可以事半功倍?</a></li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>点击<a href="https://github.com/Freelander/Android_Data/graphs/contributors">该链接</a>查看该项目所有贡献者</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>以上内容采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh" target="_blank" rel="external">CC BY-NC-SA 3.0</a> 进行许可, 转载请注明出处, 版权归本人及所有贡献者所有</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#书籍&quot;&gt;书籍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#开发环境工具&quot;&gt;开发环境/工具&lt;/a&gt;&lt;/li&gt;
      
    
    </summary>
    
      <category term="学习资料" scheme="https://github.com/itgoyo/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>String、StringBuffer、StringBuilder的区别</title>
    <link href="https://github.com/itgoyo/2017/07/06/String%E3%80%81StringBuffer%E3%80%81StringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
    <id>https://github.com/itgoyo/2017/07/06/String、StringBuffer、StringBuilder的区别.html</id>
    <published>2017-07-06T15:45:01.000Z</published>
    <updated>2017-11-23T13:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、区别"><a href="#一、区别" class="headerlink" title="一、区别"></a>一、区别</h3><p>String ：字符串常量<br>StringBuffer ：字符串变量<br>StringBuilder ：字符串变量</p><h3 id="二、速度"><a href="#二、速度" class="headerlink" title="二、速度"></a>二、速度</h3><p>StringBuilder &gt; StringBuffer &gt; String</p><p>分析原因：</p><p> String类是不可变类，任何对String的改变都 会引发新的String对象的生成；</p><p> String类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String。</p><p>而StringBuffer与StringBuilder就不一样了，他们是字符串变量，是可改变的对象，每当我们用它们对字符串做操作时，实际上是在一个对象上操作的，这样就不会像String一样创建一些而外的对象进行操作了，当然速度就快了。</p><p>又因为StringBuilder是线程不安全的，StringBuffer是线程安全的，所以StringBuilder比StringBuffer要快。</p><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、区别&quot;&gt;&lt;a href=&quot;#一、区别&quot; class=&quot;headerlink&quot; title=&quot;一、区别&quot;&gt;&lt;/a&gt;一、区别&lt;/h3&gt;&lt;p&gt;String ：字符串常量&lt;br&gt;StringBuffer ：字符串变量&lt;br&gt;StringBuilder ：字符串变量&lt;/
      
    
    </summary>
    
      <category term="学习资料" scheme="https://github.com/itgoyo/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin</title>
    <link href="https://github.com/itgoyo/2017/06/23/Kotlin.html"/>
    <id>https://github.com/itgoyo/2017/06/23/Kotlin.html</id>
    <published>2017-06-23T12:13:26.000Z</published>
    <updated>2017-11-23T13:15:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/github/stars/JetBrains/kotlin.svg?style=social&amp;label=Star" alt=""></p><p>项目地址：<a href="https://github.com/JetBrains/kotlin">https://github.com/JetBrains/kotlin</a></p><p>简介：Kotlin是一种在Java虚拟机上运行的静态类型编程语言，它也可以被编译成为JavaScript源代码。它主要是由俄罗斯圣彼得堡的JetBrains开发团队所发展出来的编程语言，其名称来自于圣彼得堡附近的科特林岛。[2]2012年1月，著名期刊《Dr. Dobb’s Journal（英语：Dr. Dobb’s Journal）》中Kotlin被认定为该月的最佳语言。[3]虽然与Java语法并不兼容，但Kotlin被设计成可以和Java代码相互运作，并可以重复使用如Java集合框架等的现有Java类库。</p><p>更多：The Kotlin Programming Language <a href="http://kotlinlang.org/" target="_blank" rel="external">http://kotlinlang.org/</a></p><hr><h1 id="Kotlin-Programming-Language"><a href="#Kotlin-Programming-Language" class="headerlink" title="Kotlin Programming Language"></a>Kotlin Programming Language</h1><p>Welcome to <a href="https://kotlinlang.org/" target="_blank" rel="external">Kotlin</a>! Some handy links:</p><ul><li><a href="https://kotlinlang.org/" target="_blank" rel="external">Kotlin Site</a></li><li><a href="https://kotlinlang.org/docs/tutorials/getting-started.html" target="_blank" rel="external">Getting Started Guide</a></li><li><a href="https://try.kotlinlang.org/" target="_blank" rel="external">Try Kotlin</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/index.html" target="_blank" rel="external">Kotlin Standard Library</a></li><li><a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="external">Issue Tracker</a></li><li><a href="https://discuss.kotlinlang.org/" target="_blank" rel="external">Forum</a></li><li><a href="https://blog.jetbrains.com/kotlin/" target="_blank" rel="external">Kotlin Blog</a></li><li><a href="https://twitter.com/kotlin" target="_blank" rel="external">Follow Kotlin on Twitter</a></li><li><a href="http://slack.kotlinlang.org/" target="_blank" rel="external">Public Slack channel</a></li><li><a href="https://teamcity.jetbrains.com/project.html?tab=projectOverview&amp;projectId=Kotlin" target="_blank" rel="external">TeamCity CI build</a></li></ul><h2 id="Editing-Kotlin"><a href="#Editing-Kotlin" class="headerlink" title="Editing Kotlin"></a>Editing Kotlin</h2><ul><li><a href="https://kotlinlang.org/docs/tutorials/getting-started.html" target="_blank" rel="external">Kotlin IntelliJ IDEA Plugin</a></li><li><a href="https://kotlinlang.org/docs/tutorials/getting-started-eclipse.html" target="_blank" rel="external">Kotlin Eclipse Plugin</a></li><li><a href="https://github.com/vkostyukov/kotlin-sublime-package">Kotlin TextMate Bundle</a></li></ul><h2 id="Build-environment-requirements"><a href="#Build-environment-requirements" class="headerlink" title="Build environment requirements"></a>Build environment requirements</h2><p>In order to build Kotlin distribution you need to have:</p><ul><li>Apache Ant 1.9.4 and higher</li><li>JDK 1.6, 1.7 and 1.8</li><li><p>Setup environment variables as following:</p><pre><code>JAVA_HOME=&quot;path to JDK 1.8&quot;JDK_16=&quot;path to JDK 1.6&quot;JDK_17=&quot;path to JDK 1.7&quot;JDK_18=&quot;path to JDK 1.8&quot;</code></pre></li></ul><h2 id="Building"><a href="#Building" class="headerlink" title="Building"></a>Building</h2><p>To build this project, first time you try to build you need to run this:</p><pre><code>ant -f update_dependencies.xml</code></pre><p>which will setup the dependencies on</p><ul><li><code>intellij-core</code> is a part of command line compiler and contains only necessary APIs.</li><li><code>idea-full</code> is a full blown IntelliJ IDEA Community Edition to be used in the plugin module.</li></ul><p>Then, you need to run</p><pre><code>ant -f build.xml</code></pre><p>which will build the binaries of the compiler and put them into the <code>dist</code> directory. You may need to increase the <strong>heap size</strong> for Ant using<br><a href="https://web.liferay.com/community/wiki/-/wiki/Main/Ant+opts" target="_blank" rel="external">ANT_OPTS</a>.</p><p><strong>OPTIONAL:</strong> Maven artifact distribution is built separately, go into <code>libraries</code> directory after building the compiler and run:</p><pre><code>./gradlew build installmvn install</code></pre><blockquote><p>Note: on Windows type <code>gradlew</code> without the leading <code>./</code></p></blockquote><p>Refer to <a href="libraries/ReadMe.md">libraries/ReadMe.md</a> for details.</p><h2 id="Working-with-the-project-in-IntelliJ-IDEA"><a href="#Working-with-the-project-in-IntelliJ-IDEA" class="headerlink" title="Working with the project in IntelliJ IDEA"></a>Working with the project in IntelliJ IDEA</h2><p>The <a href="https://github.com/JetBrains/kotlin">root kotlin project</a> already has an IntelliJ IDEA project, you can just open it in IntelliJ IDEA.</p><p>You may need to set the Project SDK (<code>File -&gt; Project Structure -&gt; Project</code>).<br>You may also need to add <code>tools.jar</code> to your SDK:</p><pre><code>File -&gt; Project Structure -&gt; SDKs -&gt; &lt;Your JDK&gt; -&gt; Classpath</code></pre><p>then choose the <code>tools.jar</code> in the JDK’s <code>lib</code> directory.</p><p>If you are not dealing with Android, you may need to disable the Android Plugin in order to compile the project.</p><h3 id="Installing-the-latest-Kotlin-plugin"><a href="#Installing-the-latest-Kotlin-plugin" class="headerlink" title=" Installing the latest Kotlin plugin"></a><a name="installing-plugin"></a> Installing the latest Kotlin plugin</h3><p>Since Kotlin project contains code written in Kotlin itself, you will also need a Kotlin plugin to build the project in IntelliJ IDEA.</p><p>You probably want to have locally the same version of plugin that build server is using for building.<br>As this version is constantly moving, the best way to always be updated is to let IntelliJ IDEA notify you when it is time to renew your plugin.</p><p>To keep the plugin version in sync with the rest of the team and our <a href="https://teamcity.jetbrains.com/project.html?projectId=Kotlin&amp;tab=projectOverview" target="_blank" rel="external">Continuous Integration server</a><br>you should setup IDEA to update the plugin directly from the build server.</p><p>Open:</p><pre><code>Preferences -&gt; Plugins -&gt; Browse Repositories -&gt; Manage Repositories...</code></pre><p>and add the following URL to your repositories:</p><pre><code>https://teamcity.jetbrains.com/guestAuth/repository/download/bt345/bootstrap.tcbuildtag/updatePlugins.xml</code></pre><p>Then update the list of plugins in “Browse Repositories”, you’ll see two versions of Kotlin there, install the one with the higher version number.</p><p>If you want to keep an IntelliJ IDEA installation with that bleeding edge Kotlin plugin for working Kotlin project sources only separate to your default IntelliJ IDEA installation with the stable Kotlin<br>plugin <a href="https://intellij-support.jetbrains.com/hc/en-us/articles/207240985-Changing-IDE-default-directories-used-for-config-plugins-and-caches-storage" target="_blank" rel="external">see this document</a>, which describes how to have multiple IntelliJ IDEA installations using different configurations and plugin directories.</p><h3 id="Compiling-and-running"><a href="#Compiling-and-running" class="headerlink" title="Compiling and running"></a>Compiling and running</h3><p>From this root project there are Run/Debug Configurations for running IDEA or the Compiler Tests for example; so if you want to try out the latest and greatest IDEA plugin</p><ul><li>VCS -&gt; Git -&gt; Pull</li><li>Run IntelliJ IDEA</li><li>a child IntelliJ IDEA with the Kotlin plugin will then startup</li><li>you can now open the <a href="https://github.com/JetBrains/kotlin/tree/master/libraries">kotlin libraries project</a> to then work with the various kotlin libraries etc.</li></ul><h1 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h1><p>We love contributions! There’s <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="external">lots to do on Kotlin</a> and on the<br><a href="https://youtrack.jetbrains.com/issues/KT?q=%23Kotlin%20%23Unresolved%20and%20(links:%20KT-2554,%20KT-4089%20or%20%23Libraries" target="_blank" rel="external">standard library</a>) so why not chat with us<br>about what you’re interested in doing? Please join the #kontributors channel in <a href="http://kotlinslackin.herokuapp.com/" target="_blank" rel="external">our Slack chat</a><br>and let us know about your plans.</p><p>If you want to find some issues to start off with, try <a href="https://youtrack.jetbrains.com/issues/KT?q=tag:%20%7BUp%20For%20Grabs%7D%20%23Unresolved" target="_blank" rel="external">this query</a> which should find all Kotlin issues that marked as “up-for-grabs”.</p><p>Currently only committers can assign issues to themselves so just add a comment if you’re starting work on it.</p><p>A nice gentle way to contribute would be to review the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/index.html" target="_blank" rel="external">standard library docs</a><br>and find classes or functions which are not documented very well and submit a patch.</p><p>In particular it’d be great if all functions included a nice example of how to use it such as for the<br><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/hash-map-of.html" target="_blank" rel="external"><code>hashMapOf()</code></a> function.<br>This is implemented using the <a href="https://github.com/JetBrains/kotlin/blob/1.1.0/libraries/stdlib/src/kotlin/collections/Maps.kt#L91"><code>@sample</code></a><br>macro to include code from a test function. The benefits of this approach are twofold; First, the API’s documentation is improved via beneficial examples that help new users and second, the code coverage is increased.</p><p>Also the <a href="https://github.com/JetBrains/kotlin/blob/master/js/ReadMe.md">JavaScript translation</a> could really use your help. See the <a href="https://github.com/JetBrains/kotlin/blob/master/js/ReadMe.md">JavaScript contribution section</a> for more details.</p><h2 id="If-you-want-to-work-on-the-compiler"><a href="#If-you-want-to-work-on-the-compiler" class="headerlink" title="If you want to work on the compiler"></a>If you want to work on the compiler</h2><p>The Kotlin compiler is written in Java and Kotlin (we gradually migrate more and more of it to pure Kotlin). So the easiest way to work on the compiler or IntelliJ IDEA plugin is</p><ul><li>download a recent <a href="https://www.jetbrains.com/idea/?fromMenu#chooseYourEdition" target="_blank" rel="external">IntelliJ IDEA</a>, Community edition is enough</li><li><a href="#installing-plugin">install the Kotlin plugin</a></li><li>open the <a href="https://github.com/JetBrains/kotlin">root kotlin project</a> in IDEA (opening the kotlin directory)</li></ul><p>You can now run the various Run/Debug Configurations such as</p><ul><li>IDEA</li><li>All Compiler Tests</li><li>All IDEA Plugin Tests</li></ul><h2 id="If-you-want-to-work-on-the-Kotlin-libraries"><a href="#If-you-want-to-work-on-the-Kotlin-libraries" class="headerlink" title="If you want to work on the Kotlin libraries"></a>If you want to work on the Kotlin libraries</h2><ul><li>download a recent <a href="https://www.jetbrains.com/idea/?fromMenu#chooseYourEdition" target="_blank" rel="external">IntelliJ IDEA</a>, Community edition is enough</li><li><a href="#installing-plugin">install the Kotlin plugin</a></li><li>open the <a href="https://github.com/JetBrains/kotlin/tree/master/libraries">kotlin libraries project</a></li></ul><p>Then build via</p><pre><code>cd libraries./gradlew build installmvn install</code></pre><blockquote><p>Note: on Windows type <code>gradlew</code> without the leading <code>./</code></p></blockquote><p>Some of the code in the standard library is created by generating code from templates. See the <a href="libraries/stdlib/ReadMe.md">README</a> in the stdlib section for how run the code generator. The existing templates can be used as examples for creating new ones.</p><h2 id="Submitting-patches"><a href="#Submitting-patches" class="headerlink" title="Submitting patches"></a>Submitting patches</h2><p>The best way to submit a patch is to <a href="https://help.github.com/articles/fork-a-repo/" target="_blank" rel="external">fork the project on github</a> then send us a<br><a href="https://help.github.com/articles/creating-a-pull-request/" target="_blank" rel="external">pull request</a> via <a href="https://github.com">github</a>.</p><p>If you create your own fork, it might help to enable rebase by default<br>when you pull by executing<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global pull.rebase <span class="literal">true</span></div></pre></td></tr></table></figure></p><p>This will avoid your local repo having too many merge commits<br>which will help keep your pull request simple and easy to apply.</p><h2 id="Commit-comments"><a href="#Commit-comments" class="headerlink" title="Commit comments"></a>Commit comments</h2><p>If you include in your comment this text (where KT-1234 is the Issue ID in the <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="external">Issue Tracker</a>, the issue will get automatically marked as fixed.</p><pre><code>#KT-1234 Fixed</code></pre><hr><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/JetBrains/kotlin.svg?style=social&amp;amp;label=Star&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://gith
      
    
    </summary>
    
      <category term="开源项目" scheme="https://github.com/itgoyo/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[译]Kotlin 1.1.2 is out</title>
    <link href="https://github.com/itgoyo/2017/04/25/Kotlin%201.1.2%20is%20out.html"/>
    <id>https://github.com/itgoyo/2017/04/25/Kotlin 1.1.2 is out.html</id>
    <published>2017-04-25T13:19:00.000Z</published>
    <updated>2017-06-23T16:10:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们很高兴宣布Kotlin 1.1.2正式发布了，这也是Kotlin 1.1的第二次 Bug 修复和工具更新。此次更新不仅提升了编译器和 IntelliJ IDEA 插件的性能，同时也在工具中增加了新的特性，当然还有各方面的问题修复。 此外，Kotlin 1.1.2也提升了与Android Gradle插件版本2.4.0-alpha的兼容性。<br>本次发布版本的所有更新可在<a href="https://github.com/JetBrains/kotlin/blob/1.1.2/ChangeLog.md">更新日志</a>中查看。<br>在这里要感谢所有外部的贡献者，他们提交的pull request也包含于该版本中：<a href="https://github.com/shiraji">Yoshinori Isogai</a>，<a href="https://github.com/JLLeitschuh">Jonathan Leitschuh</a>和<a href="https://github.com/cypressious">Kirill Rakhman</a> 。感谢所有尝试EAP构建并向我们发送反馈意见的人！</p><h2 id="迁移说明"><a href="#迁移说明" class="headerlink" title="迁移说明"></a>迁移说明</h2><p>Kotlin编译器现在也需要基于JDK 8运行。但您应该不需要在意这一点改变，因为大多数其他Java开发工具（比如Gradle和Android工具）也需要JDK 8，因此您肯定已经安装了JDK 8。对于由编译器生成的代码，仍然默认兼容Java 1.6，而且我们也没有计划要放弃对生成的Java 1.6兼容性字节码的支持。    </p><p>内部类当中不能再声明 object，因为这个 object 将能够访问外部类的实例，我们知道 object 始终是一个单例，因此这在理论上是行不通的。同样的，内部密封类也是不被允许的。然而这只是临时方案，在我们添加了在其外部类而非内部类中声明内部密封类的子类的可能性时，将会删除该限制。(<a href="https://youtrack.jetbrains.com/issue/KT-16232" target="_blank" rel="external">KT-16232</a>，<a href="https://youtrack.jetbrains.com/issue/KT-16233" target="_blank" rel="external">KT-16233</a>）    </p><p>现在使用一个名称完全由下划线字符组成的声明时将必须使用反引号。(<a href="https://youtrack.jetbrains.com/issue/KT-16264" target="_blank" rel="external">KT-16264</a>）</p><p><span id="more-4945"></span></p><h2 id="Maven增量编译"><a href="#Maven增量编译" class="headerlink" title="Maven增量编译"></a>Maven增量编译</h2><p>从Kotlin 1.1.2开始，以前用于IntelliJ IDEA和Gradle构建的增量编译现在也支持Maven。启用该功能时，需要使用-D命令行参数或<code>proterties</code>标记设置<code>kotlin.compiler.incremental</code>属性为true：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;properties&gt;</div><div class="line">    &lt;kotlin.compiler.incremental&gt;<span class="literal">true</span>&lt;/kotlin.compiler.incremental&gt;</div><div class="line">&lt;/properties&gt;</div></pre></td></tr></table></figure><h2 id="Maven注解处理"><a href="#Maven注解处理" class="headerlink" title="Maven注解处理"></a>Maven注解处理</h2><p>现在可以从Maven构建中调用Kotlin的注解处理工具kapt了，只需要在<code>compile</code>前，从kotlin-maven-plugin中添加<code>kapt</code>的执行目标：</p><p></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;execution&gt;</div><div class="line">    &lt;id&gt;kapt&lt;/id&gt;</div><div class="line">    &lt;goals&gt;</div><div class="line">        &lt;goal&gt;kapt&lt;/goal&gt;</div><div class="line">    &lt;/goals&gt;</div><div class="line">    &lt;configuration&gt;</div><div class="line">        &lt;sourceDirs&gt;</div><div class="line">            &lt;sourceDir&gt;src/main/kotlin&lt;/sourceDir&gt;</div><div class="line">            &lt;sourceDir&gt;src/main/java&lt;/sourceDir&gt;</div><div class="line">        &lt;/sourceDirs&gt;</div><div class="line">        &lt;annotationProcessorPaths&gt;</div><div class="line">            &lt;!-- Specify your <span class="keyword">annotation</span> processors here. --&gt;</div><div class="line">            &lt;annotationProcessorPath&gt;</div><div class="line">                &lt;groupId&gt;com.google.dagger&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;dagger-compiler&lt;/artifactId&gt;</div><div class="line">                &lt;version&gt;<span class="number">2.9</span>&lt;/version&gt;</div><div class="line">            &lt;/annotationProcessorPath&gt;</div><div class="line">        &lt;/annotationProcessorPaths&gt;</div><div class="line">    &lt;/configuration&gt;</div><div class="line">&lt;/execution&gt;</div></pre></td></tr></table></figure><p></p><p>在<a href="https://github.com/JetBrains/kotlin-examples/blob/master/maven/dagger-maven-example/pom.xml">这里</a>查看具有Java-Kotlin代码支持和测试的POM文件完整示例。  </p><p>请注意，IntelliJ IDEA自己的构建系统仍然不支持<code>kapt</code>。当您要重新运行注解处理时，需要从“Maven Projects”工具栏中启动构建。</p><h2 id="内联方法重构"><a href="#内联方法重构" class="headerlink" title="内联方法重构"></a>内联方法重构</h2><p>我们终于在Kotlin代码中实现了Inline方法（Function）的支持。</p><h2 id="其他IDE改进"><a href="#其他IDE改进" class="headerlink" title="其他IDE改进"></a>其他IDE改进</h2><p>在1.1.x时间范围内，我们很大一部分的工作是致力于提高IntelliJ IDEA插件的性能。在此次发布的1.1.2版本中，我们对几项主要性能进行了改进，主要涉及输入响应，同时我们也已经为后续1.1.3版本进行了额外的重大改进。  </p><p>除此之外，我们还在此版本中进行了大量新的检测，快速解决方案和小型IDE功能。特别值得一提的是，在编辑器中支持折叠Android String资源引用，以及新的用于处理Android API版本问题的问题解决方案。</p><h2 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h2><p>要更新IDEA插件，在菜单栏中依次选择 Tools | Kotlin | Configure Kotlin Plugin Update，然后点击“Check for updates now”按钮。另外，不要忘记在Maven和Gradle构建脚本中更新编译器和标准库版本</p><p>命令行编译器可以从 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.1.1">Github发布页面</a> 页面下载。<br>像往常一样，如果您在新版本中遇到任何问题，您可以在 <a href="https://discuss.kotlinlang.org/" target="_blank" rel="external">论坛</a> 中寻求帮助，在Slack(<a href="http://kotlinslackin.herokuapp.com/" target="_blank" rel="external">获取邀请</a>)、或者在<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="external">问题追踪器</a>提出问题 。<br>让我们来吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们很高兴宣布Kotlin 1.1.2正式发布了，这也是Kotlin 1.1的第二次 Bug 修复和工具更新。此次更新不仅提升了编译器和 IntelliJ IDEA 插件的性能，同时也在工具中增加了新的特性，当然还有各方面的问题修复。 此外，Kotlin 1.1.2也提升了
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[译]Kotlin 1.1 Event Report</title>
    <link href="https://github.com/itgoyo/2017/04/06/Kotlin%201.1%20Event%20Report.html"/>
    <id>https://github.com/itgoyo/2017/04/06/Kotlin 1.1 Event Report.html</id>
    <published>2017-04-06T15:21:00.000Z</published>
    <updated>2017-06-23T16:08:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kotlin 1.1 版本发布在社区反响很好。为了演示 Kotlin 1.1 的新功能，JetBrains 提供了一个在线活动。所有感兴趣的人都可以观看 Andrey Breslav 的在线直播演示，并在 Q&amp;A 环节获得他们关心的问题的答案。<br>这激发了许多当地社区组织见面会：超过 30 个用户组在 21 个国家举办了线下活动。<br>你可以在这里找到完整的活动列表 <a href="http://kotlinlang.org/community/talks.html?time=kotlin" target="_blank" rel="external">Kotlin社区网页</a> 。活动当天有 3000 多人参加了线上直播。<br>演示和 Q&amp;A 视频可以在 YouTube 上查看：</p><p><iframe allowfullscreen="allowfullscreen" frameborder="0" height="450" src="https://www.youtube.com/embed/zpyJHSR-5ts" width="800"></iframe></p><p><span id="more-4802"></span></p><h2 id="Kotlin-1-1-活动反馈"><a href="#Kotlin-1-1-活动反馈" class="headerlink" title="Kotlin 1.1 活动反馈"></a>Kotlin 1.1 活动反馈</h2><p>如果你看了直播，我们想知道你的想法！请 <a href="https://docs.google.com/forms/d/e/1FAIpQLSdgKsJzwc1ToAusi-xpEiiE1O4t3HA5xjlbZXDU5Mg0i3qvNg/viewform" target="_blank" rel="external">填写此表格</a> 分享您的反馈。它只需要大约7-10分钟。您的投入对于帮助我们改进未来的 Kotlin 活动非常重要。</p><h2 id="Kotlin-未来特性调查"><a href="#Kotlin-未来特性调查" class="headerlink" title="Kotlin 未来特性调查"></a>Kotlin 未来特性调查</h2><p><img alt="future_features_collage_2" class="size-full wp-image-4907 aligncenter" src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/04/collage_2.png" width="800"><br></p><p>我们还向所有社区提供了对 Kotlin 未来的影响。活动组织者收到了调查表，活动参与者可以在线下对最期望的功能发表看法。调查得到很多关注，我们现在已经把它放在网上，以听取更广泛的社区建议。现在你可以在线给 <a href="https://docs.google.com/forms/d/e/1FAIpQLSdnCgBonEV5pwN8L903BzdYb9Baf0dpwsJ5YrKnxLveiLFkEQ/viewform" target="_blank" rel="external"> Kotlin 的未来提供你的建议</a>  ！<br>请注意，你在 v1.2 中有很大可能看不到这些功能，但我们会在确定工作优先级时考虑您的意见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kotlin 1.1 版本发布在社区反响很好。为了演示 Kotlin 1.1 的新功能，JetBrains 提供了一个在线活动。所有感兴趣的人都可以观看 Andrey Breslav 的在线直播演示，并在 Q&amp;amp;A 环节获得他们关心的问题的答案。&lt;br&gt;这激发了许多当
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[译]Kotlin 1.1 也适用于 Android 开发者</title>
    <link href="https://github.com/itgoyo/2017/04/05/Kotlin%201.1%20is%20also%20for%20Android%20Developers.html"/>
    <id>https://github.com/itgoyo/2017/04/05/Kotlin 1.1 is also for Android Developers.html</id>
    <published>2017-04-05T08:13:00.000Z</published>
    <updated>2017-06-23T16:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kotlin 1.1的发布令人们感到非常兴奋。此版本包含的新功能对 Java 开发者非常有用，并将 引领 JVM 走向一个充满发展潜力的新世界。</p><p>但有些新功能，如 <a href="https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md">coroutine</a> 和 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/type-aliases.md">type alias</a>（下文有几个例子）对于 Android 开发者来说就像科幻小说。</p><p>我们仍然停留在几乎没有什么改进的古老 Java 6 中，迫使我们以其他平台已经被被遗忘的方式进行开发。</p><p>所以一个理所当然的问题是：Kotlin 团队能够保持与 Java 6 的兼容性，同时保留所有这些新功能吗？答案是：当然！</p><p><strong>所有新特性仍然兼容 Java 6 为 Android 开发者所用。</strong> 今天我想向您展示其中的一部分，看看它们是如何使你更容易的开发 Android 应用程式。</p><a id="more"></a><h1 id="type-alias-使你的-listener-更易读"><a href="#type-alias-使你的-listener-更易读" class="headerlink" title="type alias 使你的 listener 更易读"></a>type alias 使你的 listener 更易读</h1><p>当然 type alias 有很多不同的应用场景，不过我首先想到的是使用 lambda 作为 listener 的类型时会使代码更易读。</p><p>如果没接触过 <a href="https://github.com/Kotlin/KEEP/issues/4">type alias</a> 的话，可以简单的理解为给复杂的类型名起个别名，使其更为可读。</p><p>例如你有个接收 listener 的 <code>RecyclerViewAdapter</code>。<code>RecyclerView</code> 没有 <code>ListView</code> 那样 标准的方式来处理条目点击事件，必须由开发者自己实现。</p><p>假如我们希望有一个可以访问 view 的 listener，那 adapter 可能如下所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span></span>(<span class="keyword">val</span> items: List&lt;Item&gt;, <span class="keyword">val</span> listener: (View) -&gt; <span class="built_in">Unit</span>) : RecyclerView.Adapter&lt;MyAdapter.ViewHolder&gt;() &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>而你的 <code>ViewHolder</code> 可能需要接收该 listener，才能将其分配给 view：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>(itemView: View) : RecyclerView.ViewHolder(itemView) &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bind</span><span class="params">(item: <span class="type">Item</span>, listener: (<span class="type">View</span>)</span></span> -&gt; <span class="built_in">Unit</span>) &#123;</div><div class="line">        itemView.setOnClickListener(listener)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这不是一个复杂的例子，但是正如你所看到的我们需要重复定义这个 lambda ，会导致这段代码不太好阅读。</p><p>但是现在我们可以创建一个代表点击 listener 的 type alias：<br><code>typealias ClickListener = (View) -&gt; Unit</code><br>然后在需要的每一个地方使用它：<br><code>class MyAdapter(val items: List&lt;Item&gt;, val listener: ClickListener)</code><br>或者<br><code>fun bind(item: Item, listener: ClickListener) { ... }</code></p><h1 id="data-class-更强大了"><a href="#data-class-更强大了" class="headerlink" title="data class 更强大了"></a>data class 更强大了</h1><p>data class 可以为我们避免大量的样板代码，但是它不能继承其它类所以某些情况下不可用。</p><p>Kotlin 1.1 取消了这个限制，例如 data class 可以定义为 sealed class 的子类了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">UiOp</span> </span>&#123;</div><div class="line">    <span class="keyword">object</span> Show : UiOp()</div><div class="line">    <span class="keyword">object</span> Hide : UiOp()</div><div class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Translate</span></span>(<span class="keyword">val</span> axis: Axis, <span class="keyword">val</span> amount: <span class="built_in">Int</span>): UiOp()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同时 <strong>sealed class 可以在父类之外定义</strong>，就像这样的：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">UiOp</span></span></div><div class="line"><span class="keyword">object</span> Show : UiOp()</div><div class="line"><span class="keyword">object</span> Hide : UiOp()</div><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Translate</span></span>(<span class="keyword">val</span> axis: Axis, <span class="keyword">val</span> amount: <span class="built_in">Int</span>) : UiOp()</div></pre></td></tr></table></figure><h1 id="在-lambda-中使用-destructuring"><a href="#在-lambda-中使用-destructuring" class="headerlink" title="在 lambda 中使用 destructuring"></a>在 lambda 中使用 destructuring</h1><p>从 Kotlin 最早的版本开始 data class 就能够使用 destructuring declarations 了，因为它会自动生成 <code>componentX()</code> 方法，借助这些方法可以将 data class 对象拆分成若干变量，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>(<span class="keyword">val</span> text: String, <span class="keyword">val</span> url: String)</div><div class="line"> </div><div class="line"><span class="keyword">val</span> (text, url) = item</div></pre></td></tr></table></figure><p>可是在 Kotlin 1.1 之前你并不能在 lambda 上这么做。不过等待结束了！现在可以这么写：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">bind</span><span class="params">(item: <span class="type">Item</span>)</span></span> = item.let &#123; (text, url) -&gt;</div><div class="line">    textView.text = text</div><div class="line">    imageView.loadUrl(url)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个改进十分适用于操作 Pair 和 Map 等类型的对象</p><h1 id="适用与局部变量的-delegated-property"><a href="#适用与局部变量的-delegated-property" class="headerlink" title="适用与局部变量的 delegated property"></a>适用与局部变量的 delegated property</h1><p>delegated property 已被证明是非常有用的，可以为类中的 property 提供附加的能力。</p><p>例如最有用的一个是 <strong>lazy property</strong>，它会推迟赋值操作，直到变量第一次使用。</p><p>但其实 lazy 对于局部变量来说也是十分有用的，而之前 Kotlin 缺乏这个功能。</p><p>现在通过 delegated property，我们可以做到：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testLocalDelegation</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> database <span class="keyword">by</span> lazy &#123; createDatabase() &#125;</div><div class="line">    <span class="keyword">val</span> cache <span class="keyword">by</span> lazy &#123; createMemoryCache() &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (mustUseDatabase()) &#123;</div><div class="line">        database.use &#123; ... &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        cache.use &#123; ... &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>虽然这个例子可以在没有使用 lazy 的情况下解决，但它有助于理解这个概念。</p><p>有一些占用比较多的对象不一定会被使用，可以通过使用 lazy 延迟实例化，直到我们初次使用它。</p><p>这时大括号内的代码会被执行，并且将结果缓存下来以备稍后再次使用。</p><h1 id="再也不用在-lambda-中定义未使用的变量了"><a href="#再也不用在-lambda-中定义未使用的变量了" class="headerlink" title="再也不用在 lambda 中定义未使用的变量了"></a>再也不用在 lambda 中定义未使用的变量了</h1><p>在 lambda 中定义了变量但最终没使用情况很常见。</p><p>这是因为在 Kotlin 1.0 中没有办法丢弃 lambda 中未使用的参数。</p><p>例如使用 delegated property 更新 RecyclerView adapter，我使用了以下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items: List&lt;Content&gt; <span class="keyword">by</span> Delegates.observable(emptyList()) &#123;</div><div class="line">    prop, old, new -&gt;</div><div class="line">    autoNotify(old, new) &#123; o, n -&gt; o.id == n.id &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>prop 变量从未被使用过，这时我们就可以使用下划线来替换它：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items: List&lt;Content&gt; <span class="keyword">by</span> Delegates.observable(emptyList()) &#123;</div><div class="line">    _, old, new -&gt;</div><div class="line">    autoNotify(old, new) &#123; o, n -&gt; o.id == n.id &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还有种更糟的情况，如果 lambda 有多个参数，即使你一个也不用还是需要写上所有参数。现在我们可以忽略它们了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items: List&lt;Item&gt; <span class="keyword">by</span> Delegates.observable(emptyList()) &#123;</div><div class="line">    _, _, _ -&gt;</div><div class="line">    notifyDataSetChanged()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>不仅可以定义较少的变量，而且代码还变得更易读了，那些有用的变量一眼就能看到。</p><h1 id="Coroutine"><a href="#Coroutine" class="headerlink" title="Coroutine"></a>Coroutine</h1><p>coroutine 是 Kotlin 1.1 中最令人兴奋的特性。尽管在此版本中带着“实验性”的标签，<strong>但 coroutine 功能齐全，你完全可以开始在项目中使用它们</strong>。</p><p>coroutine 能让你以同步的方式编写异步代码，允许你在某些时候暂停执行并等待结果，同时写下顺序相连代码。</p><p>您可能已经知道在 Kotlin 中 coroutine 并不是指一个库或者具体的实现，<strong>而是一种能力，通过它能够创建具有 coroutine 特性的库</strong>。</p><p>因此尽管某些代码看起来可能相似，但重要的是要知道创建这些辅助线程并返回主线程的“齿轮”是什么，这在 Android 中非常重要。</p><p>幸运的是 Kotlin 社区的动作很快，已经有几个库引入了 coroutine 方便我们在 Android 上使用。</p><p>首先来看看 Jetbrains 官方提供的：</p><ul><li><a href="https://github.com/Kotlin/kotlinx.coroutines/tree/master/ui/kotlinx-coroutines-android">kotlinx-coroutines-android</a> 提供了在 Android 上使用 coroutine 的实现。</li><li><a href="https://github.com/Kotlin/anko">Anko</a> 在其最新的 beta 版中改写了部分框架引入 coroutine。</li></ul><p>还有许多其他第三方库实现了自己的 coroutine 版本：</p><ul><li><a href="https://github.com/nhaarman/AsyncAwait-Android">AsyncAwait-Android by Niek Haarman</a></li><li><a href="https://github.com/metalabdesign/AsyncAwait">Async / Await by Metalab</a></li><li>如果你在寻找 Retrofit 的 coroutine 版本，那么可以试试 <a href="https://github.com/gildor/kotlin-coroutines-retrofit">kotlin-coroutines-retrofit by Andrey Mischenko</a></li></ul><p>建议你们使用的时候看看它们是如何实现的，这就是开源的好处。</p><h1 id="其它对-Android-开发者有用的东西"><a href="#其它对-Android-开发者有用的东西" class="headerlink" title="其它对 Android 开发者有用的东西"></a>其它对 Android 开发者有用的东西</h1><p>这个版本还有更多的改进，但是我更想强调一些侧重于 Android 开发的内容。</p><p>首先，现在可以通过使用以下配置来启用 Jack 编译器的支持了：<code>jackOptions {true}</code>。虽然 Google 已经宣布放弃 Jack 工具链了，但是如果你对 Java 8 有需求那么会有一点用处，然后等到 Android Studio 2.4 的正式版发布就可以彻底弃用 Jack 了。（从 Android Studio 2.4 Preview 4 版本开始支持所有 Java 7 语言特性，部分 Java 8 语言特性）</p><p>另外介绍一个小技巧，就是用 <code>@JvmOverloads</code> <strong>来实现自定义 View</strong> 的构造函数，在 Kotlin 中借助参数默认值一个构造函数就能满足自定义 View 的多种构造需求（嗯，很长的一个构造函数）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomView</span> <span class="meta">@JvmOverloads</span> <span class="keyword">constructor</span></span>(</div><div class="line">        context: Context, attrs: AttributeSet? = <span class="literal">null</span>, defStyleAttr: <span class="built_in">Int</span> = <span class="number">0</span></div><div class="line">) : View(context, attrs, defStyleAttr) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>Kotlin 1.1 带来了大量的新功能，不禁让人产生为什么还要使用 Java 的想法。</p><p>Kotlin 为 Android 开发者带来的好处是毋庸置疑的，从现在开始使用 Kotlin 编写你的 Android 应用吧。</p><p>如果你想从头开始学习使用 Kotlin 开发 Android 应用，那么你应该会对 <a href="https://antonioleiva.com/kotlin-android-developers-book/" target="_blank" rel="external">Kotlin for Android Developers</a> 这本书感兴趣。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kotlin 1.1的发布令人们感到非常兴奋。此版本包含的新功能对 Java 开发者非常有用，并将 引领 JVM 走向一个充满发展潜力的新世界。&lt;/p&gt;
&lt;p&gt;但有些新功能，如 &lt;a href=&quot;https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md&quot;&gt;coroutine&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/Kotlin/KEEP/blob/master/proposals/type-aliases.md&quot;&gt;type alias&lt;/a&gt;（下文有几个例子）对于 Android 开发者来说就像科幻小说。&lt;/p&gt;
&lt;p&gt;我们仍然停留在几乎没有什么改进的古老 Java 6 中，迫使我们以其他平台已经被被遗忘的方式进行开发。&lt;/p&gt;
&lt;p&gt;所以一个理所当然的问题是：Kotlin 团队能够保持与 Java 6 的兼容性，同时保留所有这些新功能吗？答案是：当然！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有新特性仍然兼容 Java 6 为 Android 开发者所用。&lt;/strong&gt; 今天我想向您展示其中的一部分，看看它们是如何使你更容易的开发 Android 应用程式。&lt;/p&gt;
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Android" scheme="https://github.com/itgoyo/tags/Android/"/>
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[译]Kotlin 1.1 Event in Your City</title>
    <link href="https://github.com/itgoyo/2017/03/21/Kotlin%201.1%20Event%20in%20Your%20City.html"/>
    <id>https://github.com/itgoyo/2017/03/21/Kotlin 1.1 Event in Your City.html</id>
    <published>2017-03-21T13:51:00.000Z</published>
    <updated>2017-06-23T16:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们将于2017年3月23日进行<a href="https://blog.jetbrains.com/kotlin/2017/03/kotlin-1-1-event-2/#more-4726" target="_blank" rel="external">Kotlin 1.1活动</a> 线上直播。您可以通过<a href="http://jb.gg/kotlinevent1_1" target="_blank" rel="external">JetBrains TV</a>观看<strong>Andrey Breslav的演讲</strong>，了解Kotlin 1.1的关键特性，包括协程(coroutines)，JavaScript后端等。您也可以使用#kotlinqa在twitter上提出问题，我们将在3月23日直播中的<strong>Q&amp;A环节</strong>进行解答。为适应不同的时区我们共准备了2个直播流，详情可在<a href="https://blog.jetbrains.com/kotlin/2017/03/kotlin-1-1-event-2/#more-4726" target="_blank" rel="external">博客日志</a>中参阅<strong>详细计划与指导</strong> 。从下图中了解您所在的城市是否有<strong>Kotlin 1.1活动</strong>，如果您所在的城市尚未出现在下图中，请单独加入直播。</p><p><a href="http://kotlinlang.org/community/talks.html?time=kotlin" target="_blank" rel="external"><img alt="Kotlin_1_1event_map" class="size-full wp-image-4794 aligncenter" data-recalc-dims="1" src="https://i1.wp.com/blog.jetbrains.com/kotlin/files/2017/03/Kotlin_1_1event_map.png?resize=640%2C451&amp;ssl=1"></a></p><p>请注意，美国的直播时间已经更改为PDT(太平洋夏季时间)时间。第一个直播流将于上午9点开始，第二个上午11点开始。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们将于2017年3月23日进行&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2017/03/kotlin-1-1-event-2/#more-4726&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin 1
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[译]Kotlin 1.0.7 is out</title>
    <link href="https://github.com/itgoyo/2017/03/15/Kotlin%201.0.7%20is%20out.html"/>
    <id>https://github.com/itgoyo/2017/03/15/Kotlin 1.0.7 is out.html</id>
    <published>2017-03-15T14:21:00.000Z</published>
    <updated>2017-06-23T16:08:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们很高兴地宣布Kotlin 1.0.x系列的最后一个更新，Kotlin 1.0.7已经发布了。需要重点关注的是该补丁针对Gradle和annotation processing进行修复，此前无法升级到1.1版本的用户现在可以正常使用了。完整的修复列表可以在<a href="https://github.com/JetBrains/kotlin/blob/1.0.7/ChangeLog.md">更新日志</a>查看。<br>要在Maven或Gradle版本中更新版本，只需在构建脚本中更改Kotlin版本号。命令行编译器会在<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.0.7">Github发行页面</a>中下载。<br>在IntelliJ IDEA和Android Studio中，如果您使用Kotlin 1.0.7构建项目，我们建议使用1.1版本的插件，并将语言版本切换为1.0。如果您确实想要安装1.0.7版本的插件，可以在<a href="https://plugins.jetbrains.com/plugin/6954-kotlin" target="_blank" rel="external">Kotlin插件页面</a>下载相应版本，并通过IDE的“从磁盘安装插件…”按钮进行安装。<br>一如既往，如果您在新版本中遇到任何问题，欢迎您在<a href="https://discuss.kotlinlang.org/" target="_blank" rel="external">讨论组</a>或者Slack（在<a href="http://kotlinslackin.herokuapp.com/" target="_blank" rel="external">这里</a>获得邀请）里寻求帮助，或在<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="external">这里</a>提交issue。<br>让我们来享受Kotlin吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们很高兴地宣布Kotlin 1.0.x系列的最后一个更新，Kotlin 1.0.7已经发布了。需要重点关注的是该补丁针对Gradle和annotation processing进行修复，此前无法升级到1.1版本的用户现在可以正常使用了。完整的修复列表可以在&lt;a href=
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[译]Kotlin 1.1.1 is out</title>
    <link href="https://github.com/itgoyo/2017/03/14/Kotlin%201.1.1%20is%20out.html"/>
    <id>https://github.com/itgoyo/2017/03/14/Kotlin 1.1.1 is out.html</id>
    <published>2017-03-14T12:29:00.000Z</published>
    <updated>2017-06-23T16:09:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们发布了针对<strong> Kotlin 1.1 </strong>的第一个bug修复更新。此更新的重点是解决导致错误代码生成的回归；我们希望尽可能快地修复此问题。详细内容请查看<a href="https://github.com/JetBrains/kotlin/blob/1.1.1/ChangeLog.md">更新日志</a> 。<br>重点更新如下：</p><ul><li>默认情况下，已启用Gradle增量编译。如果需要，您仍然可以按照文档描述禁用此功能。</li><li>Kotlin插件现已可以通过Gradle插件依赖添加使用。详情可参阅相关文档。</li><li>禁用使用带有接收器的函数类型作为JavaScript外部声明的参数类型。在此之前，传递给这些参数的lambdas没有被正确的参数调用，并且在这个问题上没有简单的解决方法，所以现在我们决定禁用这个功能。</li></ul><p>更新后的Kotlin <a href="https://marketplace.eclipse.org/content/kotlin-plugin-eclipse" target="_blank" rel="external">Eclipse</a> 和 <a href="http://plugins.netbeans.org/plugin/68590/kotlin" target="_blank" rel="external">NetBeans</a> 插件将支持Kotlin 1.1.1，所以您可以尽情享受Kotlin新版本的优点而无需关注IDE。</p><h2 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h2><p>要更新IDEA插件，在菜单栏中依次选择 Tools | Kotlin | Configure Kotlin Plugin Update，然后点击“Check for updates now”按钮。另外，不要忘记在Maven和Gradle构建脚本中更新编译器和标准库版本</p><p>命令行编译器可以从 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.1.1">Github发布页面</a> 页面下载。<br>像往常一样，如果您在新版本中遇到任何问题，您可以在 <a href="https://discuss.kotlinlang.org/" target="_blank" rel="external">论坛</a> 中寻求帮助，在Slack(<a href="http://kotlinslackin.herokuapp.com/" target="_blank" rel="external">获取邀请</a>)、或者在<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="external">问题追踪器</a>提出问题 。<br>让我们开始吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我们发布了针对&lt;strong&gt; Kotlin 1.1 &lt;/strong&gt;的第一个bug修复更新。此更新的重点是解决导致错误代码生成的回归；我们希望尽可能快地修复此问题。详细内容请查看&lt;a href=&quot;https://github.com/JetBrains/kotlin
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[译]Kotlin 1.1 Event</title>
    <link href="https://github.com/itgoyo/2017/03/06/Kotlin%201.1%20Event.html"/>
    <id>https://github.com/itgoyo/2017/03/06/Kotlin 1.1 Event.html</id>
    <published>2017-03-06T09:43:00.000Z</published>
    <updated>2017-06-23T16:08:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kotlin 1.1除了为您的项目带来新特性之外，还是您与当地社区进行线下交流学习、了解Kotlin的未来与发展的绝好机会。<br>您可以组织社区的小伙伴们，一起参与Jetbrains团队在<strong>3月23日</strong>举办的Kotlin直播活动。为了适应不同时区，我们准备了两个直播流，分别是<strong>欧洲中部时间[CET]下午5点/7点(太平洋夏季时间[PDT]上午9点/11点)</strong>。  </p><p><a href="https://docs.google.com/forms/d/e/1FAIpQLSf6iXcrIpaNIqeeUJI2L6pntS5yy_iI01PbrO9gTMmX0kg5Lw/viewform" target="_blank" rel="external">告诉我们</a>，我们将在博客上公布。</p><p><img alt="1600" class="size-full wp-image-4739 aligncenter" data-recalc-dims="1" src="https://i1.wp.com/blog.jetbrains.com/kotlin/files/2017/03/1600.png?resize=640%2C320&amp;ssl=1"></p><p><span id="more-4726"></span></p><h2 id="Kotlin-1-1活动时间："><a href="#Kotlin-1-1活动时间：" class="headerlink" title="Kotlin 1.1活动时间："></a>Kotlin 1.1活动时间：</h2><ul><li><strong>CET时间下午5点/7点(PDT时间上午9点/11点)</strong> - Andrey Breslav演讲(Youtube上直播30分钟)，链接将稍候放出。</li><li><strong>CET时间下午5点30分/7点30分(PDT时间上午9点30分/11点30分)</strong> -  休息30分钟，期间可以自由讨论关于在Kotlin未来版本中您最希望加入的功能或特性，并在Twitter上分享和评论。</li><li><strong>CET时间下午6点/8点(PDT时间上午10点/12点)</strong> - 与Kotlin团队的互动问答环节(45分钟，直播);</li><li>欢迎各位参与讨论与发言。</li></ul><h2 id="互动问答环节"><a href="#互动问答环节" class="headerlink" title="互动问答环节"></a>互动问答环节</h2><ul><li>从3月21日开始，至3月23日互动环节结束期间，您可以在Twitter上使用#kotlinQA标签向我们提出任何您想要问的问题；</li><li>Kotlin团队将对问题进行分类;</li><li>团队将在Q＆A环节现场回答问题;</li><li>如果在会议期间有问题没有答复，我们仍将通过Twitter进行回复</li><li>优先回答提问频率最高的问题</li></ul><h2 id="Future-Features-kit"><a href="#Future-Features-kit" class="headerlink" title="Future Features kit"></a>Future Features kit</h2><p>本次调查的目的是收集社区用户对语言特征的偏好和需求。您可以提出在Kotlin后续版本中最希望看到的特征或功能；不过这些内容并不保证能在1.2版本中发布，但我们会在确定工作优先级时考虑您的意见。</p><ul><li>Kotlin Future Feature Kit包含20张写有功能名称和描述的卡片以及用于投票的贴纸;</li><li>将功能卡片粘贴到白板（或墙壁）上;</li><li>每位参加者可获得3张（3张）贴纸，可以在功能中自由分配：最多为三种不同的功能进行投票，或者对某一功能投出两票甚至三票;</li><li>参加者可以通过阅读卡片的说明了解功能，然后按上所述规则进行投票;</li><li>将结果进行拍照;</li><li>使用#kotlinevent标签在Twitter上发布</li></ul><p><a href="https://docs.google.com/forms/d/e/1FAIpQLSf6iXcrIpaNIqeeUJI2L6pntS5yy_iI01PbrO9gTMmX0kg5Lw/viewform" target="_blank" rel="external">在这里提交你的答案吧</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kotlin 1.1除了为您的项目带来新特性之外，还是您与当地社区进行线下交流学习、了解Kotlin的未来与发展的绝好机会。&lt;br&gt;您可以组织社区的小伙伴们，一起参与Jetbrains团队在&lt;strong&gt;3月23日&lt;/strong&gt;举办的Kotlin直播活动。为了适应不同
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 1.1</title>
    <link href="https://github.com/itgoyo/2017/03/04/Kotlin%201.1.html"/>
    <id>https://github.com/itgoyo/2017/03/04/Kotlin 1.1.html</id>
    <published>2017-03-04T00:46:34.000Z</published>
    <updated>2017-11-23T13:15:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周一的文章里面提到 Kotlin 1.1 rc了，还没正式发布，我在周三的时候把文章转到掘金以后，好多小伙伴告诉我，1.1 已经发布了~</p><p>tips: 本文有较多外链，公众号阅读时无法跳转，如有需要，请大家点击”阅读原文”。</p><h2 id="1、更新要点"><a href="#1、更新要点" class="headerlink" title="1、更新要点"></a>1、更新要点</h2><h3 id="1-1-Coroutine"><a href="#1-1-Coroutine" class="headerlink" title="1.1 Coroutine"></a>1.1 Coroutine</h3><p>1.1 最大的更新一定必须毫无疑问的要数 Coroutine 了，尽管在正式发版之前，Kotlin Team 突然虚了，决定把这个特性定为 Experimental，不过这似乎并没有改变什么。不就是改个包名么！！</p><p>早在春节放假那几天，我就在公众号连续两周发文介绍 Coroutine，本来还计划有第三篇的，不过开工以后个项目有点儿累，每天翻 Android 系统 C++ 层的代码翻到吐，也没精力去写第三篇文章，真是抱歉，如果大家有兴趣，可以参考前两篇：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTYzOTYzNA==&amp;mid=2247483875&amp;idx=1&amp;sn=b1b565f651ee1221d4bda19ab12009ce&amp;chksm=e8a05ededfd7d7c878c1c483c577ec53bcf42ee4cb0fe5d13f29d12ff62a1e335c4afa616ffa#rd" target="_blank" rel="external">深入理解 Kotlin Coroutine (一)</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTYzOTYzNA==&amp;mid=2247483878&amp;idx=1&amp;sn=710189e6e22a13fc7d1ea67bc2dd9270&amp;chksm=e8a05edbdfd7d7cd163ee1a2d5769fc2bf003e2d5a6d3f9c6382531b7efc22a6ab75300bb906#rd" target="_blank" rel="external">深入理解 Kotlin Coroutine (二）</a></p><p>其中，第一篇文章写于 experimental 之前，不过大家只要在包名当中加上 experimental 就没问题了。</p><p>Kotlin 的 Coroutine 实现主要分为两个层面，第一个层面就是标准库以及语言特性的支持，这里面主要包括最基本的 suspend 关键字以及诸如 startCoroutine 这样的方法扩展，上述第一篇文章对此做了详细的介绍。第二层面则主要是基于前面的基础封装的库，目前主要是 kotlinx.coroutine ，其中封装了 runBlock、launch 这样方便的操作 Coroutine 的 api，这在第二篇文章做了详细地介绍。所以大家在了解 Coroutine 的时候，可以从这两个角度来入手，以免没有头绪。</p><p>我们再来简单说说 Coroutine 的运行机制。Coroutine 是用来解决并发问题的，它甚至有个中文名叫“协程”，它看上去跟线程似乎是并发问题的两种独立的解决方案，其实不然。要并发的执行任务，从根本上说，就是要解决 Cpu 的调度问题，Cpu 究竟是如何调度，取决于操作系统，我们在应用程序编写的过程中用到的 Thread 也好，Coroutine 也好，本质上也是对操作系统并发 api 的封装。知道了这一点，我们再来想想 Thread 是如何做到两个线程并发执行的呢？Java 虚拟机的实现主要采用了对内核线程映射的方式，换句话说，我们通常用到的 Thread 的真正直接调度者可以理解为是操作系统本身。那我们在 Kotlin 当中支持 Coroutine 是不是也要把每一个 Coroutine 映射到内核呢？显然不能，不然那跟 Thread 还有啥区别呢？再者，Coroutine 的核心在 Co 上，即各个 Coroutine 是协作运行的，有一种“你唱罢来我登场”的感觉，就是说，Coroutine 的调度权是要掌握在程序自己手中的。于是，如果你去了解 kotlinx.coroutine 的实现，你就会发现 CommonPool 这么个东西，它不是别的，它的背后正是线程池。</p><p><strong>线程是轻量级进程，而协程则是轻量级线程。</strong></p><p>Coroutine 的出现让 Kotlin 如虎添翼，如果你之前在写 Go，Lua，python，或者 C#，这回 Java 虚拟机家族可不会让你失望了。自从有了协程，你也可以写出这样的代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> fibonacci = buildSequence &#123;  </div><div class="line">    yield(<span class="number">1</span>) <span class="comment">// first Fibonacci number  </span></div><div class="line">    <span class="keyword">var</span> cur = <span class="number">1</span>  </div><div class="line">    <span class="keyword">var</span> next = <span class="number">1</span>  </div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;  </div><div class="line">        yield(next) <span class="comment">// next Fibonacci number  </span></div><div class="line">        <span class="keyword">val</span> tmp = cur + next  </div><div class="line">        cur = next  </div><div class="line">        next = tmp  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">...  </div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> fibonacci)&#123;  </div><div class="line">    println(i)  </div><div class="line">    <span class="keyword">if</span>(i &gt; <span class="number">100</span>) <span class="keyword">break</span> <span class="comment">//大于100就停止循环  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>序列生成器，记得我刚学 python 那会儿看到这样的语法，简直惊呆了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> imageA = loadImage(urlA)  </div><div class="line"><span class="keyword">val</span> imageB = loadImage(urlB)  </div><div class="line">onImageGet(imageA, imageB)</div></pre></td></tr></table></figure><p>这样的代码也是没有压力的，看上去就如同步代码一般，殊不知人家做的可是异步的事情呐。</p><p><strong>协程的出现，让我们可以用看似同步的代码做着异步的事情。</strong></p><p>这篇文章我们主要说说 1.1 的发版，Coroutine 的更多内容，建议大家直接点击前面的链接去读我的另外两篇文章~</p><h3 id="1-2-JavaScript-支持"><a href="#1-2-JavaScript-支持" class="headerlink" title="1.2 JavaScript 支持"></a>1.2 JavaScript 支持</h3><p>真是媳妇儿终于熬成婆，Js 终于被正式支持了。看官方的意思，他们已经用这一特性做了不少尝试，从 Kotlin 从头到尾写一个站点，似乎毫无压力，尽管类似反射这一的特性还没有支持，不过面包会有的嘛。</p><p>从我个人的角度来说，也可能我对前端了解太少吧，我觉得应用在前端比起移动端、服务端来说，Kotlin 的前景相对不明朗。我用 JavaScript 用得好好的，为啥要切换 Kotlin 呢？动态特性玩起来挺爽的，虽然回调写多了容易蛋疼，但这也不是不可以规避的。关于 Kotlin 开发前端这个问题，我需要多了解一下前端开发者的看法，相比他们是否愿意接触 Kotlin，我更关心有几个做前端的人知道这门语言。不瞒各位说，前几天跟一个支付宝客户端的大哥聊了一会儿，他问我这个 k o t 什么的，是干啥的。。。我当时在想，看来阿里人对 Kotlin 还不是很熟悉啊。</p><p>Whatever，Kotlin 现在都可以支持 node.js 了，还有什么不可能的呢？作为吃瓜群众，且让我观望一阵子。</p><h3 id="1-3-中文支持"><a href="#1-3-中文支持" class="headerlink" title="1.3 中文支持"></a>1.3 中文支持</h3><p>你放心，这一段内容你绝对在其他人那里看不到，因为没人会这么蛋疼。我前几天为了做一个案例用中文写了段代码，想着 Java 支持中文标识符，Kotlin 应该也问题不大。没曾想，写的时候一点儿问题的没，可编译的时候却直接狗带了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> 中国.北京.回龙观</div><div class="line">　</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">G6</span>出口</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> 下高速<span class="params">()</span></span>&#123;</div><div class="line">        println(<span class="string">"前方堵死, 请开启飞行模式 :)"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">　</div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> 回龙观出口 = G6出口()</div><div class="line">    回龙观出口.下高速()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意，包名、代码文件名都是中文的，如果用 1.0.6 版编译，结果就是万里江山一片红哇。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Error:Kotlin: [Internal Error] java.io.FileNotFoundException: /Users/benny/temp/testKotlin/out/production/testKotlin/??/??/???/G6??.class (No such file or directory)</div><div class="line">at java.io.FileInputStream.open0(Native Method)</div><div class="line">at java.io.FileInputStream.open(FileInputStream.java:195)</div><div class="line">at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:138)</div><div class="line">at kotlin.io.FilesKt__FileReadWriteKt.readBytes(FileReadWrite.kt:52)</div><div class="line">at org.jetbrains.kotlin.incremental.LocalFileKotlinClass</div><div class="line">...</div></pre></td></tr></table></figure><p>注意到，汉字都变成了 ??，瞧瞧编译器那小眼神，真是看得我都醉了。</p><p>如果我们用 1.1 的编译器来编译这段代码，结果就可以正常输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">前方堵死, 请开启飞行模式。</div></pre></td></tr></table></figure><h3 id="1-4-其他特性"><a href="#1-4-其他特性" class="headerlink" title="1.4 其他特性"></a>1.4 其他特性</h3><p>1.1 还新增了不少特性，我在之前的一篇文章就做过介绍：<a href="https://mp.weixin.qq.com/s?__biz=MzIzMTYzOTYzNA==&amp;mid=2247483827&amp;idx=1&amp;sn=9c800c2249808685f98b4431ff74e19a&amp;chksm=e8a05e8edfd7d798719fe8b443019cd53f541597fd039b2b9098add86d186cd2ccea2b8d61e7#rd" target="_blank" rel="external">喜大普奔！Kotlin 1.1 Beta 降临~</a></p><ul><li>tpyealias</li><li>绑定调用者的函数引用</li><li>data class 可以继承其他类</li><li>sealed class 子类定义的位置放宽</li><li>_ 作为占位，替代不需要的变量</li><li>provideDelegate</li></ul><h2 id="2、Kotlin-元年"><a href="#2、Kotlin-元年" class="headerlink" title="2、Kotlin 元年"></a>2、Kotlin 元年</h2><p>2016 年是 Kotlin “元年（First year of Kotlin）”，官网给出了这样一幅图来展示它一年来的成绩：</p><p><img src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/03/GitHub-Stats-1.gif" alt=""></p><p>Github 上面的代码量都破千万了，使用 Kotlin 的公司也逐渐增多，除了 JetBrains 自己以外，我觉得在 Java 界比较有分量的就是 Square 了，如果 Google 能够稍微提一句 Kotlin ，显然这个故事就会有另外一个令人兴奋的版本——好啦，不要 yy 啦。</p><p>据说，比较著名的主要有Amazon Web Services, Pinterest, Coursera, Netflix, Uber, Square, Trello, Basecamp 这些公司将 Kotlin 投入了生产实践当中。国内资料较少，估计接触的人也不是很多，像百度、腾讯、阿里巴巴、滴滴、新美大、小米、京东这样的公司可能还没有太多的动力去将 Kotlin 应用到开发中，就算开始尝试，也多是在 Android 开发上面试水；而敢于尝试 Kotlin 的，更多是没有什么历史包袱且富于创新和挑战精神的创业团队，对于他们而言 Kotlin 为开发带来的效率是非常诱人的。</p><p>说到这里，有两个令人兴奋的消息需要同步给大家：</p><ul><li>Gradle 开始尝试用 Kotlin 作为其脚本语言，目前已经发到了 0.4.0。这个真的可以有，groovy 虽然是一门很灵活的语言，不过写配置的时候如果没有 IDE 的提示，实在是太痛苦了。大家有兴趣也可以关注一下这个项目：<a href="https://github.com/gradle/gradle-script-kotlin">gradle-script-kotlin</a></li><li><a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0" target="_blank" rel="external">Spring 5.0 加入 Kotlin 支持</a>，Spring 的地位可想而知，Spring 为 Kotlin 站台，这分量还是很重的。</li></ul><p>不知道 2017 年会发生什么，且让我们准备好爆米花饮料，拭目以待吧。</p><p>关于 Kotlin 的资料，英文版的图书已经出版了几本，主要有：</p><ul><li><a href="https://manning.com/books/kotlin-in-action" target="_blank" rel="external">Kotlin in Action</a>：这部书已经有了纸质版，是官方自己人写的，算是一本比较权威的参考书了。</li><li><a href="https://leanpub.com/kotlin-for-android-developers" target="_blank" rel="external">Kotlin for Android Developers</a>：这本书也算是老资历了，稍微看几眼你就会为 Kotlin 有趣的特性所吸引。另外，它还有一个<a href="https://wangjiegulu.gitbooks.io/kotlin-for-android-developers-zh/content/wo_men_tong_guo_kotlin_de_dao_shi_yao.html" target="_blank" rel="external">中文的翻译版本</a></li><li><a href="https://leanpub.com/modern-web-development-with-kotlin" target="_blank" rel="external">Modern Web Development with Kotlin</a>：这本书我没有读过，如果你需要用 Kotlin 开发 web 应用，它应该会给予你一些帮助。</li><li><a href="https://www.packtpub.com/application-development/programming-kotlin" target="_blank" rel="external">Programming Kotlin</a>：这本书涉及内容非常全面，内容也算是言简意赅，快速入门 Kotlin 可以选择它。</li></ul><p>除了图书以外， Kotlin 的首席布道师 Hadi Hariri 已经在 O’Reilly 上面发布了两套视频教程：</p><ul><li><a href="http://shop.oreilly.com/product/0636920052982.do" target="_blank" rel="external">Introduction to Kotlin Programming</a></li><li><a href="http://shop.oreilly.com/product/0636920052999.do" target="_blank" rel="external">Advanced Kotlin Programming</a></li></ul><p>里面有免费的几段，且不说内容怎么样，反正考验大家英语听力的时候到了，嗯，老爷子讲得还是很清楚的。</p><p>国内的资料，很少。除了有个别小伙伴写的一些博客之外，较为系统的学习资料几乎没有。也难怪大家都不知道它呢。也正是为了弥补这一空白，我在 16 年 10 月的时候开始每周 10 分钟的节奏连续录了 15 期视频，如果你有 Java 基础，那么看这些视频基本上可以让你知道 Kotlin 是怎么一回事了。</p><ul><li><a href="https://github.com/enbandari/Kotlin-Tutorials">Kotlin 中文视频教程</a></li></ul><p>另外，如果你想要对 Kotlin 持续了解，建议你关注微信公众号 Kotlin，每周一推送的 Kotlin 的相关文章，基本上会覆盖了 Kotlin 的各种最新动态。也欢迎大家跟我交流开发中遇到的问题~</p><h2 id="3、Kotlin-时代"><a href="#3、Kotlin-时代" class="headerlink" title="3、Kotlin 时代"></a>3、Kotlin 时代</h2><p>1.1 的重要的更新其实就 Coroutine 以及 JavaScript 支持，毕竟 Kotlin 对 Java 的兼容支持已经做得非常不错了（别老提 apt 的事儿，1.0.4 之后的 kapt 不就基本上很好用了么）。别人问我，Kotlin 到底是写啥的，这个问题我通常说很官方的说，Kotlin 是一门运行在 Java虚拟机、Android、浏览器上的静态语言，可是，Kotlin Team 的节奏已经让这句话显得要过时了。他们用短短几年时间搞出这么个全栈的语言，各方面特性都还很棒，然而他们并不能感到满足，他们已经开始走 C++ 的路线，也许 Kotlin Native 要不了多久就会出现了。</p><p>第一次听到这消息的时候，我瞬间就凌乱了，那感觉就好像王者荣耀里面队友选了大乔一样，秒回泉水加满血，秒回战场收人头啊。</p><p>前不久，我很荣幸地跟一位创业公司 CEO 坐下来聊理想，他问我的第一句话就是：你觉得 Kotlin 是未来么？我当时就蒙了，不得不说，他对 Kotlin 的期待跟 Kotlin Team 如出一辙呀。我当时实在不知道该怎么回答他，回来仔细想了想，答案其实也是有的。</p><p>十几年前，东家缺钱，急需投资，投资人坐下来“拷问”小马哥：“这个东西（指当时的 OICQ）怎么赚钱？” 小马哥说自己只知道这个东西大家喜欢，但不知道向谁收钱。对于 Kotlin 来说，我只知道它好用，尽管大家都还看不太懂，不过它的时代正在悄悄的到来。</p><p><img src="/arts/kotlin扫码关注.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周一的文章里面提到 Kotlin 1.1 rc了，还没正式发布，我在周三的时候把文章转到掘金以后，好多小伙伴告诉我，1.1 已经发布了~&lt;/p&gt;
&lt;p&gt;tips: 本文有较多外链，公众号阅读时无法跳转，如有需要，请大家点击”阅读原文”。&lt;/p&gt;
&lt;h2 id=&quot;1、更新要
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[译]Kotlin 1.1 发布啦！JavaScript，Coroutine 还有更多你想要的</title>
    <link href="https://github.com/itgoyo/2017/03/01/Kotlin%201.1%20Released%20with%20JavaScript%20Support,%20Coroutines%20and%20more.html"/>
    <id>https://github.com/itgoyo/2017/03/01/Kotlin 1.1 Released with JavaScript Support, Coroutines and more.html</id>
    <published>2017-03-01T09:12:00.000Z</published>
    <updated>2017-06-23T16:09:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kotlin 1.1 今天正式发布了，这让 Kotlin 有能力适用于更多的应用场景，希望大家能够喜欢。</p><p><img alt="Kotlin 1.1" class="alignnone size-full wp-image-4675" src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/03/Kotlin11blogbanner1.png" width="800"></p><p>我们希望 Kotlin 能够在应用的任何组件中成为独立的、富有表现力且性能强大的强类型语言，Kotlin1.1 为了实现这一目标迈出了巨大的两步。</p><p><span id="more-4611"></span></p><p>首先，<strong><em>JavaScript 支持</em></strong>的“试验性”标签已被移除，并且支持所有 Kotlin 语言特性、标准库的大部分内容以及 JavaScript 互操作性。这意味着开发者可以完全使用 Kotlin 来编写整个 WEB 应用，同时继续使用 JavaScript 的开发框架（比如 React）。  </p><p>其次，我们引入了<strong><em>协程(coroutines)</em></strong>的概念。作为线程的轻量级替代方案，协程在应用程序后端可以具有更大可扩展性，从而支持单个 JVM 实例上的大量工作负载。除此之外，协程对于实现异步行为具有强大的表现力，这对于在任何平台上构建响应式用户交互界面而言极其重要。  </p><p>下面我们将进一步介绍这两大功能。其他部分如<a href="http://kotlinlang.org/docs/reference/whatsnew11.html#type-aliases" target="_blank" rel="external">type aliases</a>，<a href="http://kotlinlang.org/docs/reference/whatsnew11.html#bound-callable-references" target="_blank" rel="external">callable references</a>，<a href="http://kotlinlang.org/docs/reference/whatsnew11.html#destructuring-in-lambdas" target="_blank" rel="external">destructuring in lambdas</a>等详情可在<a href="http://kotlinlang.org/docs/reference/whatsnew11.html" target="_blank" rel="external">最新消息</a>查看，试试完整的可运行示例代码！</p><h2 id="协程-Coroutines"><a href="#协程-Coroutines" class="headerlink" title="协程(Coroutines)"></a>协程(Coroutines)</h2><p>在 Kotlin 中协程使非阻塞式异步代码与同步代码一样易于理解。  </p><p>异步编程正当风靡，唯一让我们思虑的是，非阻塞式代码大量增加了系统的复杂性。 而 Kotlin 现在提供了简化这种复杂性的方法，通过单原子让协程在语言中成为一等公民：<strong><em>挂起函数</em></strong>。这种类型的函数（或 lambda）表示在计算运行中可以被挂起（不阻塞任何线程），而后也能继续恢复运行。  </p><p>从技术上说，协程是多任务协作的轻量级解决方案（类似于<a href="https://en.wikipedia.org/wiki/Fiber_(computer_science" target="_blank" rel="external">fibers</a>)）。换言之，他们只是<strong><em>更好的线程</em></strong>：可以任意的启动和保留，且挂起的消耗极其之低（挂起之于协程，如阻塞之于线程），非常易于组合与订制。  </p><p>我们对于协程的设计以实现最大的灵活性为目标：在语言中固化的部分少，而且可以作为库来实现很多功能。<a href="https://github.com/Kotlin/kotlinx.coroutines">kotlinx.coroutines</a>项目在 Rx，CompletableFuture，NIO，JavaFx 和 Swing 上均有设计功能库，甚至可以为 Android 和 JavaScript 编写类似的库。即使在其​​他语言中许多内置构建现在也可以用 Kotlin 库来编写。包括 Python 的 generators/yield，来自 Go 的 channels/select 以及 C＃的 async/await:</p><p></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// runs the code in the background thread pool</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">asyncOverlay</span><span class="params">()</span></span> = async(CommonPool) &#123;</div><div class="line">    <span class="comment">// start two async operations</span></div><div class="line">    <span class="keyword">val</span> original = asyncLoadImage(<span class="string">"original"</span>)</div><div class="line">    <span class="keyword">val</span> overlay = asyncLoadImage(<span class="string">"overlay"</span>)</div><div class="line">    <span class="comment">// and then apply overlay to both results</span></div><div class="line">    applyOverlay(original.await(), overlay.await())</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// launches new coroutine in UI context</span></div><div class="line">launch(UI) &#123;</div><div class="line">    <span class="comment">// wait for async overlay to complete</span></div><div class="line">    <span class="keyword">val</span> image = asyncOverlay().await()</div><div class="line">    <span class="comment">// and then show it in UI</span></div><div class="line">    showImage(image)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>查看<a href="http://kotlinlang.org/docs/reference/coroutines.html" target="_blank" rel="external">完整内容</a>。  </p><p><strong>重要提示</strong>：凭借上述的这些优势，Kotlin 协程近乎全新的设计，在我们能确定这是 100％正确和完整之前，仍然需要大量的实践和测试。因此我们才选择在“实验性”<a href="http://kotlinlang.org/docs/diagnostics/experimental-coroutines.html" target="_blank" rel="external">标志</a>下发布。我们不希望语言规则发生变化，但 API 可能需要在 Kotlin 1.2 中进行调整。</p><h2 id="JavaScript-支持"><a href="#JavaScript-支持" class="headerlink" title="JavaScript 支持"></a>JavaScript 支持</h2><p>如上所述，Kotlin 1.1 中的所有语言特性（包括协程）都适用于 JVM / Android 和 JavaScript（JavaScript 的反射目前不可用，但我们正在这方面努力）。这意味着 Web 应用程序可以完全使用 Kotlin 编写，而且我们已经在 JetBrains 内部有一些尝试，相信很快就会发布教程和其他资料。  </p><p>Kotlin for JavaScript 具有与“源生”JavaScript 代码进行互相操作的动态类型，通过类型 API 可以使用<a href="http://github.com/kotlin/ts2kt">ts2kt converter</a>以及<a href="http://github.com/DefinitelyTyped/DefinitelyTyped">DefinitelyTyped</a>等知名库。  </p><p>我们支持 Node.js 和浏览器。 Kotlin 标准库可通过<code>npm</code>使用。<br><a href="http://kotlinlang.org/docs/reference/js-overview.html" target="_blank" rel="external">文档链接</a> 。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>Kotlin 1.1 并不是 Kotlin 工具发布的主版本：我们更喜欢具有这些功能的工具就绪后，不会对语言本身产生影响，所以我们在 Kotlin 1.0.x 版本中的有许多这样的改进：</p><ul><li>主流 IDE 的 Kotlin 插件：IntelliJ IDEA，Android Studio，Eclipse 和 NetBeans</li><li>IntelliJ IDEA 和 Gradle 中的增量编译</li><li>Spring，JPA 和 Mockito 的编译器插件（all-open 与 no-arg）</li><li>注解处理器 kapt</li><li>对 Android 项目的支持 Lint 检查</li><li>大量的 IDE 代码预测，检查，快速修复，重构和自动完成提升</li></ul><p>我们将继续在 1.1.x 版本中进行更新，努力为开发者们提供更好的工具。</p><h1 id="Kotlin-元年：迁移与社区"><a href="#Kotlin-元年：迁移与社区" class="headerlink" title="Kotlin 元年：迁移与社区"></a>Kotlin 元年：迁移与社区</h1><p>总而言之，Kotlin 正在逐渐壮大。去年，我们看到有超过 160,000 人使用，Github 上的 Kotlin 开源项目从 2.4M 增加到 10M（约 4 倍）。我们的 Slack 社区已经从 1,400 人增长到超过 5,700 人（超过 4 倍）。<a href="http://kotlinlang.org/community/talks.html" target="_blank" rel="external">世界各地</a>均有社区组织了众多的线下交流以及用户群组，我们也看到越来越多的 Kotlin 书籍和在线课程发布。</p><p><center><br><img alt="Kotlin GitHub Stats" class="alignnone size-full wp-image-4679" height="375" onmouseout="this.src='https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/03/GitHub-Stats-2.png';" onmouseover="this.src='https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/03/GitHub-Stats-1.gif';" src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/03/GitHub-Stats-2.png" width="750"><br></center></p><p>Kotlin 在服务器端和 Android 端（开发人员数量均等）表现异常强大。 <a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0" target="_blank" rel="external">Spring 框架 5.0</a>和<a href="http://vertx.io/blog/vert-x-3-4-0-beta1-release/" target="_blank" rel="external">vert.x 3.4</a>均引入了对 Kotlin 的支持。 <a href="https://blog.gradle.org/kotlin-meets-gradle" target="_blank" rel="external">Gradle</a>和<a href="https://blog.jetbrains.com/teamcity/2016/11/kotlin-configuration-scripts-an-introduction/" target="_blank" rel="external">TeamCity</a>正在使用 Kotlin 构建脚本。更多使用 Kotlin 的项目可以在<a href="http://kotlin.link" target="_blank" rel="external">kotlin.link</a>查看。  </p><p>许多知名公司也正在使用 Kotlin：<a href="https://www.youtube.com/watch?v=mDpnc45WwlI" target="_blank" rel="external">Pinterest</a>，<a href="https://building.coursera.org/blog/2016/03/16/becoming-bilingual-coursera/" target="_blank" rel="external">Coursera</a>，<a href="https://twitter.com/robspieldenner/status/708355228832178176" target="_blank" rel="external">Netflix</a>，<a href="https://www.reddit.com/r/androiddev/comments/5sihp0/2017_whos_using_kotlin/ddfmkf7/" target="_blank" rel="external">Uber</a>，<a href="https://github.com/square/sqldelight">Square</a>，<a href="https://twitter.com/danlew42/status/809065097339564032" target="_blank" rel="external">Trello</a>，<a href="https://m.signalvnoise.com/some-of-my-favorite-kotlin-features-that-we-use-a-lot-in-basecamp-5ac9d6cea95" target="_blank" rel="external">Basecamp</a>；除此之外， 由知名银行（如高盛，富国银行，摩根大通，德意志银行，瑞银，汇丰银行，法国巴黎银行，SociétéGénérale）联盟开发的分销账户分类账户<a href="https://github.com/corda/corda">Corda</a>，其代码库中有<a href="https://www.corda.net/2017/01/10/kotlin/" target="_blank" rel="external">超过 90％的部分</a>使用 Kotlin。我们感谢世界各地的所有用户，贡献者和倡导者。您的支持对我们非常重要！</p><h3 id="组织您自己的-Kotlin-1-1-活动"><a href="#组织您自己的-Kotlin-1-1-活动" class="headerlink" title="组织您自己的 Kotlin 1.1 活动"></a>组织您自己的 Kotlin 1.1 活动</h3><p>Kotlin 1.1 的发布是与当地社区好友线下聚会的好话题。我们已经准备了一些资料来帮助开发者们举办此类活动。3 月 23 日，我们将以 Kotlin 团队成员的形式进行现场直播，发起人均可获得一个背包，里面有一份关于未来特性的调查问卷和一些小礼物，点击<a href="https://docs.google.com/forms/d/e/1FAIpQLSf6iXcrIpaNIqeeUJI2L6pntS5yy_iI01PbrO9gTMmX0kg5Lw/viewform" target="_blank" rel="external">注册</a>即可参与。</p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>为了使 Kotlin 成为真正的全栈语言，我们将为多个平台编译相同的代码提供工具和语言支持。这将有助于在客户端和服务器之间进行模块共享。我们将继续致力于改进 JavaScript 工具和库的支持。除此之外，JavaScript 平台的增量编译正在进行中。请继续关注 1.1.x 更新。  </p><p>Java 9 即将推出，我们将在发布之前为其新功能提供支持。  </p><p>我们期望在未来几个月内能够收到许多关于协程反馈意见，改进这一领域（在性能和功能方面）对于我们优先级最高。<br>除此之外，下一版本的主要工作将集中在维护，性能改进，基础架构和错误修复方面。<br>P.S 跨平台运行是 Kotlin 的战略方向，伴随着 1.1 的发布，我们可以在服务器，台式机，Android 设备和浏览器上运行，但是未来我们将把 Kotlin 编译为本地代码，并使之能够在更多平台（例如 iOS 和嵌入式设备等）上运行。 目前在 JetBrains 内部，有一个非常棒的团队正在开展这个项目，我们期待很快就会出现有趣的东西，不过尚未计划为此专门发布任何版本。</p><h1 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h1><p>与以往一样，开发者可以使用<strong>Kotlin 线上编辑器</strong> <a href="http://try.kotlinlang.org/" target="_blank" rel="external">try.kotlinlang.org</a>。  </p><p><strong>Maven/Gradle</strong>：使用<code>1.1.0</code>作为编译器和标准库的版本号(<a href="http://kotlinlang.org/docs/reference/using-gradle.html" target="_blank" rel="external">查看文档</a>)。  </p><p><strong>IntelliJ IDEA</strong>：2017.1 已包含 Kotlin 1.1；旧版本则需要安装 Kotlin 插件或更新到 1.1 版本。  </p><p><strong>Android Studio</strong>：通过<strong><em>Plugin Manager</em></strong>安装或更新插件。  </p><p><strong>Eclipse</strong>：使用<a href="https://marketplace.eclipse.org/content/kotlin-plugin-eclipse" target="_blank" rel="external">Marketplace</a> 安装插件。  </p><p><strong>命令行编译器</strong>可以从<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.1">Github 发布页面</a>下载。  </p><p><strong>兼容性</strong>：Kotlin 1.1 语言和标准库<a href="http://kotlinlang.org/docs/reference/compatibility.html" target="_blank" rel="external">向后兼容(modulo bugs)</a> ：如果使用 1.0 版本编译运行，1.1 版本仍然可以运行。为了帮助大型团队有规律的更新，我们在编译器中新增禁用新功能的开关。查看<a href="http://kotlinlang.org/docs/reference/compatibility.html#binary-compatibility-warnings" target="_blank" rel="external">踩坑文档</a>。  </p><p><strong><em>请尽情享受 Kotlin！</em></strong>  </p><p>P.S: 在<a href="https://www.reddit.com/r/programming/comments/5wvpv8/kotlin_11_released_with_javascript_support/" target="_blank" rel="external">Reddit</a>和<a href="https://news.ycombinator.com/item?id=13763483" target="_blank" rel="external">Hacker News</a>上加入讨论吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kotlin 1.1 今天正式发布了，这让 Kotlin 有能力适用于更多的应用场景，希望大家能够喜欢。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Kotlin 1.1&quot; class=&quot;alignnone size-full wp-image-4675&quot; src=&quot;https:/
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[译]Kotlin 1.1 候选版本来啦</title>
    <link href="https://github.com/itgoyo/2017/02/17/Kotlin%201.1%20Release%20Candidate%20is%20Here.html"/>
    <id>https://github.com/itgoyo/2017/02/17/Kotlin 1.1 Release Candidate is Here.html</id>
    <published>2017-02-17T05:37:00.000Z</published>
    <updated>2017-06-23T16:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>截至今天，Kotlin 1.1 终于到了候选版本（RC）阶段。这意味着大部分开发工作都已经完成，我们对此结果感到满意，很快就会发布 Kotlin 1.1 正式版。我们已经在内部对此版本进行了大量测试，但现实世界总是比任何测试环境更加多样化，因此我们需要您的帮助。请尝试这个版本，让我们知道您的体验！</p><p><img alt="11RC-01" class="alignnone size-full wp-image-4599" height="251" src="https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2017/02/11RC-01.png" width="1300"><br><span id="more-4589"></span></p><p>候选版本中唯一的新功能是 <code>takeUnless</code> 函数，它对应 1.1 之前添加的 <a href="https://kotlinlang.org/docs/reference/whatsnew11.html#takeif-and-also" target="_blank" rel="external">takeIf</a>，但判断条件相反。至于错误修复则有很多，完整清单请查看<a href="https://github.com/JetBrains/kotlin/blob/1.1-rc/ChangeLog.md">更新日志</a>。除此之外，我们还修复了几个 IDE 中的性能问题，包括长期存在和最近回归才出现的。</p><h2 id="迁移说明"><a href="#迁移说明" class="headerlink" title="迁移说明"></a>迁移说明</h2><p>就像我们之前<a href="https://blog.jetbrains.com/kotlin/2017/01/kotlin-1-1-beta-is-here/" target="_blank" rel="external">提到的</a>，预发布版本生成的所有二进制文件不能在当前的编译器下使用：您现在<strong>需要重新编译</strong>由 1.1-M0x 和 Beta 编译的所有内容。当然，从 1.0.x 开始的所有代码都不需要重新编译。</p><p>在这之前，您可以从 Java 6 开始，以任何版本的 Java 运行 Kotlin 编译器，但这从第一个 1.1.x 更新开始有变化，编译器将仅在 Java 8 或 9 下运行。为您准备迁移，编译器现在会在 Java 6 或 7 下运行时发出警告。请注意，这仅影响构建环境；<strong>编译代码默认情况下仍然与 Java 6 兼容</strong>，我们没有计划删除对它的支持。</p><p>现在不推荐使用 <code>.javaClass</code> 扩展属性。作为替代，请使用 <code>::class.java</code>。IDE 提供了一个 quickfix 来更新写法，单独的修改或者更新整个项目。</p><p>为了减小 JavaScript 标准库的大小，我们已经将 <code>kotlin.dom</code> 和 <code>kotlin.dom.build</code> 包中的大量辅助函数注解为不推荐使用了，然后在将来的更新中删除它们。</p><h2 id="如何尝鲜"><a href="#如何尝鲜" class="headerlink" title="如何尝鲜"></a>如何尝鲜</h2><p><strong>在 Maven/Gradle 中：</strong> 将 <code>http://dl.bintray.com/kotlin/kotlin-eap-1.1</code> 添加为构建脚本和项目的仓库；使用 <code>1.1.0-rc-91</code> 作为编译器和标准库的版本号。</p><p><strong>在 IntelliJ IDEA 中：</strong> 点击菜单 <em>Tools → Kotlin → Configure Kotlin Plugin Updates</em>，然后在 <em>Update channel</em> 的下拉列表中选择 “Early Access Preview 1.1”，接着点击 <em>Check for updates</em>。</p><p><strong>在 Eclipse 中：</strong> 从以下更新站点安装插件<br><code>https://dl.bintray.com/jetbrains/kotlin/eclipse-plugin/0.8.0</code></p><p><strong>The command-line compiler</strong> 可以从 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.1-rc">Github 发布页面</a>下载。<br>最后，让我们开启 Kotlin 之旅吧！<strong><a href="http://try.kotlinlang.org/" target="_blank" rel="external">try.kotlinlang.org</a></strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;截至今天，Kotlin 1.1 终于到了候选版本（RC）阶段。这意味着大部分开发工作都已经完成，我们对此结果感到满意，很快就会发布 Kotlin 1.1 正式版。我们已经在内部对此版本进行了大量测试，但现实世界总是比任何测试环境更加多样化，因此我们需要您的帮助。请尝试这个版
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 1.1 Beta 2 发布~</title>
    <link href="https://github.com/itgoyo/2017/02/06/Kotlin%201.1%20Beta%202%20%E5%8F%91%E5%B8%83~.html"/>
    <id>https://github.com/itgoyo/2017/02/06/Kotlin 1.1 Beta 2 发布~.html</id>
    <published>2017-02-06T00:14:15.000Z</published>
    <updated>2017-11-23T13:07:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-协程改包名风波"><a href="#1-协程改包名风波" class="headerlink" title="1 协程改包名风波"></a>1 协程改包名风波</h2><p>说真的，看到这个标题的时候我还挺兴奋，离 release 又近了一步。不过，看了这篇文章的时候，我就觉得也是醉醉的。发生了啥呢？</p><p>原来，协程相关的依赖统统被标记为 experimental 了，以前叫：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> kotlin.coroutines</div></pre></td></tr></table></figure><p>现在呢？</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> kotlin.coroutines.experimental</div></pre></td></tr></table></figure><p>这意味着啥？意味着我们在这次更新之后，还得把原来的协程代码的包重新导入一遍，另外，如果你想使用协程，那么你还需要在配置当中呢启用它，例如 gradle 配置需要加入：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">kotlin &#123;</div><div class="line">    experimental &#123;</div><div class="line">        coroutines <span class="string">'enable'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>你在升级所有的依赖的时候，确保它是兼容 1.1.0-beta-38 的，这一点很重要，不然等着报错吧！</p><p>话说，为啥要这么搞呢？按照官方的说法就是，协程这个特性目前已经实现的非常不错了，内置 API 非常少，灵活扩展性也强，不过他们觉得这个东西还有很大的潜力，也不能就这样作为最终版本给大家放出来，而作为实验特性交给大家使用呢，更多地还是希望大家能提提意见啥的。嗯，说实在的，协程这个特性真不是个小特性。</p><h2 id="2-兼容-1-0"><a href="#2-兼容-1-0" class="headerlink" title="2 兼容 1.0"></a>2 兼容 1.0</h2><p>话说，1.1 的编译器终于声称兼容 1.0 的源码了，这表明我们再也不用搞两个 IntelliJ 分别装 1.0 稳定版的插件和 1.1 Beta 版的插件了。</p><p>是的，就算你不用 1.1 的特性，你装 1.1 的插件，用 1.1 的编译器，写 1.0 的代码毫无压力！！</p><p>什么？你问我试了没？当然，我一直用最新的插件，折腾地挺苦的 T T，劝诸君还是装稳定版吧，吃螃蟹要做好心理准备~！</p><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3 小结"></a>3 小结</h2><p>浏览了一下 1.1Beta 2 的主要特性，其实就是改改包名，修几个小 Bug，大的改动基本没有了。如果大家想要尽早上手 1.1 的特性，那么就从现在开始吧~</p><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-协程改包名风波&quot;&gt;&lt;a href=&quot;#1-协程改包名风波&quot; class=&quot;headerlink&quot; title=&quot;1 协程改包名风波&quot;&gt;&lt;/a&gt;1 协程改包名风波&lt;/h2&gt;&lt;p&gt;说真的，看到这个标题的时候我还挺兴奋，离 release 又近了一步。不过，看了这篇
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 1.0.6</title>
    <link href="https://github.com/itgoyo/2017/01/02/Kotlin%201.0.6.html"/>
    <id>https://github.com/itgoyo/2017/01/02/Kotlin 1.0.6.html</id>
    <published>2017-01-02T08:22:57.000Z</published>
    <updated>2017-11-23T13:07:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我把所有文章和视频都放到了 <a href="https://github.com/enbandari/Kotlin-Tutorials">Github</a> 上 ，如果你喜欢，请给个 Star，谢谢~</p></blockquote><p>在上周二，Kotlin 1.0.6 发布啦！这次更新主要是工具更新和bug修复。本文的内容主要来自<a href="https://blog.jetbrains.com/kotlin/" target="_blank" rel="external">官方博客</a>。</p><h2 id="IDE-插件的更新"><a href="#IDE-插件的更新" class="headerlink" title="IDE 插件的更新"></a>IDE 插件的更新</h2><ul><li><ol><li>try-finally 转换为 use()</li></ol></li></ul><p>通常我们在进行 IO 操作的时候，我们并不希望异常影响我们程序的执行，所以我们需要对异常进行捕获，但捕获的话我们也没有必要处理，所以写下来的就是下面的形式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">... <span class="keyword">do</span> something with <span class="string">"reader"</span> ...</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">reader.close()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但这样写起来是不是非常的不流畅？如果用 use() 的话，简直一气呵成：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reader.use&#123;</div><div class="line">reader -&gt; ... <span class="keyword">do</span> something with <span class="string">"reader"</span> ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以，这次更新 Kotlin 的插件为我们带来了这样的自动转换功能：</p><p><img src="/assets/2017.1.2/try.gif" alt=""></p><ul><li><ol><li>补全具名参数</li></ol></li></ul><p>通常我们在编写代码的时候，函数入参都会按照顺序一个一个传入，不过随着代码量的增加，特别是对于参数较多的函数，一长串的代码看上去会让我们感到非常的头疼。所以，这次更新 Kotlin 还为我们带来了自动补全具名参数的功能。</p><p><img src="/assets/2017.1.2/args.gif" alt=""></p><ul><li><ol><li>删除空构造方法的声明</li></ol></li><li><ol><li>合并声明和赋值</li></ol></li><li><ol><li>inline 函数的问题修复和调试工具的优化</li></ol></li><li><ol><li>提示、KDoc 和 Quick Doc 相关的较多问题的修复</li></ol></li></ul><h2 id="Android-相关更新"><a href="#Android-相关更新" class="headerlink" title="Android 相关更新"></a>Android 相关更新</h2><ul><li>支持 Android Studio 2.3 beta 1 和 Android Gradle Plugin 2.3.0-alpha3及更新的版本</li><li>增加 “Create XML resource” 的提示</li><li>Android Extensions support 这个功能可以让我们很方便的引用 XML 布局的 View，不过这需要我们主动启用 ‘kotlin-android-extensions’ 才行。在过去，即使不启用这个插件，IDE 也会允许我们直接引用 XML 布局的 View，但这并不能正常编译，所以这次更新修复了这个问题：只有启用了这个插件，IDE 才会允许我们引用对应的 View。</li><li>Android Lint 相关的问题修复。</li><li>增加 Suppress Lint 提示。</li></ul><h2 id="Kapt-优化"><a href="#Kapt-优化" class="headerlink" title="Kapt 优化"></a>Kapt 优化</h2><p>尽管还不能完全支持增量编译，相比 1.0.4，这次更新较大的提升了 Kapt 的性能。如果需要启用 Kapt，请在 gradle 当中启动它：<figure class="highlight plain"><figcaption><span>plugin: 'kotlin-kapt'```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## All-open 插件</div><div class="line"></div><div class="line">我们知道 Kotlin 的所有类及其成员默认情况下都是 final 的，也就是说你想要继承一个类，就要不断得写各种 open。刚开始看到这一特性的时候，觉得很赞，它对培养良好的编码意识非常有帮助，不过它也在某些情况下给我们带来麻烦，比如在一些大量依赖继承和覆写的 Java 框架的使用中。</div><div class="line"></div><div class="line">这一次 Kotlin 提供了一个妥协的办法，主要某个类被某一个特定注解标注，那么这个类就默认所有成员通通 open，省得一个一个写了。有关 allopen 的讨论，大家可以参考这里 [KEEP](https://github.com/Kotlin/KEEP/pull/40)。</div><div class="line"></div><div class="line">那么 allopen 如何使用呢？</div><div class="line"></div><div class="line">```groovy</div><div class="line">buildscript &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &quot;kotlin-allopen&quot;</div><div class="line"></div><div class="line">allOpen &#123;</div><div class="line">    annotation(&quot;com.your.Annotation&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &quot;kotlin-allopen&quot;</div><div class="line"></div><div class="line">allOpen &#123;</div><div class="line">    annotation(&quot;com.your.Annotation&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>那么所有被 com.your.Annotation 这个注解标注的类成员都会默认 open。除此之外，它还可以作为元注解使用：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@com</span>.your.Annotation</div><div class="line">annotation <span class="class"><span class="keyword">class</span> <span class="title">MyFrameworkAnnotation</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class">@<span class="title">MyFrameworkAnnotation</span></span></div><div class="line"><span class="class"><span class="title">class</span> <span class="title">MyClass</span> // <span class="title">will</span> <span class="title">be</span> <span class="title">all</span>-<span class="title">open</span></span></div></pre></td></tr></table></figure><p>Kotlin 还提供了 “kotlin-spring” 插件，其中包含了 spring 相关的所有注解，这样免得我们一个一个在 allopen 的配置中声明了。</p><h2 id="No-arg-插件"><a href="#No-arg-插件" class="headerlink" title="No-arg 插件"></a>No-arg 插件</h2><p>如果大家看过我的视频，一定对我之前提到的“毁三观”的实例化有印象吧，附上<a href="https://github.com/enbandari/Kotlin-Tutorials">视频连接：12 Json数据引发的血案</a>，其中我们提到对于没有无参构造方法的 Kotlin 类，Gson 反序列化它们的时候，不知道如何实例化它们，只好用到了 <figure class="highlight plain"><figcaption><span>这个类。听说 Java 9 要移除这个略显黑科技的类，如果是这样，Gson 是不是会被削弱呢？Java 的心我们还是不操了，从 Kotlin 1.0.6 开始，这个问题将得到一个比较好的解决。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```groovy</div><div class="line">buildscript &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Or &quot;kotlin-jpa&quot; for the Java Persistence API support</div><div class="line">apply plugin: &quot;kotlin-noarg&quot;</div><div class="line"></div><div class="line">noArg &#123;</div><div class="line">    annotation(&quot;com.your.Annotation&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>类似于 allopen 的使用方法，如果某个类需要无参默认构造方法，你只需要用上面声明好的注解 com.your.Annotation 标注即可。当然，这个生成的默认构造方法只能通过反射调用。</p><h2 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h2><p>我一直觉得虽然我们出生就被选择了 Hard 模式，但我们没啥感觉啊。可是最近一直访问国外的网站，感觉真的好困难，宽带换成了电信 100M，下载 Kotlin 的插件仍然跟小水管一样，真也是没谁了。为了方便大家我把我下载的几个版本的插件放到<a href="https://pan.baidu.com/s/1pLbb2fp" target="_blank" rel="external">百度网盘</a>，供大家使用，请大家点击阅读原文获取下载地址。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>目前 Kotlin 1.0.x 的版本更新更侧重于稳定性和易用性，因此语言上的特性基本不会更新，主要集中于 IDE 插件和编译器插件。如果大家期待语言特性的更新，那我们就去关注一下 1.1 吧！</p><div align="center"><br><br>发现更多有趣好玩的，欢迎关注我的微信公众号<br><br><img src="/assets/getqrcode.jpeg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我把所有文章和视频都放到了 &lt;a href=&quot;https://github.com/enbandari/Kotlin-Tutorials&quot;&gt;Github&lt;/a&gt; 上 ，如果你喜欢，请给个 Star，谢谢~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[译]Kotlin 1.0 Beta 3 发布啦!</title>
    <link href="https://github.com/itgoyo/2015/12/07/Kotlin%201.0%20Beta%203%20is%20Out!.html"/>
    <id>https://github.com/itgoyo/2015/12/07/Kotlin 1.0 Beta 3 is Out!.html</id>
    <published>2015-12-07T07:45:00.000Z</published>
    <updated>2017-06-23T16:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们很高兴发布了 Kotlin 1.0 Beta 的另一个更新。我们正在努力完善标准库，抛弃了过时已久的设计结构，同时修复了 bugs，改进性能和为下一个版本作准备。<br>完整的更新历史在 <a href="https://youtrack.jetbrains.com/issues/KT?q=%23Major+%23Critical+%23Resolved+-Obsolete+-%7BEclipse+Plugin%7D+resolved+date%3A+2015-11-16+..+2015-11-30" target="_blank" rel="external">这里</a> 。</p><p>最新的 issue 在 <a href="https://youtrack.jetbrains.com/issues/KT?q=%23Major+%23Critical+%23Resolved+-Obsolete+-%7BEclipse+Plugin%7D+resolved+date%3A+2015-11-16+..+2015-11-30" target="_blank" rel="external">这里</a> 。</p><h2 id="Library-变更"><a href="#Library-变更" class="headerlink" title="Library 变更"></a>Library 变更</h2><p>我们努力在 1.0 版本到来之前让标准库变得更加完美。这意味着进行一些尝试，所以会有新的部分被弃用，有新的函数被添加。我们计划在 1.0 版本（或 RC）中对标准库进行一次最后的清理：删除所有已过时和其他遗留的东西。<br>这里我们只关心一个需要注意的<a href="https://github.com/JetBrains/kotlin/releases/tag/build-1.0.0-beta-3595">变化</a>：现在<code>contains()</code>和其他类似的扩展方法接受集合元素的父类型。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// strs: Collection&lt;String&gt;</span></div><div class="line"><span class="comment">// ns: String?</span></div><div class="line"><span class="comment">// cs: CharSequence</span></div><div class="line"><span class="comment">// i: Int</span></div><div class="line">strs.contains(ns) <span class="comment">// accepted now</span></div><div class="line">strs.contains(cs) <span class="comment">// accepted now</span></div><div class="line">str.contains(i) <span class="comment">// ERROR (in fact, a deprecation warning, but will be an error soon)</span></div></pre></td></tr></table></figure><p>我们发现以前建议的<code>containsRaw</code>方法比较低效，使用<code>contains()</code>更加合适，同时保证了兼容性。请注意，集合接口本身是完整的，所有这些都是通过扩展功能完成的。请使用<em>Code Cleanup</em>来迁移代码。</p><h2 id="语言变化"><a href="#语言变化" class="headerlink" title="语言变化"></a>语言变化</h2><p>一些需要注意的语言变化，完整列表在<a href="https://github.com/JetBrains/kotlin/releases/tag/build-1.0.0-beta-3595">这里</a> 。</p><p>许多我们以前不推荐的实现现在会报错。请使用<em>Code Cleanup</em>进行迁移。</p><h3 id="When-表达式"><a href="#When-表达式" class="headerlink" title="When 表达式"></a>When 表达式</h3><p>这种代码已被证明是有问题的，所以我们决定弃用它：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">when</span> &#123;</div><div class="line">    foo.isValid(), foo.isReady() -&gt; process(foo)</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>许多人倾向于认为条件 <code>foo.isValid(), foo.isReady()</code> 表示 <code>foo.isValid() == true and foo.isReady() == true</code>，而实际上逗号是指 <strong>or</strong>。解决方法很简单：只需使用 <strong>||</strong>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">when</span> &#123;</div><div class="line">    foo.isValid() || foo.isReady() -&gt; process(foo)</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><em>Code Cleanup</em>会自动迁移。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>一个 bug 已被修复，现在我们可以在注解的参数中使用默认值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">annotation</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span></span>(<span class="keyword">val</span> value: String)</div><div class="line"> </div><div class="line"><span class="keyword">annotation</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>(</div><div class="line">        <span class="keyword">val</span> entries: Array&lt;Entry&gt; = arrayOf(Entry(<span class="string">"a"</span>), Entry(<span class="string">"b"</span>)) <span class="comment">// OK now</span></div><div class="line">)</div></pre></td></tr></table></figure><h3 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值()"></a>枚举值()</h3><p>最近我们将传统的 Java 的<code>Enum.values()</code>更改为一个属性：<code>Enum.values</code>，但现在我们将回滚这个更改，因为有一个没有注意到的角落：枚举中的常量可能被命名为<code>values</code>，然后便没有办法访问其中的任何一个。我们考虑了不同的方案，最后决定将<code>values</code>改回函数是最干净的。<br>所以，现在不推荐使用<code>values</code>属性，也不推荐使用<code>values()</code>函数。</p><h3 id="可见性和作用域"><a href="#可见性和作用域" class="headerlink" title="可见性和作用域"></a>可见性和作用域</h3><p>我们正在清理和修正小问题的可见性和作用域</p><ul><li>companion objects 中允许 protected 成员</li><li>子类调用非 @JvmStatic 的 protected 对象将被标记为错误（不支持）</li><li>对于 open 属性，私有 setters 现在已被标记为过时</li><li>local sealed class 已弃用（从不可用）</li><li>重写的 setter 不能降低可见性</li><li>枚举类中不再允许存在内部类</li><li>lambdas / object literals / local 函数中禁止使用未初始化的变量</li></ul><h2 id="Android-扩展"><a href="#Android-扩展" class="headerlink" title="Android 扩展"></a>Android 扩展</h2><p>我们合并了 IntelliJ IDEA 的主要 Kotlin 插件和 Android 的<em>Kotlin</em>扩展插件。后者现在已经过时了，因为它的功能可以从 Kotlin 插件获取。<br>此外，我们还添加了对 Android <strong>productFlavors</strong>的支持：现在，来自不同 flavors 的属性可以在不同的包中使用。<br>例如，我们可以在<code>build.gradle</code>文件中存在两种 flavors：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line">    free &#123;</div><div class="line">        versionName <span class="string">"1.0-free"</span></div><div class="line">    &#125;</div><div class="line">    pro &#123;</div><div class="line">        versionName <span class="string">"1.0-pro"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在，我们不仅可以在<strong>main source set</strong>中的布局使用合成属性，还可以在 flavor 布局使用合成属性：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Import synthetic properties for the `activity_free.xml` layout in the `free` flavor</span></div><div class="line"><span class="keyword">import</span> kotlinx.android.synthetic.free.activity_free.versionMarker</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreeActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        ...</div><div class="line"> </div><div class="line">        setContentView(R.layout.activity_free)</div><div class="line"> </div><div class="line">        ...</div><div class="line"> </div><div class="line">        versionMarker.text = <span class="string">"Free version"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>请注意，<strong>main source set</strong>的所有布局现在位于<code>kotlinx.android.synthetic.main</code>包之下，旧的包命名约定已被弃用。</p><h2 id="IDE-中的新功能"><a href="#IDE-中的新功能" class="headerlink" title="IDE 中的新功能"></a>IDE 中的新功能</h2><ul><li><p>Android Extensions 插件已被合并到 Kotlin 插件中，不再需要单独安装<br><img src="https://i2.wp.com/blog.jetbrains.com/kotlin/files/2015/12/Screen-Shot-2015-12-02-at-19.54.03.png?w=640&amp;ssl=1" alt="Screen Shot 2015-12-02 at 19.54.03" width="640" height="437"></p></li><li><p>创建新的 Gradle 工程时，添加了 Kotlin 的选项以供选择：</p></li><li><p>调试器：stacktrace 导航功能现在支持跟踪内联函数的堆栈帧。同时对内联函数的步进调试功能进行了一系列的改进。</p></li><li><p>添加了三个快速初始化新属性的<em>Quick Fixes</em>：<br><img src="https://i0.wp.com/blog.jetbrains.com/kotlin/files/2015/12/init.png?w=640" onmouseover="this.src='https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2015/12/init.gif';" onmouseout="this.src='https://i0.wp.com/blog.jetbrains.com/kotlin/files/2015/12/init.png?w=640';" width="640" height="172"></p></li><li><p><strong>Introduce Variable</strong>（Ctrl + Alt + V / Cmd + Alt + V）现在支持<strong>结构声明(multi-declarations)</strong>：<br><img src="https://i0.wp.com/blog.jetbrains.com/kotlin/files/2015/12/destructuring.png?w=640" onmouseover="this.src='https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2015/12/destructuring.gif';" onmouseout="this.src='https://i0.wp.com/blog.jetbrains.com/kotlin/files/2015/12/destructuring.png?w=640';" width="640" height="172"></p></li><li><p>同时<strong>Introduce Variable</strong>还能使用于 lambda 或匿名函数中：<br><img src="https://i1.wp.com/blog.jetbrains.com/kotlin/files/2015/12/container.png?w=640" onmouseover="this.src='https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2015/12/container.gif';" onmouseout="this.src='https://i1.wp.com/blog.jetbrains.com/kotlin/files/2015/12/container.png?w=640';" width="640" height="197"></p></li><li><p>Beta 3 开始支持在字符串模板中使用 Introduce Variable/Parameter/Property/Function<br><img src="https://i0.wp.com/blog.jetbrains.com/kotlin/files/2015/12/templates.png?w=640" onmouseover="this.src='https://d3nmt5vlzunoa1.cloudfront.net/kotlin/files/2015/12/templates.gif';" onmouseout="this.src='https://i0.wp.com/blog.jetbrains.com/kotlin/files/2015/12/templates.png?w=640';" width="640" height="197"></p></li><li><p>最后，添加了一个实验功能 —— 在 IDE 中对 Kotlin 脚本文件（.kts）做了基本的支持</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们很高兴发布了 Kotlin 1.0 Beta 的另一个更新。我们正在努力完善标准库，抛弃了过时已久的设计结构，同时修复了 bugs，改进性能和为下一个版本作准备。&lt;br&gt;完整的更新历史在 &lt;a href=&quot;https://youtrack.jetbrains.com/i
      
    
    </summary>
    
      <category term="官方动态" scheme="https://github.com/itgoyo/categories/%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    
    
      <category term="Kotlin" scheme="https://github.com/itgoyo/tags/Kotlin/"/>
    
  </entry>
  
</feed>
